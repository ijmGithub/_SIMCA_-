
SimcaSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800bff0  0800bff0  0000cff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4b8  0800c4b8  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4b8  0800c4b8  0000d4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4c0  0800c4c0  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4c0  0800c4c0  0000d4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c4c4  0800c4c4  0000d4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c4c8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d8  2**0
                  CONTENTS
 10 .bss          0000209c  200001d8  200001d8  0000e1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002274  20002274  0000e1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ad86  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037ce  00000000  00000000  00028f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000119b  00000000  00000000  0002dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004bd0  00000000  00000000  0002ef83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c952  00000000  00000000  00033b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3229  00000000  00000000  000504a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001036ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007160  00000000  00000000  00103714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0010a874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfd8 	.word	0x0800bfd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800bfd8 	.word	0x0800bfd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <vADCTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vADCTask(void *pvParameters) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b096      	sub	sp, #88	@ 0x58
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	6078      	str	r0, [r7, #4]
	float voltage;
	float value;
	char buffer[50];

	for (;;) {
		osDelay(2000); // Leer cada segundo
 8000c50:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c54:	f005 fe64 	bl	8006920 <osDelay>
		// Leer el valor del ADC
		HAL_ADC_Start(&hadc1);
 8000c58:	4837      	ldr	r0, [pc, #220]	@ (8000d38 <vADCTask+0xf0>)
 8000c5a:	f001 f86b 	bl	8001d34 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c62:	4835      	ldr	r0, [pc, #212]	@ (8000d38 <vADCTask+0xf0>)
 8000c64:	f001 f952 	bl	8001f0c <HAL_ADC_PollForConversion>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d105      	bne.n	8000c7a <vADCTask+0x32>
			adc_value = HAL_ADC_GetValue(&hadc1);
 8000c6e:	4832      	ldr	r0, [pc, #200]	@ (8000d38 <vADCTask+0xf0>)
 8000c70:	f001 fa1a 	bl	80020a8 <HAL_ADC_GetValue>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		}
		HAL_ADC_Stop(&hadc1);
 8000c7a:	482f      	ldr	r0, [pc, #188]	@ (8000d38 <vADCTask+0xf0>)
 8000c7c:	f001 f910 	bl	8001ea0 <HAL_ADC_Stop>

		// Convertir el valor del ADC a voltaje
		voltage = (adc_value * 5.0) / 4095; // Suponiendo un rango de 0 a 5V
 8000c80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fc4d 	bl	8000524 <__aeabi_i2d>
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <vADCTask+0xf4>)
 8000c90:	f7ff fcb2 	bl	80005f8 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4610      	mov	r0, r2
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	a322      	add	r3, pc, #136	@ (adr r3, 8000d28 <vADCTask+0xe0>)
 8000c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca2:	f7ff fdd3 	bl	800084c <__aeabi_ddiv>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4610      	mov	r0, r2
 8000cac:	4619      	mov	r1, r3
 8000cae:	f7ff ff7b 	bl	8000ba8 <__aeabi_d2f>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	64bb      	str	r3, [r7, #72]	@ 0x48

		// Aplicar el FACTOR_DE_CONVERSION_CO2
		value = voltage * FACTOR_DE_CONVERSION_CO2;
 8000cb6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000cba:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000d40 <vADCTask+0xf8>
 8000cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cc2:	ee17 0a90 	vmov	r0, s15
 8000cc6:	f7ff fc3f 	bl	8000548 <__aeabi_f2d>
 8000cca:	a319      	add	r3, pc, #100	@ (adr r3, 8000d30 <vADCTask+0xe8>)
 8000ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd0:	f7ff fdbc 	bl	800084c <__aeabi_ddiv>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4610      	mov	r0, r2
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f7ff ff64 	bl	8000ba8 <__aeabi_d2f>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	647b      	str	r3, [r7, #68]	@ 0x44

		// Formatear el mensaje para enviarlo por UART
		int len = snprintf(buffer, sizeof(buffer), "ADD_GAS_CONCENTRATION:%.2f\n", value);
 8000ce4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000ce6:	f7ff fc2f 	bl	8000548 <__aeabi_f2d>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	f107 000c 	add.w	r0, r7, #12
 8000cf2:	e9cd 2300 	strd	r2, r3, [sp]
 8000cf6:	4a13      	ldr	r2, [pc, #76]	@ (8000d44 <vADCTask+0xfc>)
 8000cf8:	2132      	movs	r1, #50	@ 0x32
 8000cfa:	f009 f809 	bl	8009d10 <sniprintf>
 8000cfe:	6438      	str	r0, [r7, #64]	@ 0x40
		if (len < 0 || len >= sizeof(buffer)) {
 8000d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d02:	2b00      	cmp	r3, #0
			// Error de formateo, el búfer es demasiado pequeño
			// Manejar el error según sea necesario
		}

		// Imprimir el contenido del búfer para depuración
		printf("Contenido del búfer: %s\n", buffer);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480f      	ldr	r0, [pc, #60]	@ (8000d48 <vADCTask+0x100>)
 8000d0c:	f008 ff90 	bl	8009c30 <iprintf>

		// Enviar el mensaje por UART
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8000d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	f107 010c 	add.w	r1, r7, #12
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	480b      	ldr	r0, [pc, #44]	@ (8000d4c <vADCTask+0x104>)
 8000d1e:	f004 ff4d 	bl	8005bbc <HAL_UART_Transmit>
	for (;;) {
 8000d22:	e795      	b.n	8000c50 <vADCTask+0x8>
 8000d24:	f3af 8000 	nop.w
 8000d28:	00000000 	.word	0x00000000
 8000d2c:	40affe00 	.word	0x40affe00
 8000d30:	66666666 	.word	0x66666666
 8000d34:	400a6666 	.word	0x400a6666
 8000d38:	200001f4 	.word	0x200001f4
 8000d3c:	40140000 	.word	0x40140000
 8000d40:	459c4000 	.word	0x459c4000
 8000d44:	0800bffc 	.word	0x0800bffc
 8000d48:	0800c018 	.word	0x0800c018
 8000d4c:	2000034c 	.word	0x2000034c

08000d50 <vI2CTask>:
	}
}

void vI2CTask(void *pvParameters) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b092      	sub	sp, #72	@ 0x48
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	6078      	str	r0, [r7, #4]
  uint8_t data[2];
  uint16_t value;
  char buffer[50]; // Aumenta el tamaño del buffer para acomodar el mensaje completo
  for (;;) {
  	HAL_Delay(1000); // Leer cada segundo
 8000d58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d5c:	f000 fe34 	bl	80019c8 <HAL_Delay>
    // Leer datos del sensor I2C
    HAL_I2C_Master_Receive(&hi2c1, I2C_ADDRESS, data, 2, HAL_MAX_DELAY);
 8000d60:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	215c      	movs	r1, #92	@ 0x5c
 8000d6e:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <vI2CTask+0x68>)
 8000d70:	f002 f9ac 	bl	80030cc <HAL_I2C_Master_Receive>

    // Convertir datos en un valor
    value = (data[0] << 8) | data[1];
 8000d74:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	b21a      	sxth	r2, r3
 8000d7c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	4313      	orrs	r3, r2
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // Formatear el mensaje para que coincida con el formato esperado por el servidor
    sprintf(buffer, "ADD_LIGHT_INTENSITY:%d\n", value);
 8000d88:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	490b      	ldr	r1, [pc, #44]	@ (8000dbc <vI2CTask+0x6c>)
 8000d90:	4618      	mov	r0, r3
 8000d92:	f008 fff1 	bl	8009d78 <siprintf>

    // Enviar el valor formateado por la UART
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fa68 	bl	8000270 <strlen>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	f107 0108 	add.w	r1, r7, #8
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dac:	4804      	ldr	r0, [pc, #16]	@ (8000dc0 <vI2CTask+0x70>)
 8000dae:	f004 ff05 	bl	8005bbc <HAL_UART_Transmit>
  for (;;) {
 8000db2:	bf00      	nop
 8000db4:	e7d0      	b.n	8000d58 <vI2CTask+0x8>
 8000db6:	bf00      	nop
 8000db8:	20000244 	.word	0x20000244
 8000dbc:	0800c034 	.word	0x0800c034
 8000dc0:	2000034c 	.word	0x2000034c

08000dc4 <vSPITask>:
  }
}

void vSPITask(void *pvParameters) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b096      	sub	sp, #88	@ 0x58
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	6078      	str	r0, [r7, #4]
    uint8_t rxBuffer[4];
    uint32_t temperature;
    char buffer[50];

    for (;;) {
    	HAL_Delay(2000);
 8000dcc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dd0:	f000 fdfa 	bl	80019c8 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // CS Low (usar PA1)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ddc:	f002 f8ce 	bl	8002f7c <HAL_GPIO_WritePin>
        HAL_SPI_Receive(&hspi1, rxBuffer, 4, HAL_MAX_DELAY);  // Leer 4 bytes del MAX31855
 8000de0:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000de4:	f04f 33ff 	mov.w	r3, #4294967295
 8000de8:	2204      	movs	r2, #4
 8000dea:	482d      	ldr	r0, [pc, #180]	@ (8000ea0 <vSPITask+0xdc>)
 8000dec:	f004 f983 	bl	80050f6 <HAL_SPI_Receive>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // CS High (usar PA1)
 8000df0:	2201      	movs	r2, #1
 8000df2:	2102      	movs	r1, #2
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df8:	f002 f8c0 	bl	8002f7c <HAL_GPIO_WritePin>

        // Combinar los bytes recibidos en un valor de 32 bits
        temperature = (rxBuffer[0] << 24) | (rxBuffer[1] << 16) | (rxBuffer[2] << 8) | rxBuffer[3];
 8000dfc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000e00:	061a      	lsls	r2, r3, #24
 8000e02:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000e06:	041b      	lsls	r3, r3, #16
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	4313      	orrs	r3, r2
 8000e12:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000e16:	4313      	orrs	r3, r2
 8000e18:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Extraer el valor de temperatura
        int16_t temp = (temperature >> 18) & 0x00003FFF;
 8000e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e1c:	0c9b      	lsrs	r3, r3, #18
 8000e1e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        if (temp & 0x2000) {
 8000e22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d007      	beq.n	8000e3e <vSPITask+0x7a>
            temp |= 0xC000; // Extender el signo para valores negativos
 8000e2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000e32:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8000e36:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8000e3a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        }

        float temperatureCelsius = temp * 0.25; // Convertir a grados Celsius
 8000e3e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fb6e 	bl	8000524 <__aeabi_i2d>
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <vSPITask+0xe0>)
 8000e4e:	f7ff fbd3 	bl	80005f8 <__aeabi_dmul>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4610      	mov	r0, r2
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f7ff fea5 	bl	8000ba8 <__aeabi_d2f>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	647b      	str	r3, [r7, #68]	@ 0x44

        // Formatear el mensaje para enviarlo por UART
        int len = snprintf(buffer, sizeof(buffer), "ADD_TEMPERATURE:%.2f\n", temperatureCelsius);
 8000e62:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000e64:	f7ff fb70 	bl	8000548 <__aeabi_f2d>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	f107 0008 	add.w	r0, r7, #8
 8000e70:	e9cd 2300 	strd	r2, r3, [sp]
 8000e74:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea8 <vSPITask+0xe4>)
 8000e76:	2132      	movs	r1, #50	@ 0x32
 8000e78:	f008 ff4a 	bl	8009d10 <sniprintf>
 8000e7c:	6438      	str	r0, [r7, #64]	@ 0x40
        if (len > 0 && len < sizeof(buffer)) {
 8000e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	dda3      	ble.n	8000dcc <vSPITask+0x8>
 8000e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e86:	2b31      	cmp	r3, #49	@ 0x31
 8000e88:	d8a0      	bhi.n	8000dcc <vSPITask+0x8>
            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8000e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f107 0108 	add.w	r1, r7, #8
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <vSPITask+0xe8>)
 8000e98:	f004 fe90 	bl	8005bbc <HAL_UART_Transmit>
    for (;;) {
 8000e9c:	e796      	b.n	8000dcc <vSPITask+0x8>
 8000e9e:	bf00      	nop
 8000ea0:	20000298 	.word	0x20000298
 8000ea4:	3fd00000 	.word	0x3fd00000
 8000ea8:	0800c04c 	.word	0x0800c04c
 8000eac:	2000034c 	.word	0x2000034c

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09e      	sub	sp, #120	@ 0x78
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb6:	f000 fd21 	bl	80018fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eba:	f000 f885 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebe:	f000 fa29 	bl	8001314 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 f9f7 	bl	80012b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ec6:	f000 f8db 	bl	8001080 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000eca:	f000 f949 	bl	8001160 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ece:	f000 f987 	bl	80011e0 <MX_SPI1_Init>
  MX_USART1_Init();
 8000ed2:	f000 f9c3 	bl	800125c <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ed6:	f005 fc11 	bl	80066fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000eda:	4a2f      	ldr	r2, [pc, #188]	@ (8000f98 <main+0xe8>)
 8000edc:	2100      	movs	r1, #0
 8000ede:	482f      	ldr	r0, [pc, #188]	@ (8000f9c <main+0xec>)
 8000ee0:	f005 fc74 	bl	80067cc <osThreadNew>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a2e      	ldr	r2, [pc, #184]	@ (8000fa0 <main+0xf0>)
 8000ee8:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */

  osThreadAttr_t adcTask_attributes = {
 8000eea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000eee:	2224      	movs	r2, #36	@ 0x24
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f009 f838 	bl	8009f68 <memset>
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa4 <main+0xf4>)
 8000efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000efc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000f02:	2318      	movs	r3, #24
 8000f04:	663b      	str	r3, [r7, #96]	@ 0x60
    .name = "adcTask",
    .stack_size = 256 * 4,
    .priority = (osPriority_t) osPriorityNormal,
  };

  osThreadAttr_t spiTask_attributes = {
 8000f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0a:	2224      	movs	r2, #36	@ 0x24
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f009 f82a 	bl	8009f68 <memset>
 8000f14:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <main+0xf8>)
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000f1e:	2318      	movs	r3, #24
 8000f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
     .name = "spiTask",
     .stack_size = 256 * 4,
     .priority = (osPriority_t) osPriorityNormal,
 };

  osThreadAttr_t i2cTask_attributes = {
 8000f22:	463b      	mov	r3, r7
 8000f24:	2224      	movs	r2, #36	@ 0x24
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f009 f81d 	bl	8009f68 <memset>
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <main+0xfc>)
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	2318      	movs	r3, #24
 8000f3a:	61bb      	str	r3, [r7, #24]
    .name = "i2cTask",
    .stack_size = 256 * 4,
    .priority = (osPriority_t) osPriorityNormal,
  };

  osThreadId_t adcTaskHandle = osThreadNew(vADCTask, NULL, &adcTask_attributes);
 8000f3c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f40:	461a      	mov	r2, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	481a      	ldr	r0, [pc, #104]	@ (8000fb0 <main+0x100>)
 8000f46:	f005 fc41 	bl	80067cc <osThreadNew>
 8000f4a:	6778      	str	r0, [r7, #116]	@ 0x74
  osThreadId_t spiTaskHandle = osThreadNew(vSPITask, NULL, &spiTask_attributes);
 8000f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f50:	461a      	mov	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	4817      	ldr	r0, [pc, #92]	@ (8000fb4 <main+0x104>)
 8000f56:	f005 fc39 	bl	80067cc <osThreadNew>
 8000f5a:	6738      	str	r0, [r7, #112]	@ 0x70
  osThreadId_t i2cTaskHandle = osThreadNew(vI2CTask, NULL, &i2cTask_attributes);
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2100      	movs	r1, #0
 8000f62:	4815      	ldr	r0, [pc, #84]	@ (8000fb8 <main+0x108>)
 8000f64:	f005 fc32 	bl	80067cc <osThreadNew>
 8000f68:	66f8      	str	r0, [r7, #108]	@ 0x6c
  if (adcTaskHandle == NULL) {
 8000f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <main+0xc6>
      printf("Failed to create adcTask\n");
 8000f70:	4812      	ldr	r0, [pc, #72]	@ (8000fbc <main+0x10c>)
 8000f72:	f008 fec5 	bl	8009d00 <puts>
  }
  if (spiTaskHandle == NULL) {
 8000f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <main+0xd2>
      printf("Failed to create spiTask\n");
 8000f7c:	4810      	ldr	r0, [pc, #64]	@ (8000fc0 <main+0x110>)
 8000f7e:	f008 febf 	bl	8009d00 <puts>
  }
  if (i2cTaskHandle == NULL) {
 8000f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <main+0xde>
      printf("Failed to create i2cTask\n");
 8000f88:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <main+0x114>)
 8000f8a:	f008 feb9 	bl	8009d00 <puts>
  }

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f8e:	f005 fbe9 	bl	8006764 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f92:	bf00      	nop
 8000f94:	e7fd      	b.n	8000f92 <main+0xe2>
 8000f96:	bf00      	nop
 8000f98:	0800c0e8 	.word	0x0800c0e8
 8000f9c:	080013a9 	.word	0x080013a9
 8000fa0:	200003d4 	.word	0x200003d4
 8000fa4:	0800c064 	.word	0x0800c064
 8000fa8:	0800c06c 	.word	0x0800c06c
 8000fac:	0800c074 	.word	0x0800c074
 8000fb0:	08000c49 	.word	0x08000c49
 8000fb4:	08000dc5 	.word	0x08000dc5
 8000fb8:	08000d51 	.word	0x08000d51
 8000fbc:	0800c07c 	.word	0x0800c07c
 8000fc0:	0800c098 	.word	0x0800c098
 8000fc4:	0800c0b4 	.word	0x0800c0b4

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b096      	sub	sp, #88	@ 0x58
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fd2:	2228      	movs	r2, #40	@ 0x28
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f008 ffc6 	bl	8009f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
 8000ffa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001000:	2301      	movs	r3, #1
 8001002:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001004:	2310      	movs	r3, #16
 8001006:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001008:	2302      	movs	r3, #2
 800100a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800100c:	2300      	movs	r3, #0
 800100e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001010:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001014:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800101a:	4618      	mov	r0, r3
 800101c:	f002 fc2e 	bl	800387c <HAL_RCC_OscConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001026:	f000 f9c7 	bl	80013b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	230f      	movs	r3, #15
 800102c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f003 fc57 	bl	80048f8 <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001050:	f000 f9b2 	bl	80013b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001054:	23a1      	movs	r3, #161	@ 0xa1
 8001056:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800105c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001060:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fe7b 	bl	8004d64 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001074:	f000 f9a0 	bl	80013b8 <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3758      	adds	r7, #88	@ 0x58
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	@ 0x28
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010a2:	4b2e      	ldr	r3, [pc, #184]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010aa:	4b2c      	ldr	r3, [pc, #176]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b0:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010b6:	4b29      	ldr	r3, [pc, #164]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010bc:	4b27      	ldr	r3, [pc, #156]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c2:	4b26      	ldr	r3, [pc, #152]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ca:	4b24      	ldr	r3, [pc, #144]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010de:	2201      	movs	r2, #1
 80010e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e2:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010ec:	2204      	movs	r2, #4
 80010ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fc:	4817      	ldr	r0, [pc, #92]	@ (800115c <MX_ADC1_Init+0xdc>)
 80010fe:	f000 fc87 	bl	8001a10 <HAL_ADC_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001108:	f000 f956 	bl	80013b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	4811      	ldr	r0, [pc, #68]	@ (800115c <MX_ADC1_Init+0xdc>)
 8001118:	f001 fa92 	bl	8002640 <HAL_ADCEx_MultiModeConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001122:	f000 f949 	bl	80013b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001126:	2301      	movs	r3, #1
 8001128:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800112a:	2301      	movs	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	@ (800115c <MX_ADC1_Init+0xdc>)
 8001144:	f000 ffbe 	bl	80020c4 <HAL_ADC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800114e:	f000 f933 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	@ 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001f4 	.word	0x200001f4

08001160 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_I2C1_Init+0x74>)
 8001166:	4a1c      	ldr	r2, [pc, #112]	@ (80011d8 <MX_I2C1_Init+0x78>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_I2C1_Init+0x74>)
 800116c:	4a1b      	ldr	r2, [pc, #108]	@ (80011dc <MX_I2C1_Init+0x7c>)
 800116e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 184;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_I2C1_Init+0x74>)
 8001172:	22b8      	movs	r2, #184	@ 0xb8
 8001174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_I2C1_Init+0x74>)
 8001178:	2201      	movs	r2, #1
 800117a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_I2C1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_I2C1_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_I2C1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_I2C1_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119a:	480e      	ldr	r0, [pc, #56]	@ (80011d4 <MX_I2C1_Init+0x74>)
 800119c:	f001 ff06 	bl	8002fac <HAL_I2C_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011a6:	f000 f907 	bl	80013b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011aa:	2100      	movs	r1, #0
 80011ac:	4809      	ldr	r0, [pc, #36]	@ (80011d4 <MX_I2C1_Init+0x74>)
 80011ae:	f002 facd 	bl	800374c <HAL_I2CEx_ConfigAnalogFilter>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011b8:	f000 f8fe 	bl	80013b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011bc:	2100      	movs	r1, #0
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_I2C1_Init+0x74>)
 80011c0:	f002 fb0f 	bl	80037e2 <HAL_I2CEx_ConfigDigitalFilter>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ca:	f000 f8f5 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000244 	.word	0x20000244
 80011d8:	40005400 	.word	0x40005400
 80011dc:	2000090e 	.word	0x2000090e

080011e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001254 <MX_SPI1_Init+0x74>)
 80011e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001258 <MX_SPI1_Init+0x78>)
 80011e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <MX_SPI1_Init+0x74>)
 80011ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <MX_SPI1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <MX_SPI1_Init+0x74>)
 80011fa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80011fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <MX_SPI1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001206:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <MX_SPI1_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800120c:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <MX_SPI1_Init+0x74>)
 800120e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001212:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MX_SPI1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <MX_SPI1_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <MX_SPI1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <MX_SPI1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800122c:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <MX_SPI1_Init+0x74>)
 800122e:	2207      	movs	r2, #7
 8001230:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <MX_SPI1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <MX_SPI1_Init+0x74>)
 800123a:	2208      	movs	r2, #8
 800123c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	@ (8001254 <MX_SPI1_Init+0x74>)
 8001240:	f003 feb6 	bl	8004fb0 <HAL_SPI_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800124a:	f000 f8b5 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000298 	.word	0x20000298
 8001258:	40013000 	.word	0x40013000

0800125c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <MX_USART1_Init+0x50>)
 8001262:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <MX_USART1_Init+0x54>)
 8001264:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 38400;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_USART1_Init+0x50>)
 8001268:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800126c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_USART1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001274:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <MX_USART1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800127a:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_USART1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <MX_USART1_Init+0x50>)
 8001282:	220c      	movs	r2, #12
 8001284:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_USART1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <MX_USART1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_USART1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	@ (80012ac <MX_USART1_Init+0x50>)
 800129a:	f005 f864 	bl	8006366 <HAL_USART_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80012a4:	f000 f888 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200002fc 	.word	0x200002fc
 80012b0:	40013800 	.word	0x40013800

080012b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012ba:	4a15      	ldr	r2, [pc, #84]	@ (8001310 <MX_USART2_UART_Init+0x5c>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012be:	4b13      	ldr	r3, [pc, #76]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_USART2_UART_Init+0x58>)
 80012f8:	f004 fc12 	bl	8005b20 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001302:	f000 f859 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000034c 	.word	0x2000034c
 8001310:	40004400 	.word	0x40004400

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800132a:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <MX_GPIO_Init+0x90>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a1d      	ldr	r2, [pc, #116]	@ (80013a4 <MX_GPIO_Init+0x90>)
 8001330:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <MX_GPIO_Init+0x90>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <MX_GPIO_Init+0x90>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <MX_GPIO_Init+0x90>)
 8001348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <MX_GPIO_Init+0x90>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <MX_GPIO_Init+0x90>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a11      	ldr	r2, [pc, #68]	@ (80013a4 <MX_GPIO_Init+0x90>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001364:	6153      	str	r3, [r2, #20]
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <MX_GPIO_Init+0x90>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2102      	movs	r1, #2
 8001376:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137a:	f001 fdff 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800137e:	2302      	movs	r3, #2
 8001380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001398:	f001 fc7e 	bl	8002c98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021000 	.word	0x40021000

080013a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f005 fab5 	bl	8006920 <osDelay>
 80013b6:	e7fb      	b.n	80013b0 <StartDefaultTask+0x8>

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <Error_Handler+0x8>

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_MspInit+0x4c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a10      	ldr	r2, [pc, #64]	@ (8001410 <HAL_MspInit+0x4c>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <HAL_MspInit+0x4c>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_MspInit+0x4c>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_MspInit+0x4c>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_MspInit+0x4c>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	210f      	movs	r1, #15
 80013fe:	f06f 0001 	mvn.w	r0, #1
 8001402:	f001 fc20 	bl	8002c46 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000

08001414 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001434:	d124      	bne.n	8001480 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <HAL_ADC_MspInit+0x74>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	4a13      	ldr	r2, [pc, #76]	@ (8001488 <HAL_ADC_MspInit+0x74>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001440:	6153      	str	r3, [r2, #20]
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HAL_ADC_MspInit+0x74>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <HAL_ADC_MspInit+0x74>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <HAL_ADC_MspInit+0x74>)
 8001454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001458:	6153      	str	r3, [r2, #20]
 800145a:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <HAL_ADC_MspInit+0x74>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146a:	2303      	movs	r3, #3
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147c:	f001 fc0c 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	@ 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	@ 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a17      	ldr	r2, [pc, #92]	@ (8001508 <HAL_I2C_MspInit+0x7c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d127      	bne.n	80014fe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	4b17      	ldr	r3, [pc, #92]	@ (800150c <HAL_I2C_MspInit+0x80>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	4a16      	ldr	r2, [pc, #88]	@ (800150c <HAL_I2C_MspInit+0x80>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b8:	6153      	str	r3, [r2, #20]
 80014ba:	4b14      	ldr	r3, [pc, #80]	@ (800150c <HAL_I2C_MspInit+0x80>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014c6:	23c0      	movs	r3, #192	@ 0xc0
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ca:	2312      	movs	r3, #18
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d6:	2304      	movs	r3, #4
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	480b      	ldr	r0, [pc, #44]	@ (8001510 <HAL_I2C_MspInit+0x84>)
 80014e2:	f001 fbd9 	bl	8002c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <HAL_I2C_MspInit+0x80>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	4a08      	ldr	r2, [pc, #32]	@ (800150c <HAL_I2C_MspInit+0x80>)
 80014ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014f0:	61d3      	str	r3, [r2, #28]
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_I2C_MspInit+0x80>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	@ 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40005400 	.word	0x40005400
 800150c:	40021000 	.word	0x40021000
 8001510:	48000400 	.word	0x48000400

08001514 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a17      	ldr	r2, [pc, #92]	@ (8001590 <HAL_SPI_MspInit+0x7c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d128      	bne.n	8001588 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <HAL_SPI_MspInit+0x80>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	4a16      	ldr	r2, [pc, #88]	@ (8001594 <HAL_SPI_MspInit+0x80>)
 800153c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001540:	6193      	str	r3, [r2, #24]
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <HAL_SPI_MspInit+0x80>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <HAL_SPI_MspInit+0x80>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	4a10      	ldr	r2, [pc, #64]	@ (8001594 <HAL_SPI_MspInit+0x80>)
 8001554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001558:	6153      	str	r3, [r2, #20]
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <HAL_SPI_MspInit+0x80>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001566:	23e0      	movs	r3, #224	@ 0xe0
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001576:	2305      	movs	r3, #5
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001584:	f001 fb88 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	@ 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40013000 	.word	0x40013000
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a18      	ldr	r2, [pc, #96]	@ (8001618 <HAL_USART_MspInit+0x80>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d129      	bne.n	800160e <HAL_USART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ba:	4b18      	ldr	r3, [pc, #96]	@ (800161c <HAL_USART_MspInit+0x84>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	4a17      	ldr	r2, [pc, #92]	@ (800161c <HAL_USART_MspInit+0x84>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c4:	6193      	str	r3, [r2, #24]
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_USART_MspInit+0x84>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_USART_MspInit+0x84>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	4a11      	ldr	r2, [pc, #68]	@ (800161c <HAL_USART_MspInit+0x84>)
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015dc:	6153      	str	r3, [r2, #20]
 80015de:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <HAL_USART_MspInit+0x84>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80015ea:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015fc:	2307      	movs	r3, #7
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160a:	f001 fb45 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	@ 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40013800 	.word	0x40013800
 800161c:	40021000 	.word	0x40021000

08001620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	@ 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a18      	ldr	r2, [pc, #96]	@ (80016a0 <HAL_UART_MspInit+0x80>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d129      	bne.n	8001696 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001642:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <HAL_UART_MspInit+0x84>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a17      	ldr	r2, [pc, #92]	@ (80016a4 <HAL_UART_MspInit+0x84>)
 8001648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800164c:	61d3      	str	r3, [r2, #28]
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <HAL_UART_MspInit+0x84>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_UART_MspInit+0x84>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a11      	ldr	r2, [pc, #68]	@ (80016a4 <HAL_UART_MspInit+0x84>)
 8001660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001664:	6153      	str	r3, [r2, #20]
 8001666:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_UART_MspInit+0x84>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001672:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001684:	2307      	movs	r3, #7
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001692:	f001 fb01 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	@ 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40004400 	.word	0x40004400
 80016a4:	40021000 	.word	0x40021000

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <NMI_Handler+0x4>

080016b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <MemManage_Handler+0x4>

080016c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <UsageFault_Handler+0x4>

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e2:	f000 f951 	bl	8001988 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016e6:	f006 fd55 	bl	8008194 <xTaskGetSchedulerState>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d001      	beq.n	80016f4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80016f0:	f007 fb12 	bl	8008d18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return 1;
 80016fc:	2301      	movs	r3, #1
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_kill>:

int _kill(int pid, int sig)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001712:	f008 fc7b 	bl	800a00c <__errno>
 8001716:	4603      	mov	r3, r0
 8001718:	2216      	movs	r2, #22
 800171a:	601a      	str	r2, [r3, #0]
  return -1;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_exit>:

void _exit (int status)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ffe7 	bl	8001708 <_kill>
  while (1) {}    /* Make sure we hang here */
 800173a:	bf00      	nop
 800173c:	e7fd      	b.n	800173a <_exit+0x12>

0800173e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e00a      	b.n	8001766 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001750:	f3af 8000 	nop.w
 8001754:	4601      	mov	r1, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	60ba      	str	r2, [r7, #8]
 800175c:	b2ca      	uxtb	r2, r1
 800175e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	429a      	cmp	r2, r3
 800176c:	dbf0      	blt.n	8001750 <_read+0x12>
  }

  return len;
 800176e:	687b      	ldr	r3, [r7, #4]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	e009      	b.n	800179e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	60ba      	str	r2, [r7, #8]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dbf1      	blt.n	800178a <_write+0x12>
  }
  return len;
 80017a6:	687b      	ldr	r3, [r7, #4]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_close>:

int _close(int file)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017d8:	605a      	str	r2, [r3, #4]
  return 0;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_isatty>:

int _isatty(int file)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001820:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <_sbrk+0x5c>)
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <_sbrk+0x60>)
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800182c:	4b13      	ldr	r3, [pc, #76]	@ (800187c <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <_sbrk+0x64>)
 8001836:	4a12      	ldr	r2, [pc, #72]	@ (8001880 <_sbrk+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183a:	4b10      	ldr	r3, [pc, #64]	@ (800187c <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	d207      	bcs.n	8001858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001848:	f008 fbe0 	bl	800a00c <__errno>
 800184c:	4603      	mov	r3, r0
 800184e:	220c      	movs	r2, #12
 8001850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	e009      	b.n	800186c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185e:	4b07      	ldr	r3, [pc, #28]	@ (800187c <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	4a05      	ldr	r2, [pc, #20]	@ (800187c <_sbrk+0x64>)
 8001868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20003000 	.word	0x20003000
 8001878:	00000400 	.word	0x00000400
 800187c:	200003d8 	.word	0x200003d8
 8001880:	20002278 	.word	0x20002278

08001884 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <SystemInit+0x20>)
 800188a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <SystemInit+0x20>)
 8001890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80018ac:	f7ff ffea 	bl	8001884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b0:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80018b2:	490d      	ldr	r1, [pc, #52]	@ (80018e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <LoopForever+0xe>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018c8:	4c0a      	ldr	r4, [pc, #40]	@ (80018f4 <LoopForever+0x16>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d6:	f008 fb9f 	bl	800a018 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018da:	f7ff fae9 	bl	8000eb0 <main>

080018de <LoopForever>:

LoopForever:
    b LoopForever
 80018de:	e7fe      	b.n	80018de <LoopForever>
   ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018e0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80018ec:	0800c4c8 	.word	0x0800c4c8
  ldr r2, =_sbss
 80018f0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80018f4:	20002274 	.word	0x20002274

080018f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC1_2_IRQHandler>
	...

080018fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <HAL_Init+0x28>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <HAL_Init+0x28>)
 8001906:	f043 0310 	orr.w	r3, r3, #16
 800190a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190c:	2003      	movs	r0, #3
 800190e:	f001 f98f 	bl	8002c30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001912:	200f      	movs	r0, #15
 8001914:	f000 f808 	bl	8001928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001918:	f7ff fd54 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40022000 	.word	0x40022000

08001928 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_InitTick+0x54>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <HAL_InitTick+0x58>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f001 f999 	bl	8002c7e <HAL_SYSTICK_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00e      	b.n	8001974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d80a      	bhi.n	8001972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f001 f96f 	bl	8002c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001968:	4a06      	ldr	r2, [pc, #24]	@ (8001984 <HAL_InitTick+0x5c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000000 	.word	0x20000000
 8001980:	20000008 	.word	0x20000008
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008
 80019ac:	200003dc 	.word	0x200003dc

080019b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200003dc 	.word	0x200003dc

080019c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffde 	bl	80019b0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008

08001a10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b09a      	sub	sp, #104	@ 0x68
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e172      	b.n	8001d16 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d176      	bne.n	8001b30 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d152      	bne.n	8001af0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fcd5 	bl	8001414 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d13b      	bne.n	8001af0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 ff0b 	bl	8002894 <ADC_Disable>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d12f      	bne.n	8001af0 <HAL_ADC_Init+0xe0>
 8001a90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d12b      	bne.n	8001af0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001aa0:	f023 0302 	bic.w	r3, r3, #2
 8001aa4:	f043 0202 	orr.w	r2, r3, #2
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001aba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001aca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001acc:	4b94      	ldr	r3, [pc, #592]	@ (8001d20 <HAL_ADC_Init+0x310>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a94      	ldr	r2, [pc, #592]	@ (8001d24 <HAL_ADC_Init+0x314>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9a      	lsrs	r2, r3, #18
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae2:	e002      	b.n	8001aea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b0c:	d110      	bne.n	8001b30 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f023 0312 	bic.w	r3, r3, #18
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f040 80df 	bne.w	8001cfc <HAL_ADC_Init+0x2ec>
 8001b3e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 80da 	bne.w	8001cfc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 80d2 	bne.w	8001cfc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b60:	f043 0202 	orr.w	r2, r3, #2
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b68:	4b6f      	ldr	r3, [pc, #444]	@ (8001d28 <HAL_ADC_Init+0x318>)
 8001b6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b74:	d102      	bne.n	8001b7c <HAL_ADC_Init+0x16c>
 8001b76:	4b6d      	ldr	r3, [pc, #436]	@ (8001d2c <HAL_ADC_Init+0x31c>)
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e002      	b.n	8001b82 <HAL_ADC_Init+0x172>
 8001b7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b80:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d108      	bne.n	8001ba2 <HAL_ADC_Init+0x192>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Init+0x192>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_ADC_Init+0x194>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d11c      	bne.n	8001be2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d010      	beq.n	8001bd0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_ADC_Init+0x1ba>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_ADC_Init+0x1ba>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_ADC_Init+0x1bc>
 8001bca:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d108      	bne.n	8001be2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001bd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001be0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7e5b      	ldrb	r3, [r3, #25]
 8001be6:	035b      	lsls	r3, r3, #13
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bec:	2a01      	cmp	r2, #1
 8001bee:	d002      	beq.n	8001bf6 <HAL_ADC_Init+0x1e6>
 8001bf0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bf4:	e000      	b.n	8001bf8 <HAL_ADC_Init+0x1e8>
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d11b      	bne.n	8001c4e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7e5b      	ldrb	r3, [r3, #25]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c22:	3b01      	subs	r3, #1
 8001c24:	045a      	lsls	r2, r3, #17
 8001c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c30:	e00d      	b.n	8001c4e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001c3a:	f043 0220 	orr.w	r2, r3, #32
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d007      	beq.n	8001c66 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c62:	4313      	orrs	r3, r2
 8001c64:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d114      	bne.n	8001c9e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c82:	f023 0302 	bic.w	r3, r3, #2
 8001c86:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e1b      	ldrb	r3, [r3, #24]
 8001c8c:	039a      	lsls	r2, r3, #14
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4313      	orrs	r3, r2
 8001c98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <HAL_ADC_Init+0x320>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc0:	f023 010f 	bic.w	r1, r3, #15
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cd2:	e007      	b.n	8001ce4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 020f 	bic.w	r2, r2, #15
 8001ce2:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f023 0303 	bic.w	r3, r3, #3
 8001cf2:	f043 0201 	orr.w	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cfa:	e00a      	b.n	8001d12 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	f023 0312 	bic.w	r3, r3, #18
 8001d04:	f043 0210 	orr.w	r2, r3, #16
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3768      	adds	r7, #104	@ 0x68
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000000 	.word	0x20000000
 8001d24:	431bde83 	.word	0x431bde83
 8001d28:	50000300 	.word	0x50000300
 8001d2c:	50000100 	.word	0x50000100
 8001d30:	fff0c007 	.word	0xfff0c007

08001d34 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 809c 	bne.w	8001e88 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_Start+0x2a>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e097      	b.n	8001e8e <HAL_ADC_Start+0x15a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fd30 	bl	80027cc <ADC_Enable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 8083 	bne.w	8001e7e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d8c:	4b42      	ldr	r3, [pc, #264]	@ (8001e98 <HAL_ADC_Start+0x164>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d004      	beq.n	8001da2 <HAL_ADC_Start+0x6e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001da0:	d115      	bne.n	8001dce <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d027      	beq.n	8001e0c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dc4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001dcc:	e01e      	b.n	8001e0c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001de2:	d004      	beq.n	8001dee <HAL_ADC_Start+0xba>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a2c      	ldr	r2, [pc, #176]	@ (8001e9c <HAL_ADC_Start+0x168>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d10e      	bne.n	8001e0c <HAL_ADC_Start+0xd8>
 8001dee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e04:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e18:	d106      	bne.n	8001e28 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	f023 0206 	bic.w	r2, r3, #6
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e26:	e002      	b.n	8001e2e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	221c      	movs	r2, #28
 8001e3c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001e3e:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <HAL_ADC_Start+0x164>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d010      	beq.n	8001e6c <HAL_ADC_Start+0x138>
 8001e4a:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <HAL_ADC_Start+0x164>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d00a      	beq.n	8001e6c <HAL_ADC_Start+0x138>
 8001e56:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <HAL_ADC_Start+0x164>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	2b09      	cmp	r3, #9
 8001e60:	d004      	beq.n	8001e6c <HAL_ADC_Start+0x138>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e6a:	d10f      	bne.n	8001e8c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0204 	orr.w	r2, r2, #4
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	e006      	b.n	8001e8c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001e86:	e001      	b.n	8001e8c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	50000300 	.word	0x50000300
 8001e9c:	50000100 	.word	0x50000100

08001ea0 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_Stop+0x1a>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e023      	b.n	8001f02 <HAL_ADC_Stop+0x62>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001ec2:	216c      	movs	r1, #108	@ 0x6c
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fd4b 	bl	8002960 <ADC_ConversionStop>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d111      	bne.n	8001ef8 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fcdd 	bl	8002894 <ADC_Disable>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	f043 0201 	orr.w	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d102      	bne.n	8001f28 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001f22:	2308      	movs	r3, #8
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e02e      	b.n	8001f86 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f28:	4b5e      	ldr	r3, [pc, #376]	@ (80020a4 <HAL_ADC_PollForConversion+0x198>)
 8001f2a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d112      	bne.n	8001f5e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d11d      	bne.n	8001f82 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f043 0220 	orr.w	r2, r3, #32
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e09d      	b.n	800209a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f043 0220 	orr.w	r2, r3, #32
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e08b      	b.n	800209a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001f82:	230c      	movs	r3, #12
 8001f84:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f86:	4b47      	ldr	r3, [pc, #284]	@ (80020a4 <HAL_ADC_PollForConversion+0x198>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_ADC_PollForConversion+0x90>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f9a:	d104      	bne.n	8001fa6 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	e003      	b.n	8001fae <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001fa6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001fae:	f7ff fcff 	bl	80019b0 <HAL_GetTick>
 8001fb2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fb4:	e021      	b.n	8001ffa <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d01d      	beq.n	8001ffa <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <HAL_ADC_PollForConversion+0xc8>
 8001fc4:	f7ff fcf4 	bl	80019b0 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d212      	bcs.n	8001ffa <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10b      	bne.n	8001ffa <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f043 0204 	orr.w	r2, r3, #4
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e04f      	b.n	800209a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0d6      	beq.n	8001fb6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800201e:	2b00      	cmp	r3, #0
 8002020:	d131      	bne.n	8002086 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002028:	2b00      	cmp	r3, #0
 800202a:	d12c      	bne.n	8002086 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b08      	cmp	r3, #8
 8002038:	d125      	bne.n	8002086 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d112      	bne.n	800206e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d112      	bne.n	8002086 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	@ 0x40
 800206c:	e00b      	b.n	8002086 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f043 0220 	orr.w	r2, r3, #32
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d103      	bne.n	8002098 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	50000300 	.word	0x50000300

080020a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b09b      	sub	sp, #108	@ 0x6c
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x22>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e2a1      	b.n	800262a <HAL_ADC_ConfigChannel+0x566>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 8285 	bne.w	8002608 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b04      	cmp	r3, #4
 8002104:	d81c      	bhi.n	8002140 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	461a      	mov	r2, r3
 800211a:	231f      	movs	r3, #31
 800211c:	4093      	lsls	r3, r2
 800211e:	43db      	mvns	r3, r3
 8002120:	4019      	ands	r1, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa00 f203 	lsl.w	r2, r0, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	631a      	str	r2, [r3, #48]	@ 0x30
 800213e:	e063      	b.n	8002208 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b09      	cmp	r3, #9
 8002146:	d81e      	bhi.n	8002186 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	3b1e      	subs	r3, #30
 800215c:	221f      	movs	r2, #31
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	4019      	ands	r1, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	3b1e      	subs	r3, #30
 8002178:	fa00 f203 	lsl.w	r2, r0, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	635a      	str	r2, [r3, #52]	@ 0x34
 8002184:	e040      	b.n	8002208 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b0e      	cmp	r3, #14
 800218c:	d81e      	bhi.n	80021cc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	3b3c      	subs	r3, #60	@ 0x3c
 80021a2:	221f      	movs	r2, #31
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4019      	ands	r1, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4413      	add	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	3b3c      	subs	r3, #60	@ 0x3c
 80021be:	fa00 f203 	lsl.w	r2, r0, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80021ca:	e01d      	b.n	8002208 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	3b5a      	subs	r3, #90	@ 0x5a
 80021e0:	221f      	movs	r2, #31
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	4019      	ands	r1, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	3b5a      	subs	r3, #90	@ 0x5a
 80021fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	f040 80e5 	bne.w	80023e2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b09      	cmp	r3, #9
 800221e:	d91c      	bls.n	800225a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6999      	ldr	r1, [r3, #24]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	3b1e      	subs	r3, #30
 8002232:	2207      	movs	r2, #7
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	4019      	ands	r1, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6898      	ldr	r0, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	3b1e      	subs	r3, #30
 800224c:	fa00 f203 	lsl.w	r2, r0, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	619a      	str	r2, [r3, #24]
 8002258:	e019      	b.n	800228e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6959      	ldr	r1, [r3, #20]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	2207      	movs	r2, #7
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	4019      	ands	r1, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6898      	ldr	r0, [r3, #8]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	fa00 f203 	lsl.w	r2, r0, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d84f      	bhi.n	8002350 <HAL_ADC_ConfigChannel+0x28c>
 80022b0:	a201      	add	r2, pc, #4	@ (adr r2, 80022b8 <HAL_ADC_ConfigChannel+0x1f4>)
 80022b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b6:	bf00      	nop
 80022b8:	080022c9 	.word	0x080022c9
 80022bc:	080022eb 	.word	0x080022eb
 80022c0:	0800230d 	.word	0x0800230d
 80022c4:	0800232f 	.word	0x0800232f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022ce:	4b9c      	ldr	r3, [pc, #624]	@ (8002540 <HAL_ADC_ConfigChannel+0x47c>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	0691      	lsls	r1, r2, #26
 80022d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022da:	430a      	orrs	r2, r1
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022e6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022e8:	e07b      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022f0:	4b93      	ldr	r3, [pc, #588]	@ (8002540 <HAL_ADC_ConfigChannel+0x47c>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	0691      	lsls	r1, r2, #26
 80022fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022fc:	430a      	orrs	r2, r1
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002308:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800230a:	e06a      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002312:	4b8b      	ldr	r3, [pc, #556]	@ (8002540 <HAL_ADC_ConfigChannel+0x47c>)
 8002314:	4013      	ands	r3, r2
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	0691      	lsls	r1, r2, #26
 800231c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800231e:	430a      	orrs	r2, r1
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800232a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800232c:	e059      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002334:	4b82      	ldr	r3, [pc, #520]	@ (8002540 <HAL_ADC_ConfigChannel+0x47c>)
 8002336:	4013      	ands	r3, r2
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	0691      	lsls	r1, r2, #26
 800233e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002340:	430a      	orrs	r2, r1
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800234c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800234e:	e048      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002356:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	069b      	lsls	r3, r3, #26
 8002360:	429a      	cmp	r2, r3
 8002362:	d107      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002372:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800237a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	069b      	lsls	r3, r3, #26
 8002384:	429a      	cmp	r2, r3
 8002386:	d107      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002396:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800239e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	069b      	lsls	r3, r3, #26
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d107      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023ba:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	069b      	lsls	r3, r3, #26
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d107      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023de:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80023e0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d108      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x33e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x33e>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_ADC_ConfigChannel+0x340>
 8002402:	2300      	movs	r3, #0
 8002404:	2b00      	cmp	r3, #0
 8002406:	f040 810a 	bne.w	800261e <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d00f      	beq.n	8002432 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2201      	movs	r2, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43da      	mvns	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	400a      	ands	r2, r1
 800242c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002430:	e049      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2201      	movs	r2, #1
 8002440:	409a      	lsls	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b09      	cmp	r3, #9
 8002452:	d91c      	bls.n	800248e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6999      	ldr	r1, [r3, #24]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	3b1b      	subs	r3, #27
 8002466:	2207      	movs	r2, #7
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	4019      	ands	r1, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6898      	ldr	r0, [r3, #8]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	3b1b      	subs	r3, #27
 8002480:	fa00 f203 	lsl.w	r2, r0, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	619a      	str	r2, [r3, #24]
 800248c:	e01b      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6959      	ldr	r1, [r3, #20]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	2207      	movs	r2, #7
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	4019      	ands	r1, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6898      	ldr	r0, [r3, #8]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	fa00 f203 	lsl.w	r2, r0, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002544 <HAL_ADC_ConfigChannel+0x480>)
 80024c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d105      	bne.n	80024de <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d015      	beq.n	800250a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024e2:	2b11      	cmp	r3, #17
 80024e4:	d105      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024f6:	2b12      	cmp	r3, #18
 80024f8:	f040 8091 	bne.w	800261e <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80024fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002504:	2b00      	cmp	r3, #0
 8002506:	f040 808a 	bne.w	800261e <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002512:	d102      	bne.n	800251a <HAL_ADC_ConfigChannel+0x456>
 8002514:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <HAL_ADC_ConfigChannel+0x484>)
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e002      	b.n	8002520 <HAL_ADC_ConfigChannel+0x45c>
 800251a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800251e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b01      	cmp	r3, #1
 800252c:	d10e      	bne.n	800254c <HAL_ADC_ConfigChannel+0x488>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_ADC_ConfigChannel+0x488>
 800253c:	2301      	movs	r3, #1
 800253e:	e006      	b.n	800254e <HAL_ADC_ConfigChannel+0x48a>
 8002540:	83fff000 	.word	0x83fff000
 8002544:	50000300 	.word	0x50000300
 8002548:	50000100 	.word	0x50000100
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d150      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002552:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b01      	cmp	r3, #1
 8002562:	d107      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x4b0>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x4b0>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_ADC_ConfigChannel+0x4b2>
 8002574:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002576:	2b00      	cmp	r3, #0
 8002578:	d13c      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b10      	cmp	r3, #16
 8002580:	d11d      	bne.n	80025be <HAL_ADC_ConfigChannel+0x4fa>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800258a:	d118      	bne.n	80025be <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800258c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002594:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002596:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002598:	4b27      	ldr	r3, [pc, #156]	@ (8002638 <HAL_ADC_ConfigChannel+0x574>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a27      	ldr	r2, [pc, #156]	@ (800263c <HAL_ADC_ConfigChannel+0x578>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0c9a      	lsrs	r2, r3, #18
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025ae:	e002      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f9      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025bc:	e02e      	b.n	800261c <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b11      	cmp	r3, #17
 80025c4:	d10b      	bne.n	80025de <HAL_ADC_ConfigChannel+0x51a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025ce:	d106      	bne.n	80025de <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80025d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80025d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025da:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025dc:	e01e      	b.n	800261c <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b12      	cmp	r3, #18
 80025e4:	d11a      	bne.n	800261c <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80025e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80025ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025f0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025f2:	e013      	b.n	800261c <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002606:	e00a      	b.n	800261e <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	f043 0220 	orr.w	r2, r3, #32
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800261a:	e000      	b.n	800261e <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800261c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002626:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800262a:	4618      	mov	r0, r3
 800262c:	376c      	adds	r7, #108	@ 0x6c
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000000 	.word	0x20000000
 800263c:	431bde83 	.word	0x431bde83

08002640 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002640:	b480      	push	{r7}
 8002642:	b099      	sub	sp, #100	@ 0x64
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002658:	d102      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800265a:	4b5a      	ldr	r3, [pc, #360]	@ (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	e002      	b.n	8002666 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002660:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002664:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0a2      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800267a:	2302      	movs	r3, #2
 800267c:	e09b      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d17f      	bne.n	8002794 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d179      	bne.n	8002794 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a0:	4b49      	ldr	r3, [pc, #292]	@ (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80026a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d040      	beq.n	800272e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026be:	035b      	lsls	r3, r3, #13
 80026c0:	430b      	orrs	r3, r1
 80026c2:	431a      	orrs	r2, r3
 80026c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026c6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d108      	bne.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d15c      	bne.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800270a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800270c:	2b00      	cmp	r3, #0
 800270e:	d14b      	bne.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002718:	f023 030f 	bic.w	r3, r3, #15
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	6811      	ldr	r1, [r2, #0]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	6892      	ldr	r2, [r2, #8]
 8002724:	430a      	orrs	r2, r1
 8002726:	431a      	orrs	r2, r3
 8002728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800272a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800272c:	e03c      	b.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800272e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002736:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002738:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d108      	bne.n	800275a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800275a:	2300      	movs	r3, #0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d123      	bne.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d107      	bne.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800277c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800277e:	2b00      	cmp	r3, #0
 8002780:	d112      	bne.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002782:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800278a:	f023 030f 	bic.w	r3, r3, #15
 800278e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002790:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002792:	e009      	b.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	f043 0220 	orr.w	r2, r3, #32
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80027a6:	e000      	b.n	80027aa <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027a8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80027b6:	4618      	mov	r0, r3
 80027b8:	3764      	adds	r7, #100	@ 0x64
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	50000100 	.word	0x50000100
 80027c8:	50000300 	.word	0x50000300

080027cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d108      	bne.n	80027f8 <ADC_Enable+0x2c>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <ADC_Enable+0x2c>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <ADC_Enable+0x2e>
 80027f8:	2300      	movs	r3, #0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d143      	bne.n	8002886 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	4b22      	ldr	r3, [pc, #136]	@ (8002890 <ADC_Enable+0xc4>)
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00d      	beq.n	8002828 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	f043 0210 	orr.w	r2, r3, #16
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e02f      	b.n	8002888 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002838:	f7ff f8ba 	bl	80019b0 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800283e:	e01b      	b.n	8002878 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002840:	f7ff f8b6 	bl	80019b0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d914      	bls.n	8002878 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d00d      	beq.n	8002878 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	f043 0210 	orr.w	r2, r3, #16
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e007      	b.n	8002888 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b01      	cmp	r3, #1
 8002884:	d1dc      	bne.n	8002840 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	8000003f 	.word	0x8000003f

08002894 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d108      	bne.n	80028c0 <ADC_Disable+0x2c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <ADC_Disable+0x2c>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <ADC_Disable+0x2e>
 80028c0:	2300      	movs	r3, #0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d047      	beq.n	8002956 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030d 	and.w	r3, r3, #13
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d10f      	bne.n	80028f4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0202 	orr.w	r2, r2, #2
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2203      	movs	r2, #3
 80028ea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80028ec:	f7ff f860 	bl	80019b0 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028f2:	e029      	b.n	8002948 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	f043 0210 	orr.w	r2, r3, #16
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002904:	f043 0201 	orr.w	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e023      	b.n	8002958 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002910:	f7ff f84e 	bl	80019b0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d914      	bls.n	8002948 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10d      	bne.n	8002948 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f043 0210 	orr.w	r2, r3, #16
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e007      	b.n	8002958 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d0dc      	beq.n	8002910 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 809b 	beq.w	8002abc <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002990:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002994:	d12a      	bne.n	80029ec <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800299a:	2b01      	cmp	r3, #1
 800299c:	d126      	bne.n	80029ec <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d122      	bne.n	80029ec <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80029a6:	230c      	movs	r3, #12
 80029a8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80029aa:	e014      	b.n	80029d6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4a46      	ldr	r2, [pc, #280]	@ (8002ac8 <ADC_ConversionStop+0x168>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d90d      	bls.n	80029d0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	f043 0210 	orr.w	r2, r3, #16
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	f043 0201 	orr.w	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e076      	b.n	8002abe <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	3301      	adds	r3, #1
 80029d4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e0:	2b40      	cmp	r3, #64	@ 0x40
 80029e2:	d1e3      	bne.n	80029ac <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2240      	movs	r2, #64	@ 0x40
 80029ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b60      	cmp	r3, #96	@ 0x60
 80029f0:	d015      	beq.n	8002a1e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d10e      	bne.n	8002a1e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d107      	bne.n	8002a1e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0210 	orr.w	r2, r2, #16
 8002a1c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	d015      	beq.n	8002a50 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d10e      	bne.n	8002a50 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d107      	bne.n	8002a50 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0220 	orr.w	r2, r2, #32
 8002a4e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b60      	cmp	r3, #96	@ 0x60
 8002a54:	d005      	beq.n	8002a62 <ADC_ConversionStop+0x102>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b6c      	cmp	r3, #108	@ 0x6c
 8002a5a:	d105      	bne.n	8002a68 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a5c:	230c      	movs	r3, #12
 8002a5e:	617b      	str	r3, [r7, #20]
        break;
 8002a60:	e005      	b.n	8002a6e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a62:	2308      	movs	r3, #8
 8002a64:	617b      	str	r3, [r7, #20]
        break;
 8002a66:	e002      	b.n	8002a6e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a68:	2304      	movs	r3, #4
 8002a6a:	617b      	str	r3, [r7, #20]
        break;
 8002a6c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a6e:	f7fe ff9f 	bl	80019b0 <HAL_GetTick>
 8002a72:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002a74:	e01b      	b.n	8002aae <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a76:	f7fe ff9b 	bl	80019b0 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b0b      	cmp	r3, #11
 8002a82:	d914      	bls.n	8002aae <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f043 0210 	orr.w	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e007      	b.n	8002abe <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1dc      	bne.n	8002a76 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	000993ff 	.word	0x000993ff

08002acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afe:	4a04      	ldr	r2, [pc, #16]	@ (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	60d3      	str	r3, [r2, #12]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b18:	4b04      	ldr	r3, [pc, #16]	@ (8002b2c <__NVIC_GetPriorityGrouping+0x18>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	f003 0307 	and.w	r3, r3, #7
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	db0a      	blt.n	8002b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	490c      	ldr	r1, [pc, #48]	@ (8002b7c <__NVIC_SetPriority+0x4c>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	440b      	add	r3, r1
 8002b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b58:	e00a      	b.n	8002b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4908      	ldr	r1, [pc, #32]	@ (8002b80 <__NVIC_SetPriority+0x50>)
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	3b04      	subs	r3, #4
 8002b68:	0112      	lsls	r2, r2, #4
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	761a      	strb	r2, [r3, #24]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000e100 	.word	0xe000e100
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	@ 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f1c3 0307 	rsb	r3, r3, #7
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	bf28      	it	cs
 8002ba2:	2304      	movcs	r3, #4
 8002ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d902      	bls.n	8002bb4 <NVIC_EncodePriority+0x30>
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3b03      	subs	r3, #3
 8002bb2:	e000      	b.n	8002bb6 <NVIC_EncodePriority+0x32>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	43d9      	mvns	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	4313      	orrs	r3, r2
         );
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3724      	adds	r7, #36	@ 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bfc:	d301      	bcc.n	8002c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e00f      	b.n	8002c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c02:	4a0a      	ldr	r2, [pc, #40]	@ (8002c2c <SysTick_Config+0x40>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0a:	210f      	movs	r1, #15
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c10:	f7ff ff8e 	bl	8002b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c14:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <SysTick_Config+0x40>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1a:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <SysTick_Config+0x40>)
 8002c1c:	2207      	movs	r2, #7
 8002c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	e000e010 	.word	0xe000e010

08002c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ff47 	bl	8002acc <__NVIC_SetPriorityGrouping>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c58:	f7ff ff5c 	bl	8002b14 <__NVIC_GetPriorityGrouping>
 8002c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	6978      	ldr	r0, [r7, #20]
 8002c64:	f7ff ff8e 	bl	8002b84 <NVIC_EncodePriority>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff5d 	bl	8002b30 <__NVIC_SetPriority>
}
 8002c76:	bf00      	nop
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ffb0 	bl	8002bec <SysTick_Config>
 8002c8c:	4603      	mov	r3, r0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca6:	e14e      	b.n	8002f46 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	2101      	movs	r1, #1
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8140 	beq.w	8002f40 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d005      	beq.n	8002cd8 <HAL_GPIO_Init+0x40>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d130      	bne.n	8002d3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d0e:	2201      	movs	r2, #1
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	f003 0201 	and.w	r2, r3, #1
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d017      	beq.n	8002d76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	2203      	movs	r2, #3
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d123      	bne.n	8002dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	08da      	lsrs	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3208      	adds	r2, #8
 8002d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	220f      	movs	r2, #15
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	08da      	lsrs	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3208      	adds	r2, #8
 8002dc4:	6939      	ldr	r1, [r7, #16]
 8002dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0203 	and.w	r2, r3, #3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 809a 	beq.w	8002f40 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0c:	4b55      	ldr	r3, [pc, #340]	@ (8002f64 <HAL_GPIO_Init+0x2cc>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	4a54      	ldr	r2, [pc, #336]	@ (8002f64 <HAL_GPIO_Init+0x2cc>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6193      	str	r3, [r2, #24]
 8002e18:	4b52      	ldr	r3, [pc, #328]	@ (8002f64 <HAL_GPIO_Init+0x2cc>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e24:	4a50      	ldr	r2, [pc, #320]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	220f      	movs	r2, #15
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e4e:	d013      	beq.n	8002e78 <HAL_GPIO_Init+0x1e0>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a46      	ldr	r2, [pc, #280]	@ (8002f6c <HAL_GPIO_Init+0x2d4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00d      	beq.n	8002e74 <HAL_GPIO_Init+0x1dc>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a45      	ldr	r2, [pc, #276]	@ (8002f70 <HAL_GPIO_Init+0x2d8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d007      	beq.n	8002e70 <HAL_GPIO_Init+0x1d8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a44      	ldr	r2, [pc, #272]	@ (8002f74 <HAL_GPIO_Init+0x2dc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_GPIO_Init+0x1d4>
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e006      	b.n	8002e7a <HAL_GPIO_Init+0x1e2>
 8002e6c:	2305      	movs	r3, #5
 8002e6e:	e004      	b.n	8002e7a <HAL_GPIO_Init+0x1e2>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e002      	b.n	8002e7a <HAL_GPIO_Init+0x1e2>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <HAL_GPIO_Init+0x1e2>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	f002 0203 	and.w	r2, r2, #3
 8002e80:	0092      	lsls	r2, r2, #2
 8002e82:	4093      	lsls	r3, r2
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e8a:	4937      	ldr	r1, [pc, #220]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	3302      	adds	r3, #2
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e98:	4b37      	ldr	r3, [pc, #220]	@ (8002f78 <HAL_GPIO_Init+0x2e0>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ebc:	4a2e      	ldr	r2, [pc, #184]	@ (8002f78 <HAL_GPIO_Init+0x2e0>)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f78 <HAL_GPIO_Init+0x2e0>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ee6:	4a24      	ldr	r2, [pc, #144]	@ (8002f78 <HAL_GPIO_Init+0x2e0>)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eec:	4b22      	ldr	r3, [pc, #136]	@ (8002f78 <HAL_GPIO_Init+0x2e0>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f10:	4a19      	ldr	r2, [pc, #100]	@ (8002f78 <HAL_GPIO_Init+0x2e0>)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f16:	4b18      	ldr	r3, [pc, #96]	@ (8002f78 <HAL_GPIO_Init+0x2e0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002f78 <HAL_GPIO_Init+0x2e0>)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3301      	adds	r3, #1
 8002f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f47f aea9 	bne.w	8002ca8 <HAL_GPIO_Init+0x10>
  }
}
 8002f56:	bf00      	nop
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	48000400 	.word	0x48000400
 8002f70:	48000800 	.word	0x48000800
 8002f74:	48000c00 	.word	0x48000c00
 8002f78:	40010400 	.word	0x40010400

08002f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f8c:	787b      	ldrb	r3, [r7, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f98:	e002      	b.n	8002fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e081      	b.n	80030c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe fa5a 	bl	800148c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	@ 0x24
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ffc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800300c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d107      	bne.n	8003026 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	e006      	b.n	8003034 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003032:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d104      	bne.n	8003046 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003044:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003058:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003068:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69d9      	ldr	r1, [r3, #28]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1a      	ldr	r2, [r3, #32]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	461a      	mov	r2, r3
 80030d8:	460b      	mov	r3, r1
 80030da:	817b      	strh	r3, [r7, #10]
 80030dc:	4613      	mov	r3, r2
 80030de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	f040 80db 	bne.w	80032a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_I2C_Master_Receive+0x30>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e0d4      	b.n	80032a6 <HAL_I2C_Master_Receive+0x1da>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003104:	f7fe fc54 	bl	80019b0 <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2319      	movs	r3, #25
 8003110:	2201      	movs	r2, #1
 8003112:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f8f2 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0bf      	b.n	80032a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2222      	movs	r2, #34	@ 0x22
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2210      	movs	r2, #16
 8003132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	893a      	ldrh	r2, [r7, #8]
 8003146:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	2bff      	cmp	r3, #255	@ 0xff
 8003156:	d90e      	bls.n	8003176 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	22ff      	movs	r2, #255	@ 0xff
 800315c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003162:	b2da      	uxtb	r2, r3
 8003164:	8979      	ldrh	r1, [r7, #10]
 8003166:	4b52      	ldr	r3, [pc, #328]	@ (80032b0 <HAL_I2C_Master_Receive+0x1e4>)
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 faba 	bl	80036e8 <I2C_TransferConfig>
 8003174:	e06d      	b.n	8003252 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003184:	b2da      	uxtb	r2, r3
 8003186:	8979      	ldrh	r1, [r7, #10]
 8003188:	4b49      	ldr	r3, [pc, #292]	@ (80032b0 <HAL_I2C_Master_Receive+0x1e4>)
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 faa9 	bl	80036e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003196:	e05c      	b.n	8003252 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	6a39      	ldr	r1, [r7, #32]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f941 	bl	8003424 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e07c      	b.n	80032a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d034      	beq.n	8003252 <HAL_I2C_Master_Receive+0x186>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d130      	bne.n	8003252 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	2200      	movs	r2, #0
 80031f8:	2180      	movs	r1, #128	@ 0x80
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f880 	bl	8003300 <I2C_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e04d      	b.n	80032a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	2bff      	cmp	r3, #255	@ 0xff
 8003212:	d90e      	bls.n	8003232 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	22ff      	movs	r2, #255	@ 0xff
 8003218:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321e:	b2da      	uxtb	r2, r3
 8003220:	8979      	ldrh	r1, [r7, #10]
 8003222:	2300      	movs	r3, #0
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fa5c 	bl	80036e8 <I2C_TransferConfig>
 8003230:	e00f      	b.n	8003252 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003240:	b2da      	uxtb	r2, r3
 8003242:	8979      	ldrh	r1, [r7, #10]
 8003244:	2300      	movs	r3, #0
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fa4b 	bl	80036e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d19d      	bne.n	8003198 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	6a39      	ldr	r1, [r7, #32]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f89c 	bl	800339e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e01a      	b.n	80032a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2220      	movs	r2, #32
 8003276:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b0c      	ldr	r3, [pc, #48]	@ (80032b4 <HAL_I2C_Master_Receive+0x1e8>)
 8003284:	400b      	ands	r3, r1
 8003286:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	e000      	b.n	80032a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80032a4:	2302      	movs	r3, #2
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	80002400 	.word	0x80002400
 80032b4:	fe00e800 	.word	0xfe00e800

080032b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d103      	bne.n	80032d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2200      	movs	r2, #0
 80032d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d007      	beq.n	80032f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	619a      	str	r2, [r3, #24]
  }
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003310:	e031      	b.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d02d      	beq.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331a:	f7fe fb49 	bl	80019b0 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d302      	bcc.n	8003330 <I2C_WaitOnFlagUntilTimeout+0x30>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d122      	bne.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4013      	ands	r3, r2
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	429a      	cmp	r2, r3
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	429a      	cmp	r2, r3
 800334c:	d113      	bne.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003352:	f043 0220 	orr.w	r2, r3, #32
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e00f      	b.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4013      	ands	r3, r2
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	429a      	cmp	r2, r3
 8003392:	d0be      	beq.n	8003312 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033aa:	e02f      	b.n	800340c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f8b9 	bl	8003528 <I2C_IsErrorOccurred>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e02d      	b.n	800341c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c0:	f7fe faf6 	bl	80019b0 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d302      	bcc.n	80033d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d11a      	bne.n	800340c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d013      	beq.n	800340c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e007      	b.n	800341c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b20      	cmp	r3, #32
 8003418:	d1c8      	bne.n	80033ac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003430:	e06b      	b.n	800350a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f876 	bl	8003528 <I2C_IsErrorOccurred>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e069      	b.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b20      	cmp	r3, #32
 8003452:	d138      	bne.n	80034c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b04      	cmp	r3, #4
 8003460:	d105      	bne.n	800346e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e055      	b.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b10      	cmp	r3, #16
 800347a:	d107      	bne.n	800348c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2210      	movs	r2, #16
 8003482:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2204      	movs	r2, #4
 8003488:	645a      	str	r2, [r3, #68]	@ 0x44
 800348a:	e002      	b.n	8003492 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2220      	movs	r2, #32
 8003498:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003524 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80034a6:	400b      	ands	r3, r1
 80034a8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e029      	b.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c6:	f7fe fa73 	bl	80019b0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d302      	bcc.n	80034dc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d116      	bne.n	800350a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00f      	beq.n	800350a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	f043 0220 	orr.w	r2, r3, #32
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e007      	b.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b04      	cmp	r3, #4
 8003516:	d18c      	bne.n	8003432 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	fe00e800 	.word	0xfe00e800

08003528 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	@ 0x28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b00      	cmp	r3, #0
 8003552:	d068      	beq.n	8003626 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2210      	movs	r2, #16
 800355a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800355c:	e049      	b.n	80035f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d045      	beq.n	80035f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7fe fa23 	bl	80019b0 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <I2C_IsErrorOccurred+0x54>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d13a      	bne.n	80035f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003586:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800358e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800359a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800359e:	d121      	bne.n	80035e4 <I2C_IsErrorOccurred+0xbc>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035a6:	d01d      	beq.n	80035e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d01a      	beq.n	80035e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035be:	f7fe f9f7 	bl	80019b0 <HAL_GetTick>
 80035c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035c4:	e00e      	b.n	80035e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035c6:	f7fe f9f3 	bl	80019b0 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b19      	cmp	r3, #25
 80035d2:	d907      	bls.n	80035e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	f043 0320 	orr.w	r3, r3, #32
 80035da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80035e2:	e006      	b.n	80035f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d1e9      	bne.n	80035c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d003      	beq.n	8003608 <I2C_IsErrorOccurred+0xe0>
 8003600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0aa      	beq.n	800355e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2220      	movs	r2, #32
 8003616:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f043 0304 	orr.w	r3, r3, #4
 800361e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003648:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f043 0308 	orr.w	r3, r3, #8
 8003660:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800366a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f043 0302 	orr.w	r3, r3, #2
 8003682:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800368c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01c      	beq.n	80036d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7ff fe0b 	bl	80032b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4b0d      	ldr	r3, [pc, #52]	@ (80036e4 <I2C_IsErrorOccurred+0x1bc>)
 80036ae:	400b      	ands	r3, r1
 80036b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80036d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3728      	adds	r7, #40	@ 0x28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	fe00e800 	.word	0xfe00e800

080036e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	817b      	strh	r3, [r7, #10]
 80036f6:	4613      	mov	r3, r2
 80036f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003700:	7a7b      	ldrb	r3, [r7, #9]
 8003702:	041b      	lsls	r3, r3, #16
 8003704:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003708:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	4313      	orrs	r3, r2
 8003712:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003716:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	0d5b      	lsrs	r3, r3, #21
 8003722:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003726:	4b08      	ldr	r3, [pc, #32]	@ (8003748 <I2C_TransferConfig+0x60>)
 8003728:	430b      	orrs	r3, r1
 800372a:	43db      	mvns	r3, r3
 800372c:	ea02 0103 	and.w	r1, r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	03ff63ff 	.word	0x03ff63ff

0800374c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b20      	cmp	r3, #32
 8003760:	d138      	bne.n	80037d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800376c:	2302      	movs	r3, #2
 800376e:	e032      	b.n	80037d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	@ 0x24
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800379e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
  }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d139      	bne.n	800386c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003802:	2302      	movs	r3, #2
 8003804:	e033      	b.n	800386e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2224      	movs	r2, #36	@ 0x24
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003834:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e000      	b.n	800386e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003882:	af00      	add	r7, sp, #0
 8003884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003888:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800388c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800388e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003892:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f001 b823 	b.w	80048e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 817d 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038b8:	4bbc      	ldr	r3, [pc, #752]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d00c      	beq.n	80038de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038c4:	4bb9      	ldr	r3, [pc, #740]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d15c      	bne.n	800398a <HAL_RCC_OscConfig+0x10e>
 80038d0:	4bb6      	ldr	r3, [pc, #728]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038dc:	d155      	bne.n	800398a <HAL_RCC_OscConfig+0x10e>
 80038de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038e2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d102      	bne.n	8003910 <HAL_RCC_OscConfig+0x94>
 800390a:	4ba8      	ldr	r3, [pc, #672]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	e015      	b.n	800393c <HAL_RCC_OscConfig+0xc0>
 8003910:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003914:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003924:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003928:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800392c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003938:	4b9c      	ldr	r3, [pc, #624]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003940:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003944:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003948:	fa92 f2a2 	rbit	r2, r2
 800394c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003950:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003954:	fab2 f282 	clz	r2, r2
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	f042 0220 	orr.w	r2, r2, #32
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	f002 021f 	and.w	r2, r2, #31
 8003964:	2101      	movs	r1, #1
 8003966:	fa01 f202 	lsl.w	r2, r1, r2
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 811f 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x334>
 8003972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003976:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f040 8116 	bne.w	8003bb0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f000 bfaf 	b.w	80048e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800399a:	d106      	bne.n	80039aa <HAL_RCC_OscConfig+0x12e>
 800399c:	4b83      	ldr	r3, [pc, #524]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a82      	ldr	r2, [pc, #520]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 80039a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	e036      	b.n	8003a18 <HAL_RCC_OscConfig+0x19c>
 80039aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x158>
 80039ba:	4b7c      	ldr	r3, [pc, #496]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7b      	ldr	r2, [pc, #492]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 80039c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b79      	ldr	r3, [pc, #484]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a78      	ldr	r2, [pc, #480]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 80039cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e021      	b.n	8003a18 <HAL_RCC_OscConfig+0x19c>
 80039d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x184>
 80039e6:	4b71      	ldr	r3, [pc, #452]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a70      	ldr	r2, [pc, #448]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b6e      	ldr	r3, [pc, #440]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6d      	ldr	r2, [pc, #436]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0x19c>
 8003a00:	4b6a      	ldr	r3, [pc, #424]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a69      	ldr	r2, [pc, #420]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b67      	ldr	r3, [pc, #412]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a66      	ldr	r2, [pc, #408]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a16:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a18:	4b64      	ldr	r3, [pc, #400]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	f023 020f 	bic.w	r2, r3, #15
 8003a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	495f      	ldr	r1, [pc, #380]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d059      	beq.n	8003af6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a42:	f7fd ffb5 	bl	80019b0 <HAL_GetTick>
 8003a46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4a:	e00a      	b.n	8003a62 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7fd ffb0 	bl	80019b0 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b64      	cmp	r3, #100	@ 0x64
 8003a5a:	d902      	bls.n	8003a62 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	f000 bf43 	b.w	80048e8 <HAL_RCC_OscConfig+0x106c>
 8003a62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a66:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003a76:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	fab3 f383 	clz	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d102      	bne.n	8003a94 <HAL_RCC_OscConfig+0x218>
 8003a8e:	4b47      	ldr	r3, [pc, #284]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	e015      	b.n	8003ac0 <HAL_RCC_OscConfig+0x244>
 8003a94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a98:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003aa0:	fa93 f3a3 	rbit	r3, r3
 8003aa4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003aa8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003aac:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003ab0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003abc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ac4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003ac8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003acc:	fa92 f2a2 	rbit	r2, r2
 8003ad0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003ad4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003ad8:	fab2 f282 	clz	r2, r2
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	f042 0220 	orr.w	r2, r2, #32
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	f002 021f 	and.w	r2, r2, #31
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f202 	lsl.w	r2, r1, r2
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ab      	beq.n	8003a4c <HAL_RCC_OscConfig+0x1d0>
 8003af4:	e05d      	b.n	8003bb2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fd ff5b 	bl	80019b0 <HAL_GetTick>
 8003afa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fd ff56 	bl	80019b0 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b64      	cmp	r3, #100	@ 0x64
 8003b0e:	d902      	bls.n	8003b16 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	f000 bee9 	b.w	80048e8 <HAL_RCC_OscConfig+0x106c>
 8003b16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b1a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003b2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d102      	bne.n	8003b48 <HAL_RCC_OscConfig+0x2cc>
 8003b42:	4b1a      	ldr	r3, [pc, #104]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	e015      	b.n	8003b74 <HAL_RCC_OscConfig+0x2f8>
 8003b48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b4c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003b54:	fa93 f3a3 	rbit	r3, r3
 8003b58:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003b5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b60:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003b64:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003b70:	4b0e      	ldr	r3, [pc, #56]	@ (8003bac <HAL_RCC_OscConfig+0x330>)
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b78:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003b7c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003b80:	fa92 f2a2 	rbit	r2, r2
 8003b84:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003b88:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003b8c:	fab2 f282 	clz	r2, r2
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	f042 0220 	orr.w	r2, r2, #32
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f002 021f 	and.w	r2, r2, #31
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ab      	bne.n	8003b00 <HAL_RCC_OscConfig+0x284>
 8003ba8:	e003      	b.n	8003bb2 <HAL_RCC_OscConfig+0x336>
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 817d 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bc8:	4ba6      	ldr	r3, [pc, #664]	@ (8003e64 <HAL_RCC_OscConfig+0x5e8>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00b      	beq.n	8003bec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bd4:	4ba3      	ldr	r3, [pc, #652]	@ (8003e64 <HAL_RCC_OscConfig+0x5e8>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d172      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x44a>
 8003be0:	4ba0      	ldr	r3, [pc, #640]	@ (8003e64 <HAL_RCC_OscConfig+0x5e8>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d16c      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x44a>
 8003bec:	2302      	movs	r3, #2
 8003bee:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003bfe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d102      	bne.n	8003c1c <HAL_RCC_OscConfig+0x3a0>
 8003c16:	4b93      	ldr	r3, [pc, #588]	@ (8003e64 <HAL_RCC_OscConfig+0x5e8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	e013      	b.n	8003c44 <HAL_RCC_OscConfig+0x3c8>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003c2e:	2302      	movs	r3, #2
 8003c30:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003c34:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003c40:	4b88      	ldr	r3, [pc, #544]	@ (8003e64 <HAL_RCC_OscConfig+0x5e8>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	2202      	movs	r2, #2
 8003c46:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003c4a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003c4e:	fa92 f2a2 	rbit	r2, r2
 8003c52:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003c56:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003c5a:	fab2 f282 	clz	r2, r2
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	f042 0220 	orr.w	r2, r2, #32
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	f002 021f 	and.w	r2, r2, #31
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCC_OscConfig+0x410>
 8003c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d002      	beq.n	8003c8c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f000 be2e 	b.w	80048e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8c:	4b75      	ldr	r3, [pc, #468]	@ (8003e64 <HAL_RCC_OscConfig+0x5e8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	21f8      	movs	r1, #248	@ 0xf8
 8003ca2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003caa:	fa91 f1a1 	rbit	r1, r1
 8003cae:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003cb2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003cb6:	fab1 f181 	clz	r1, r1
 8003cba:	b2c9      	uxtb	r1, r1
 8003cbc:	408b      	lsls	r3, r1
 8003cbe:	4969      	ldr	r1, [pc, #420]	@ (8003e64 <HAL_RCC_OscConfig+0x5e8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc4:	e0fd      	b.n	8003ec2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8088 	beq.w	8003de8 <HAL_RCC_OscConfig+0x56c>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003cea:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cf8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2301      	movs	r3, #1
 8003d02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fd fe54 	bl	80019b0 <HAL_GetTick>
 8003d08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7fd fe4f 	bl	80019b0 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d902      	bls.n	8003d24 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	f000 bde2 	b.w	80048e8 <HAL_RCC_OscConfig+0x106c>
 8003d24:	2302      	movs	r3, #2
 8003d26:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003d2e:	fa93 f3a3 	rbit	r3, r3
 8003d32:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003d36:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d102      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4d8>
 8003d4e:	4b45      	ldr	r3, [pc, #276]	@ (8003e64 <HAL_RCC_OscConfig+0x5e8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	e013      	b.n	8003d7c <HAL_RCC_OscConfig+0x500>
 8003d54:	2302      	movs	r3, #2
 8003d56:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003d5e:	fa93 f3a3 	rbit	r3, r3
 8003d62:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003d66:	2302      	movs	r3, #2
 8003d68:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003d6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003d78:	4b3a      	ldr	r3, [pc, #232]	@ (8003e64 <HAL_RCC_OscConfig+0x5e8>)
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003d82:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003d86:	fa92 f2a2 	rbit	r2, r2
 8003d8a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003d8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003d92:	fab2 f282 	clz	r2, r2
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	f042 0220 	orr.w	r2, r2, #32
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	f002 021f 	and.w	r2, r2, #31
 8003da2:	2101      	movs	r1, #1
 8003da4:	fa01 f202 	lsl.w	r2, r1, r2
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0af      	beq.n	8003d0e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dae:	4b2d      	ldr	r3, [pc, #180]	@ (8003e64 <HAL_RCC_OscConfig+0x5e8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	21f8      	movs	r1, #248	@ 0xf8
 8003dc4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003dcc:	fa91 f1a1 	rbit	r1, r1
 8003dd0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003dd4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003dd8:	fab1 f181 	clz	r1, r1
 8003ddc:	b2c9      	uxtb	r1, r1
 8003dde:	408b      	lsls	r3, r1
 8003de0:	4920      	ldr	r1, [pc, #128]	@ (8003e64 <HAL_RCC_OscConfig+0x5e8>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]
 8003de6:	e06c      	b.n	8003ec2 <HAL_RCC_OscConfig+0x646>
 8003de8:	2301      	movs	r3, #1
 8003dea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003dfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2300      	movs	r3, #0
 8003e12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fd fdcc 	bl	80019b0 <HAL_GetTick>
 8003e18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1e:	f7fd fdc7 	bl	80019b0 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d902      	bls.n	8003e34 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	f000 bd5a 	b.w	80048e8 <HAL_RCC_OscConfig+0x106c>
 8003e34:	2302      	movs	r3, #2
 8003e36:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d104      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5ec>
 8003e5e:	4b01      	ldr	r3, [pc, #4]	@ (8003e64 <HAL_RCC_OscConfig+0x5e8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	e015      	b.n	8003e90 <HAL_RCC_OscConfig+0x614>
 8003e64:	40021000 	.word	0x40021000
 8003e68:	2302      	movs	r3, #2
 8003e6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003e80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003e8c:	4bc8      	ldr	r3, [pc, #800]	@ (80041b0 <HAL_RCC_OscConfig+0x934>)
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	2202      	movs	r2, #2
 8003e92:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003e96:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003e9a:	fa92 f2a2 	rbit	r2, r2
 8003e9e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003ea2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003ea6:	fab2 f282 	clz	r2, r2
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	f042 0220 	orr.w	r2, r2, #32
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	f002 021f 	and.w	r2, r2, #31
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1ad      	bne.n	8003e1e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8110 	beq.w	80040f8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003edc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d079      	beq.n	8003fdc <HAL_RCC_OscConfig+0x760>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	4bab      	ldr	r3, [pc, #684]	@ (80041b4 <HAL_RCC_OscConfig+0x938>)
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2301      	movs	r3, #1
 8003f10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f12:	f7fd fd4d 	bl	80019b0 <HAL_GetTick>
 8003f16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f1c:	f7fd fd48 	bl	80019b0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d902      	bls.n	8003f32 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	f000 bcdb 	b.w	80048e8 <HAL_RCC_OscConfig+0x106c>
 8003f32:	2302      	movs	r3, #2
 8003f34:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003f3c:	fa93 f3a3 	rbit	r3, r3
 8003f40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f48:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	fa93 f2a3 	rbit	r2, r3
 8003f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f70:	2202      	movs	r2, #2
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	fa93 f2a3 	rbit	r2, r3
 8003f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003f8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8c:	4b88      	ldr	r3, [pc, #544]	@ (80041b0 <HAL_RCC_OscConfig+0x934>)
 8003f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003f98:	2102      	movs	r1, #2
 8003f9a:	6019      	str	r1, [r3, #0]
 8003f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	fa93 f1a3 	rbit	r1, r3
 8003faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003fb2:	6019      	str	r1, [r3, #0]
  return result;
 8003fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	fab3 f383 	clz	r3, r3
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	2101      	movs	r1, #1
 8003fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0a0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x6a0>
 8003fda:	e08d      	b.n	80040f8 <HAL_RCC_OscConfig+0x87c>
 8003fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	fa93 f2a3 	rbit	r2, r3
 8003ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ffe:	601a      	str	r2, [r3, #0]
  return result;
 8004000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004004:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004008:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	4b68      	ldr	r3, [pc, #416]	@ (80041b4 <HAL_RCC_OscConfig+0x938>)
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	461a      	mov	r2, r3
 800401a:	2300      	movs	r3, #0
 800401c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401e:	f7fd fcc7 	bl	80019b0 <HAL_GetTick>
 8004022:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004026:	e00a      	b.n	800403e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004028:	f7fd fcc2 	bl	80019b0 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d902      	bls.n	800403e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	f000 bc55 	b.w	80048e8 <HAL_RCC_OscConfig+0x106c>
 800403e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004042:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004046:	2202      	movs	r2, #2
 8004048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	fa93 f2a3 	rbit	r2, r3
 8004058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004066:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800406a:	2202      	movs	r2, #2
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004072:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	fa93 f2a3 	rbit	r2, r3
 800407c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004080:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800408e:	2202      	movs	r2, #2
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004096:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	fa93 f2a3 	rbit	r2, r3
 80040a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80040a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040aa:	4b41      	ldr	r3, [pc, #260]	@ (80041b0 <HAL_RCC_OscConfig+0x934>)
 80040ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80040b6:	2102      	movs	r1, #2
 80040b8:	6019      	str	r1, [r3, #0]
 80040ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040be:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	fa93 f1a3 	rbit	r1, r3
 80040c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80040d0:	6019      	str	r1, [r3, #0]
  return result;
 80040d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	fab3 f383 	clz	r3, r3
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f003 031f 	and.w	r3, r3, #31
 80040ec:	2101      	movs	r1, #1
 80040ee:	fa01 f303 	lsl.w	r3, r1, r3
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d197      	bne.n	8004028 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 81a1 	beq.w	8004450 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410e:	2300      	movs	r3, #0
 8004110:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004114:	4b26      	ldr	r3, [pc, #152]	@ (80041b0 <HAL_RCC_OscConfig+0x934>)
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d116      	bne.n	800414e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004120:	4b23      	ldr	r3, [pc, #140]	@ (80041b0 <HAL_RCC_OscConfig+0x934>)
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	4a22      	ldr	r2, [pc, #136]	@ (80041b0 <HAL_RCC_OscConfig+0x934>)
 8004126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800412a:	61d3      	str	r3, [r2, #28]
 800412c:	4b20      	ldr	r3, [pc, #128]	@ (80041b0 <HAL_RCC_OscConfig+0x934>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004138:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004142:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004146:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414e:	4b1a      	ldr	r3, [pc, #104]	@ (80041b8 <HAL_RCC_OscConfig+0x93c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11a      	bne.n	8004190 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800415a:	4b17      	ldr	r3, [pc, #92]	@ (80041b8 <HAL_RCC_OscConfig+0x93c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a16      	ldr	r2, [pc, #88]	@ (80041b8 <HAL_RCC_OscConfig+0x93c>)
 8004160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004164:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004166:	f7fd fc23 	bl	80019b0 <HAL_GetTick>
 800416a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	e009      	b.n	8004184 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004170:	f7fd fc1e 	bl	80019b0 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b64      	cmp	r3, #100	@ 0x64
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e3b1      	b.n	80048e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004184:	4b0c      	ldr	r3, [pc, #48]	@ (80041b8 <HAL_RCC_OscConfig+0x93c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0ef      	beq.n	8004170 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004194:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d10d      	bne.n	80041bc <HAL_RCC_OscConfig+0x940>
 80041a0:	4b03      	ldr	r3, [pc, #12]	@ (80041b0 <HAL_RCC_OscConfig+0x934>)
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	4a02      	ldr	r2, [pc, #8]	@ (80041b0 <HAL_RCC_OscConfig+0x934>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	6213      	str	r3, [r2, #32]
 80041ac:	e03c      	b.n	8004228 <HAL_RCC_OscConfig+0x9ac>
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000
 80041b4:	10908120 	.word	0x10908120
 80041b8:	40007000 	.word	0x40007000
 80041bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10c      	bne.n	80041e6 <HAL_RCC_OscConfig+0x96a>
 80041cc:	4bc1      	ldr	r3, [pc, #772]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4ac0      	ldr	r2, [pc, #768]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 80041d2:	f023 0301 	bic.w	r3, r3, #1
 80041d6:	6213      	str	r3, [r2, #32]
 80041d8:	4bbe      	ldr	r3, [pc, #760]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	4abd      	ldr	r2, [pc, #756]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 80041de:	f023 0304 	bic.w	r3, r3, #4
 80041e2:	6213      	str	r3, [r2, #32]
 80041e4:	e020      	b.n	8004228 <HAL_RCC_OscConfig+0x9ac>
 80041e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x994>
 80041f6:	4bb7      	ldr	r3, [pc, #732]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4ab6      	ldr	r2, [pc, #728]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 80041fc:	f043 0304 	orr.w	r3, r3, #4
 8004200:	6213      	str	r3, [r2, #32]
 8004202:	4bb4      	ldr	r3, [pc, #720]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	4ab3      	ldr	r2, [pc, #716]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6213      	str	r3, [r2, #32]
 800420e:	e00b      	b.n	8004228 <HAL_RCC_OscConfig+0x9ac>
 8004210:	4bb0      	ldr	r3, [pc, #704]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	4aaf      	ldr	r2, [pc, #700]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	6213      	str	r3, [r2, #32]
 800421c:	4bad      	ldr	r3, [pc, #692]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	4aac      	ldr	r2, [pc, #688]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 8004222:	f023 0304 	bic.w	r3, r3, #4
 8004226:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800422c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8081 	beq.w	800433c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423a:	f7fd fbb9 	bl	80019b0 <HAL_GetTick>
 800423e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004244:	f7fd fbb4 	bl	80019b0 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004254:	4293      	cmp	r3, r2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e345      	b.n	80048e8 <HAL_RCC_OscConfig+0x106c>
 800425c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004260:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004264:	2202      	movs	r2, #2
 8004266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	fa93 f2a3 	rbit	r2, r3
 8004276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004284:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004288:	2202      	movs	r2, #2
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004290:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	fa93 f2a3 	rbit	r2, r3
 800429a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80042a2:	601a      	str	r2, [r3, #0]
  return result;
 80042a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80042ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f043 0302 	orr.w	r3, r3, #2
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d102      	bne.n	80042c8 <HAL_RCC_OscConfig+0xa4c>
 80042c2:	4b84      	ldr	r3, [pc, #528]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	e013      	b.n	80042f0 <HAL_RCC_OscConfig+0xa74>
 80042c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042cc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80042d0:	2202      	movs	r2, #2
 80042d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	fa93 f2a3 	rbit	r2, r3
 80042e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	4b79      	ldr	r3, [pc, #484]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 80042ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042f4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80042f8:	2102      	movs	r1, #2
 80042fa:	6011      	str	r1, [r2, #0]
 80042fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004300:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	fa92 f1a2 	rbit	r1, r2
 800430a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800430e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004312:	6011      	str	r1, [r2, #0]
  return result;
 8004314:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004318:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	fab2 f282 	clz	r2, r2
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	f002 021f 	and.w	r2, r2, #31
 800432e:	2101      	movs	r1, #1
 8004330:	fa01 f202 	lsl.w	r2, r1, r2
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d084      	beq.n	8004244 <HAL_RCC_OscConfig+0x9c8>
 800433a:	e07f      	b.n	800443c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433c:	f7fd fb38 	bl	80019b0 <HAL_GetTick>
 8004340:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004344:	e00b      	b.n	800435e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004346:	f7fd fb33 	bl	80019b0 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e2c4      	b.n	80048e8 <HAL_RCC_OscConfig+0x106c>
 800435e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004362:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004366:	2202      	movs	r2, #2
 8004368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	fa93 f2a3 	rbit	r2, r3
 8004378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004386:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800438a:	2202      	movs	r2, #2
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004392:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	fa93 f2a3 	rbit	r2, r3
 800439c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80043a4:	601a      	str	r2, [r3, #0]
  return result;
 80043a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043aa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80043ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b0:	fab3 f383 	clz	r3, r3
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f043 0302 	orr.w	r3, r3, #2
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d102      	bne.n	80043ca <HAL_RCC_OscConfig+0xb4e>
 80043c4:	4b43      	ldr	r3, [pc, #268]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	e013      	b.n	80043f2 <HAL_RCC_OscConfig+0xb76>
 80043ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80043d2:	2202      	movs	r2, #2
 80043d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043da:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	fa93 f2a3 	rbit	r2, r3
 80043e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	4b39      	ldr	r3, [pc, #228]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043f6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80043fa:	2102      	movs	r1, #2
 80043fc:	6011      	str	r1, [r2, #0]
 80043fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004402:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	fa92 f1a2 	rbit	r1, r2
 800440c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004410:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004414:	6011      	str	r1, [r2, #0]
  return result;
 8004416:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800441a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	fab2 f282 	clz	r2, r2
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	f002 021f 	and.w	r2, r2, #31
 8004430:	2101      	movs	r1, #1
 8004432:	fa01 f202 	lsl.w	r2, r1, r2
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d184      	bne.n	8004346 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800443c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004440:	2b01      	cmp	r3, #1
 8004442:	d105      	bne.n	8004450 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004444:	4b23      	ldr	r3, [pc, #140]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	4a22      	ldr	r2, [pc, #136]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 800444a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800444e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004454:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8242 	beq.w	80048e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004462:	4b1c      	ldr	r3, [pc, #112]	@ (80044d4 <HAL_RCC_OscConfig+0xc58>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b08      	cmp	r3, #8
 800446c:	f000 8213 	beq.w	8004896 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004474:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	2b02      	cmp	r3, #2
 800447e:	f040 8162 	bne.w	8004746 <HAL_RCC_OscConfig+0xeca>
 8004482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004486:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800448a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800448e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004494:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	fa93 f2a3 	rbit	r2, r3
 800449e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80044a6:	601a      	str	r2, [r3, #0]
  return result;
 80044a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ac:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80044b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80044bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	461a      	mov	r2, r3
 80044c4:	2300      	movs	r3, #0
 80044c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fd fa72 	bl	80019b0 <HAL_GetTick>
 80044cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d0:	e00c      	b.n	80044ec <HAL_RCC_OscConfig+0xc70>
 80044d2:	bf00      	nop
 80044d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fd fa6a 	bl	80019b0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e1fd      	b.n	80048e8 <HAL_RCC_OscConfig+0x106c>
 80044ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80044f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	fa93 f2a3 	rbit	r2, r3
 8004508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004510:	601a      	str	r2, [r3, #0]
  return result;
 8004512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004516:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800451a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	b2db      	uxtb	r3, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <HAL_RCC_OscConfig+0xcba>
 8004530:	4bb0      	ldr	r3, [pc, #704]	@ (80047f4 <HAL_RCC_OscConfig+0xf78>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	e027      	b.n	8004586 <HAL_RCC_OscConfig+0xd0a>
 8004536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800453a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800453e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004548:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	fa93 f2a3 	rbit	r2, r3
 8004552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004556:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004560:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004564:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	fa93 f2a3 	rbit	r2, r3
 8004578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800457c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	4b9c      	ldr	r3, [pc, #624]	@ (80047f4 <HAL_RCC_OscConfig+0xf78>)
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800458a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800458e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004592:	6011      	str	r1, [r2, #0]
 8004594:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004598:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	fa92 f1a2 	rbit	r1, r2
 80045a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045a6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80045aa:	6011      	str	r1, [r2, #0]
  return result;
 80045ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80045b0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	fab2 f282 	clz	r2, r2
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	f042 0220 	orr.w	r2, r2, #32
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	f002 021f 	and.w	r2, r2, #31
 80045c6:	2101      	movs	r1, #1
 80045c8:	fa01 f202 	lsl.w	r2, r1, r2
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d182      	bne.n	80044d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d2:	4b88      	ldr	r3, [pc, #544]	@ (80047f4 <HAL_RCC_OscConfig+0xf78>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80045da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80045e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	430b      	orrs	r3, r1
 80045f4:	497f      	ldr	r1, [pc, #508]	@ (80047f4 <HAL_RCC_OscConfig+0xf78>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]
 80045fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045fe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004602:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800460c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	fa93 f2a3 	rbit	r2, r3
 8004616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800461e:	601a      	str	r2, [r3, #0]
  return result;
 8004620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004624:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004628:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800462a:	fab3 f383 	clz	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004634:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	461a      	mov	r2, r3
 800463c:	2301      	movs	r3, #1
 800463e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fd f9b6 	bl	80019b0 <HAL_GetTick>
 8004644:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004648:	e009      	b.n	800465e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464a:	f7fd f9b1 	bl	80019b0 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e144      	b.n	80048e8 <HAL_RCC_OscConfig+0x106c>
 800465e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004662:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004666:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800466a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004670:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	fa93 f2a3 	rbit	r2, r3
 800467a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800467e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004682:	601a      	str	r2, [r3, #0]
  return result;
 8004684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004688:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800468c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800468e:	fab3 f383 	clz	r3, r3
 8004692:	b2db      	uxtb	r3, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d102      	bne.n	80046a8 <HAL_RCC_OscConfig+0xe2c>
 80046a2:	4b54      	ldr	r3, [pc, #336]	@ (80047f4 <HAL_RCC_OscConfig+0xf78>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	e027      	b.n	80046f8 <HAL_RCC_OscConfig+0xe7c>
 80046a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80046b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	fa93 f2a3 	rbit	r2, r3
 80046c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80046d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	fa93 f2a3 	rbit	r2, r3
 80046ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	4b3f      	ldr	r3, [pc, #252]	@ (80047f4 <HAL_RCC_OscConfig+0xf78>)
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046fc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004700:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004704:	6011      	str	r1, [r2, #0]
 8004706:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800470a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	fa92 f1a2 	rbit	r1, r2
 8004714:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004718:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800471c:	6011      	str	r1, [r2, #0]
  return result;
 800471e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004722:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	fab2 f282 	clz	r2, r2
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	f042 0220 	orr.w	r2, r2, #32
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	f002 021f 	and.w	r2, r2, #31
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f202 	lsl.w	r2, r1, r2
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d082      	beq.n	800464a <HAL_RCC_OscConfig+0xdce>
 8004744:	e0cf      	b.n	80048e6 <HAL_RCC_OscConfig+0x106a>
 8004746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800474e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004758:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	fa93 f2a3 	rbit	r2, r3
 8004762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004766:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800476a:	601a      	str	r2, [r3, #0]
  return result;
 800476c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004770:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004774:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004780:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	461a      	mov	r2, r3
 8004788:	2300      	movs	r3, #0
 800478a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fd f910 	bl	80019b0 <HAL_GetTick>
 8004790:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004794:	e009      	b.n	80047aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004796:	f7fd f90b 	bl	80019b0 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e09e      	b.n	80048e8 <HAL_RCC_OscConfig+0x106c>
 80047aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ae:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80047b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047bc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	fa93 f2a3 	rbit	r2, r3
 80047c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ca:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80047ce:	601a      	str	r2, [r3, #0]
  return result;
 80047d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80047d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047da:	fab3 f383 	clz	r3, r3
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d104      	bne.n	80047f8 <HAL_RCC_OscConfig+0xf7c>
 80047ee:	4b01      	ldr	r3, [pc, #4]	@ (80047f4 <HAL_RCC_OscConfig+0xf78>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	e029      	b.n	8004848 <HAL_RCC_OscConfig+0xfcc>
 80047f4:	40021000 	.word	0x40021000
 80047f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004800:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800480a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	fa93 f2a3 	rbit	r2, r3
 8004814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004818:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004822:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004826:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004830:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	fa93 f2a3 	rbit	r2, r3
 800483a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800483e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	4b2b      	ldr	r3, [pc, #172]	@ (80048f4 <HAL_RCC_OscConfig+0x1078>)
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800484c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004850:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004854:	6011      	str	r1, [r2, #0]
 8004856:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800485a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	fa92 f1a2 	rbit	r1, r2
 8004864:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004868:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800486c:	6011      	str	r1, [r2, #0]
  return result;
 800486e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004872:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	fab2 f282 	clz	r2, r2
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	f042 0220 	orr.w	r2, r2, #32
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	f002 021f 	and.w	r2, r2, #31
 8004888:	2101      	movs	r1, #1
 800488a:	fa01 f202 	lsl.w	r2, r1, r2
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d180      	bne.n	8004796 <HAL_RCC_OscConfig+0xf1a>
 8004894:	e027      	b.n	80048e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800489a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e01e      	b.n	80048e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <HAL_RCC_OscConfig+0x1078>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80048b6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d10b      	bne.n	80048e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80048ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80048ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80048d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048de:	429a      	cmp	r2, r3
 80048e0:	d001      	beq.n	80048e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000

080048f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b09e      	sub	sp, #120	@ 0x78
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e162      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004910:	4b90      	ldr	r3, [pc, #576]	@ (8004b54 <HAL_RCC_ClockConfig+0x25c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d910      	bls.n	8004940 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b8d      	ldr	r3, [pc, #564]	@ (8004b54 <HAL_RCC_ClockConfig+0x25c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f023 0207 	bic.w	r2, r3, #7
 8004926:	498b      	ldr	r1, [pc, #556]	@ (8004b54 <HAL_RCC_ClockConfig+0x25c>)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	4b89      	ldr	r3, [pc, #548]	@ (8004b54 <HAL_RCC_ClockConfig+0x25c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e14a      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494c:	4b82      	ldr	r3, [pc, #520]	@ (8004b58 <HAL_RCC_ClockConfig+0x260>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	497f      	ldr	r1, [pc, #508]	@ (8004b58 <HAL_RCC_ClockConfig+0x260>)
 800495a:	4313      	orrs	r3, r2
 800495c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 80dc 	beq.w	8004b24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d13c      	bne.n	80049ee <HAL_RCC_ClockConfig+0xf6>
 8004974:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004978:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800497c:	fa93 f3a3 	rbit	r3, r3
 8004980:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004984:	fab3 f383 	clz	r3, r3
 8004988:	b2db      	uxtb	r3, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	d102      	bne.n	800499e <HAL_RCC_ClockConfig+0xa6>
 8004998:	4b6f      	ldr	r3, [pc, #444]	@ (8004b58 <HAL_RCC_ClockConfig+0x260>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	e00f      	b.n	80049be <HAL_RCC_ClockConfig+0xc6>
 800499e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80049ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80049b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049ba:	4b67      	ldr	r3, [pc, #412]	@ (8004b58 <HAL_RCC_ClockConfig+0x260>)
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049c6:	fa92 f2a2 	rbit	r2, r2
 80049ca:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80049cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80049ce:	fab2 f282 	clz	r2, r2
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	f042 0220 	orr.w	r2, r2, #32
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	f002 021f 	and.w	r2, r2, #31
 80049de:	2101      	movs	r1, #1
 80049e0:	fa01 f202 	lsl.w	r2, r1, r2
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d17b      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e0f3      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d13c      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x178>
 80049f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049fe:	fa93 f3a3 	rbit	r3, r3
 8004a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a06:	fab3 f383 	clz	r3, r3
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x128>
 8004a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8004b58 <HAL_RCC_ClockConfig+0x260>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	e00f      	b.n	8004a40 <HAL_RCC_ClockConfig+0x148>
 8004a20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a24:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a32:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a36:	fa93 f3a3 	rbit	r3, r3
 8004a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a3c:	4b46      	ldr	r3, [pc, #280]	@ (8004b58 <HAL_RCC_ClockConfig+0x260>)
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a44:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004a46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a48:	fa92 f2a2 	rbit	r2, r2
 8004a4c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004a4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a50:	fab2 f282 	clz	r2, r2
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	f042 0220 	orr.w	r2, r2, #32
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	f002 021f 	and.w	r2, r2, #31
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f202 	lsl.w	r2, r1, r2
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d13a      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0b2      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x2de>
 8004a70:	2302      	movs	r3, #2
 8004a72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7e:	fab3 f383 	clz	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d102      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x1a0>
 8004a92:	4b31      	ldr	r3, [pc, #196]	@ (8004b58 <HAL_RCC_ClockConfig+0x260>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	e00d      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x1bc>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9e:	fa93 f3a3 	rbit	r3, r3
 8004aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	623b      	str	r3, [r7, #32]
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	fa93 f3a3 	rbit	r3, r3
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	4b29      	ldr	r3, [pc, #164]	@ (8004b58 <HAL_RCC_ClockConfig+0x260>)
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	61ba      	str	r2, [r7, #24]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	fa92 f2a2 	rbit	r2, r2
 8004abe:	617a      	str	r2, [r7, #20]
  return result;
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	fab2 f282 	clz	r2, r2
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	f042 0220 	orr.w	r2, r2, #32
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	f002 021f 	and.w	r2, r2, #31
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e079      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <HAL_RCC_ClockConfig+0x260>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	491a      	ldr	r1, [pc, #104]	@ (8004b58 <HAL_RCC_ClockConfig+0x260>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af4:	f7fc ff5c 	bl	80019b0 <HAL_GetTick>
 8004af8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fc ff58 	bl	80019b0 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e061      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b11      	ldr	r3, [pc, #68]	@ (8004b58 <HAL_RCC_ClockConfig+0x260>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <HAL_RCC_ClockConfig+0x25c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d214      	bcs.n	8004b5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b08      	ldr	r3, [pc, #32]	@ (8004b54 <HAL_RCC_ClockConfig+0x25c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 0207 	bic.w	r2, r3, #7
 8004b3a:	4906      	ldr	r1, [pc, #24]	@ (8004b54 <HAL_RCC_ClockConfig+0x25c>)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	4b04      	ldr	r3, [pc, #16]	@ (8004b54 <HAL_RCC_ClockConfig+0x25c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e040      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x2de>
 8004b54:	40022000 	.word	0x40022000
 8004b58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b68:	4b1d      	ldr	r3, [pc, #116]	@ (8004be0 <HAL_RCC_ClockConfig+0x2e8>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	491a      	ldr	r1, [pc, #104]	@ (8004be0 <HAL_RCC_ClockConfig+0x2e8>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b86:	4b16      	ldr	r3, [pc, #88]	@ (8004be0 <HAL_RCC_ClockConfig+0x2e8>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4912      	ldr	r1, [pc, #72]	@ (8004be0 <HAL_RCC_ClockConfig+0x2e8>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b9a:	f000 f829 	bl	8004bf0 <HAL_RCC_GetSysClockFreq>
 8004b9e:	4601      	mov	r1, r0
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8004be0 <HAL_RCC_ClockConfig+0x2e8>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ba8:	22f0      	movs	r2, #240	@ 0xf0
 8004baa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	fa92 f2a2 	rbit	r2, r2
 8004bb2:	60fa      	str	r2, [r7, #12]
  return result;
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	fab2 f282 	clz	r2, r2
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	40d3      	lsrs	r3, r2
 8004bbe:	4a09      	ldr	r2, [pc, #36]	@ (8004be4 <HAL_RCC_ClockConfig+0x2ec>)
 8004bc0:	5cd3      	ldrb	r3, [r2, r3]
 8004bc2:	fa21 f303 	lsr.w	r3, r1, r3
 8004bc6:	4a08      	ldr	r2, [pc, #32]	@ (8004be8 <HAL_RCC_ClockConfig+0x2f0>)
 8004bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004bca:	4b08      	ldr	r3, [pc, #32]	@ (8004bec <HAL_RCC_ClockConfig+0x2f4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc feaa 	bl	8001928 <HAL_InitTick>
  
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3778      	adds	r7, #120	@ 0x78
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
 8004be4:	0800c10c 	.word	0x0800c10c
 8004be8:	20000000 	.word	0x20000000
 8004bec:	20000004 	.word	0x20000004

08004bf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b08b      	sub	sp, #44	@ 0x2c
 8004bf4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004c0a:	4b29      	ldr	r3, [pc, #164]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d002      	beq.n	8004c20 <HAL_RCC_GetSysClockFreq+0x30>
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCC_GetSysClockFreq+0x36>
 8004c1e:	e03c      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c20:	4b24      	ldr	r3, [pc, #144]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c22:	623b      	str	r3, [r7, #32]
      break;
 8004c24:	e03c      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004c2c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8004c30:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	fa92 f2a2 	rbit	r2, r2
 8004c38:	607a      	str	r2, [r7, #4]
  return result;
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	fab2 f282 	clz	r2, r2
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	40d3      	lsrs	r3, r2
 8004c44:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c46:	5cd3      	ldrb	r3, [r2, r3]
 8004c48:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c4a:	4b19      	ldr	r3, [pc, #100]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	220f      	movs	r2, #15
 8004c54:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	fa92 f2a2 	rbit	r2, r2
 8004c5c:	60fa      	str	r2, [r7, #12]
  return result;
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	fab2 f282 	clz	r2, r2
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	40d3      	lsrs	r3, r2
 8004c68:	4a14      	ldr	r2, [pc, #80]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c6a:	5cd3      	ldrb	r3, [r2, r3]
 8004c6c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c78:	4a0e      	ldr	r2, [pc, #56]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c88:	e004      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c8e:	fb02 f303 	mul.w	r3, r2, r3
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	623b      	str	r3, [r7, #32]
      break;
 8004c98:	e002      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c9c:	623b      	str	r3, [r7, #32]
      break;
 8004c9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	372c      	adds	r7, #44	@ 0x2c
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	007a1200 	.word	0x007a1200
 8004cb8:	0800c124 	.word	0x0800c124
 8004cbc:	0800c134 	.word	0x0800c134
 8004cc0:	003d0900 	.word	0x003d0900

08004cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc8:	4b03      	ldr	r3, [pc, #12]	@ (8004cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cca:	681b      	ldr	r3, [r3, #0]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20000000 	.word	0x20000000

08004cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004ce2:	f7ff ffef 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cf0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004cf4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	fa92 f2a2 	rbit	r2, r2
 8004cfc:	603a      	str	r2, [r7, #0]
  return result;
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	fab2 f282 	clz	r2, r2
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	40d3      	lsrs	r3, r2
 8004d08:	4a04      	ldr	r2, [pc, #16]	@ (8004d1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d0a:	5cd3      	ldrb	r3, [r2, r3]
 8004d0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	0800c11c 	.word	0x0800c11c

08004d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d26:	f7ff ffcd 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004d2a:	4601      	mov	r1, r0
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004d34:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004d38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	fa92 f2a2 	rbit	r2, r2
 8004d40:	603a      	str	r2, [r7, #0]
  return result;
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	fab2 f282 	clz	r2, r2
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	40d3      	lsrs	r3, r2
 8004d4c:	4a04      	ldr	r2, [pc, #16]	@ (8004d60 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d4e:	5cd3      	ldrb	r3, [r2, r3]
 8004d50:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	0800c11c 	.word	0x0800c11c

08004d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b092      	sub	sp, #72	@ 0x48
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80cd 	beq.w	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d88:	4b86      	ldr	r3, [pc, #536]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10e      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d94:	4b83      	ldr	r3, [pc, #524]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	4a82      	ldr	r2, [pc, #520]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	61d3      	str	r3, [r2, #28]
 8004da0:	4b80      	ldr	r3, [pc, #512]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db2:	4b7d      	ldr	r3, [pc, #500]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d118      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a79      	ldr	r2, [pc, #484]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dca:	f7fc fdf1 	bl	80019b0 <HAL_GetTick>
 8004dce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd0:	e008      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd2:	f7fc fded 	bl	80019b0 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b64      	cmp	r3, #100	@ 0x64
 8004dde:	d901      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e0db      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de4:	4b70      	ldr	r3, [pc, #448]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004df0:	4b6c      	ldr	r3, [pc, #432]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d07d      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d076      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e0e:	4b65      	ldr	r3, [pc, #404]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e1c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e20:	fa93 f3a3 	rbit	r3, r3
 8004e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e28:	fab3 f383 	clz	r3, r3
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	4b5e      	ldr	r3, [pc, #376]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	461a      	mov	r2, r3
 8004e38:	2301      	movs	r3, #1
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e44:	fa93 f3a3 	rbit	r3, r3
 8004e48:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e4c:	fab3 f383 	clz	r3, r3
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	4b55      	ldr	r3, [pc, #340]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e60:	4a50      	ldr	r2, [pc, #320]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e64:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d045      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fc fd9e 	bl	80019b0 <HAL_GetTick>
 8004e74:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e76:	e00a      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e78:	f7fc fd9a 	bl	80019b0 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e086      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	fa93 f3a3 	rbit	r3, r3
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	623b      	str	r3, [r7, #32]
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	fa93 f3a3 	rbit	r3, r3
 8004ea4:	61fb      	str	r3, [r7, #28]
  return result;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea8:	fab3 f383 	clz	r3, r3
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	f043 0302 	orr.w	r3, r3, #2
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d102      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004ebc:	4b39      	ldr	r3, [pc, #228]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	e007      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	fa93 f3a3 	rbit	r3, r3
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	4b35      	ldr	r3, [pc, #212]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	613a      	str	r2, [r7, #16]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	fa92 f2a2 	rbit	r2, r2
 8004edc:	60fa      	str	r2, [r7, #12]
  return result;
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	fab2 f282 	clz	r2, r2
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	f002 021f 	and.w	r2, r2, #31
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0bd      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004efc:	4b29      	ldr	r3, [pc, #164]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	4926      	ldr	r1, [pc, #152]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f0e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f16:	4b23      	ldr	r3, [pc, #140]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4a22      	ldr	r2, [pc, #136]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f20:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d008      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	f023 0203 	bic.w	r2, r3, #3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	491a      	ldr	r1, [pc, #104]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f4c:	4b15      	ldr	r3, [pc, #84]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f50:	f023 0210 	bic.w	r2, r3, #16
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4912      	ldr	r1, [pc, #72]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d008      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	490b      	ldr	r1, [pc, #44]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f88:	4b06      	ldr	r3, [pc, #24]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	4903      	ldr	r1, [pc, #12]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3748      	adds	r7, #72	@ 0x48
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	40007000 	.word	0x40007000
 8004fac:	10908100 	.word	0x10908100

08004fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e095      	b.n	80050ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d108      	bne.n	8004fdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fd2:	d009      	beq.n	8004fe8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	61da      	str	r2, [r3, #28]
 8004fda:	e005      	b.n	8004fe8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fc fa86 	bl	8001514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800501e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005028:	d902      	bls.n	8005030 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	e002      	b.n	8005036 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005030:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005034:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800503e:	d007      	beq.n	8005050 <HAL_SPI_Init+0xa0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005048:	d002      	beq.n	8005050 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005092:	ea42 0103 	orr.w	r1, r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	0c1b      	lsrs	r3, r3, #16
 80050ac:	f003 0204 	and.w	r2, r3, #4
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80050cc:	ea42 0103 	orr.w	r1, r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b088      	sub	sp, #32
 80050fa:	af02      	add	r7, sp, #8
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	603b      	str	r3, [r7, #0]
 8005102:	4613      	mov	r3, r2
 8005104:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d002      	beq.n	800511c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005116:	2302      	movs	r3, #2
 8005118:	75fb      	strb	r3, [r7, #23]
    goto error;
 800511a:	e11a      	b.n	8005352 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005124:	d112      	bne.n	800514c <HAL_SPI_Receive+0x56>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10e      	bne.n	800514c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2204      	movs	r2, #4
 8005132:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	68b9      	ldr	r1, [r7, #8]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f90e 	bl	8005364 <HAL_SPI_TransmitReceive>
 8005148:	4603      	mov	r3, r0
 800514a:	e107      	b.n	800535c <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_SPI_Receive+0x64>
 8005156:	2302      	movs	r3, #2
 8005158:	e100      	b.n	800535c <HAL_SPI_Receive+0x266>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005162:	f7fc fc25 	bl	80019b0 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_SPI_Receive+0x7e>
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005178:	e0eb      	b.n	8005352 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2204      	movs	r2, #4
 800517e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	88fa      	ldrh	r2, [r7, #6]
 8005192:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	88fa      	ldrh	r2, [r7, #6]
 800519a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051c4:	d908      	bls.n	80051d8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80051d4:	605a      	str	r2, [r3, #4]
 80051d6:	e007      	b.n	80051e8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80051e6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051f0:	d10f      	bne.n	8005212 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005210:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521c:	2b40      	cmp	r3, #64	@ 0x40
 800521e:	d007      	beq.n	8005230 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800522e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005238:	d86f      	bhi.n	800531a <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800523a:	e034      	b.n	80052a6 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b01      	cmp	r3, #1
 8005248:	d117      	bne.n	800527a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f103 020c 	add.w	r2, r3, #12
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005278:	e015      	b.n	80052a6 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800527a:	f7fc fb99 	bl	80019b0 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d803      	bhi.n	8005292 <HAL_SPI_Receive+0x19c>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d102      	bne.n	8005298 <HAL_SPI_Receive+0x1a2>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80052a4:	e055      	b.n	8005352 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1c4      	bne.n	800523c <HAL_SPI_Receive+0x146>
 80052b2:	e038      	b.n	8005326 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d115      	bne.n	80052ee <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052cc:	b292      	uxth	r2, r2
 80052ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d4:	1c9a      	adds	r2, r3, #2
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80052ec:	e015      	b.n	800531a <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052ee:	f7fc fb5f 	bl	80019b0 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d803      	bhi.n	8005306 <HAL_SPI_Receive+0x210>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005304:	d102      	bne.n	800530c <HAL_SPI_Receive+0x216>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d106      	bne.n	800531a <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005318:	e01b      	b.n	8005352 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1c6      	bne.n	80052b4 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 fb5a 	bl	80059e4 <SPI_EndRxTransaction>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	75fb      	strb	r3, [r7, #23]
 8005348:	e003      	b.n	8005352 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	@ 0x28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005372:	2301      	movs	r3, #1
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_SPI_TransmitReceive+0x26>
 8005386:	2302      	movs	r3, #2
 8005388:	e20a      	b.n	80057a0 <HAL_SPI_TransmitReceive+0x43c>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005392:	f7fc fb0d 	bl	80019b0 <HAL_GetTick>
 8005396:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800539e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80053a6:	887b      	ldrh	r3, [r7, #2]
 80053a8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80053aa:	887b      	ldrh	r3, [r7, #2]
 80053ac:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053ae:	7efb      	ldrb	r3, [r7, #27]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d00e      	beq.n	80053d2 <HAL_SPI_TransmitReceive+0x6e>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053ba:	d106      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d102      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x66>
 80053c4:	7efb      	ldrb	r3, [r7, #27]
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d003      	beq.n	80053d2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
 80053cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80053d0:	e1e0      	b.n	8005794 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_SPI_TransmitReceive+0x80>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <HAL_SPI_TransmitReceive+0x80>
 80053de:	887b      	ldrh	r3, [r7, #2]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d103      	bne.n	80053ec <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80053ea:	e1d3      	b.n	8005794 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d003      	beq.n	8005400 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2205      	movs	r2, #5
 80053fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	887a      	ldrh	r2, [r7, #2]
 8005410:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	887a      	ldrh	r2, [r7, #2]
 8005418:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	887a      	ldrh	r2, [r7, #2]
 8005426:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	887a      	ldrh	r2, [r7, #2]
 800542c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005442:	d802      	bhi.n	800544a <HAL_SPI_TransmitReceive+0xe6>
 8005444:	8a3b      	ldrh	r3, [r7, #16]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d908      	bls.n	800545c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005458:	605a      	str	r2, [r3, #4]
 800545a:	e007      	b.n	800546c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800546a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005476:	2b40      	cmp	r3, #64	@ 0x40
 8005478:	d007      	beq.n	800548a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005488:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005492:	f240 8081 	bls.w	8005598 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_SPI_TransmitReceive+0x140>
 800549e:	8a7b      	ldrh	r3, [r7, #18]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d16d      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a8:	881a      	ldrh	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b4:	1c9a      	adds	r2, r3, #2
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c8:	e05a      	b.n	8005580 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d11b      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x1ac>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_SPI_TransmitReceive+0x1ac>
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d113      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ec:	881a      	ldrh	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	1c9a      	adds	r2, r3, #2
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	d11c      	bne.n	8005558 <HAL_SPI_TransmitReceive+0x1f4>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d016      	beq.n	8005558 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	b292      	uxth	r2, r2
 8005536:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553c:	1c9a      	adds	r2, r3, #2
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005554:	2301      	movs	r3, #1
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005558:	f7fc fa2a 	bl	80019b0 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005564:	429a      	cmp	r2, r3
 8005566:	d80b      	bhi.n	8005580 <HAL_SPI_TransmitReceive+0x21c>
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556e:	d007      	beq.n	8005580 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800557e:	e109      	b.n	8005794 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d19f      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x166>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d199      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x166>
 8005596:	e0e3      	b.n	8005760 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_SPI_TransmitReceive+0x244>
 80055a0:	8a7b      	ldrh	r3, [r7, #18]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	f040 80cf 	bne.w	8005746 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d912      	bls.n	80055d8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	881a      	ldrh	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c2:	1c9a      	adds	r2, r3, #2
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b02      	subs	r3, #2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055d6:	e0b6      	b.n	8005746 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055fe:	e0a2      	b.n	8005746 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b02      	cmp	r3, #2
 800560c:	d134      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x314>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d02f      	beq.n	8005678 <HAL_SPI_TransmitReceive+0x314>
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	2b01      	cmp	r3, #1
 800561c:	d12c      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d912      	bls.n	800564e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562c:	881a      	ldrh	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005638:	1c9a      	adds	r2, r3, #2
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b02      	subs	r3, #2
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800564c:	e012      	b.n	8005674 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	7812      	ldrb	r2, [r2, #0]
 800565a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b01      	cmp	r3, #1
 8005684:	d148      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x3b4>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d042      	beq.n	8005718 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b01      	cmp	r3, #1
 800569c:	d923      	bls.n	80056e6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a8:	b292      	uxth	r2, r2
 80056aa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b0:	1c9a      	adds	r2, r3, #2
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b02      	subs	r3, #2
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d81f      	bhi.n	8005714 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056e2:	605a      	str	r2, [r3, #4]
 80056e4:	e016      	b.n	8005714 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f103 020c 	add.w	r2, r3, #12
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f2:	7812      	ldrb	r2, [r2, #0]
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005714:	2301      	movs	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005718:	f7fc f94a 	bl	80019b0 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005724:	429a      	cmp	r2, r3
 8005726:	d803      	bhi.n	8005730 <HAL_SPI_TransmitReceive+0x3cc>
 8005728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572e:	d102      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x3d2>
 8005730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005732:	2b00      	cmp	r3, #0
 8005734:	d107      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005744:	e026      	b.n	8005794 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	f47f af57 	bne.w	8005600 <HAL_SPI_TransmitReceive+0x29c>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	f47f af50 	bne.w	8005600 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f995 	bl	8005a94 <SPI_EndRxTxTransaction>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800578a:	e003      	b.n	8005794 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800579c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3728      	adds	r7, #40	@ 0x28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	4613      	mov	r3, r2
 80057b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057b8:	f7fc f8fa 	bl	80019b0 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	4413      	add	r3, r2
 80057c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057c8:	f7fc f8f2 	bl	80019b0 <HAL_GetTick>
 80057cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057ce:	4b39      	ldr	r3, [pc, #228]	@ (80058b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	015b      	lsls	r3, r3, #5
 80057d4:	0d1b      	lsrs	r3, r3, #20
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	fb02 f303 	mul.w	r3, r2, r3
 80057dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057de:	e054      	b.n	800588a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	d050      	beq.n	800588a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057e8:	f7fc f8e2 	bl	80019b0 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	69fa      	ldr	r2, [r7, #28]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d902      	bls.n	80057fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d13d      	bne.n	800587a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800580c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005816:	d111      	bne.n	800583c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005820:	d004      	beq.n	800582c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800582a:	d107      	bne.n	800583c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800583a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005844:	d10f      	bne.n	8005866 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005864:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e017      	b.n	80058aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	3b01      	subs	r3, #1
 8005888:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4013      	ands	r3, r2
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	429a      	cmp	r2, r3
 8005898:	bf0c      	ite	eq
 800589a:	2301      	moveq	r3, #1
 800589c:	2300      	movne	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d19b      	bne.n	80057e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000000 	.word	0x20000000

080058b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08a      	sub	sp, #40	@ 0x28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80058ca:	f7fc f871 	bl	80019b0 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	1a9b      	subs	r3, r3, r2
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	4413      	add	r3, r2
 80058d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80058da:	f7fc f869 	bl	80019b0 <HAL_GetTick>
 80058de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	330c      	adds	r3, #12
 80058e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80058e8:	4b3d      	ldr	r3, [pc, #244]	@ (80059e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	00da      	lsls	r2, r3, #3
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	0d1b      	lsrs	r3, r3, #20
 80058f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005900:	e060      	b.n	80059c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005908:	d107      	bne.n	800591a <SPI_WaitFifoStateUntilTimeout+0x62>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d104      	bne.n	800591a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005918:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005920:	d050      	beq.n	80059c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005922:	f7fc f845 	bl	80019b0 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592e:	429a      	cmp	r2, r3
 8005930:	d902      	bls.n	8005938 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	2b00      	cmp	r3, #0
 8005936:	d13d      	bne.n	80059b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005946:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005950:	d111      	bne.n	8005976 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800595a:	d004      	beq.n	8005966 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005964:	d107      	bne.n	8005976 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005974:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800597e:	d10f      	bne.n	80059a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800599e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e010      	b.n	80059d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4013      	ands	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d196      	bne.n	8005902 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3728      	adds	r7, #40	@ 0x28
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000000 	.word	0x20000000

080059e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059f8:	d111      	bne.n	8005a1e <SPI_EndRxTransaction+0x3a>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a02:	d004      	beq.n	8005a0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a0c:	d107      	bne.n	8005a1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a1c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2200      	movs	r2, #0
 8005a26:	2180      	movs	r1, #128	@ 0x80
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff febd 	bl	80057a8 <SPI_WaitFlagStateUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d007      	beq.n	8005a44 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a38:	f043 0220 	orr.w	r2, r3, #32
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e023      	b.n	8005a8c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a4c:	d11d      	bne.n	8005a8a <SPI_EndRxTransaction+0xa6>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a56:	d004      	beq.n	8005a62 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a60:	d113      	bne.n	8005a8a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff ff22 	bl	80058b8 <SPI_WaitFifoStateUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a7e:	f043 0220 	orr.w	r2, r3, #32
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e000      	b.n	8005a8c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7ff ff03 	bl	80058b8 <SPI_WaitFifoStateUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005abc:	f043 0220 	orr.w	r2, r3, #32
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e027      	b.n	8005b18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2180      	movs	r1, #128	@ 0x80
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f7ff fe68 	bl	80057a8 <SPI_WaitFlagStateUntilTimeout>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae2:	f043 0220 	orr.w	r2, r3, #32
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e014      	b.n	8005b18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff fedc 	bl	80058b8 <SPI_WaitFifoStateUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b0a:	f043 0220 	orr.w	r2, r3, #32
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e000      	b.n	8005b18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e040      	b.n	8005bb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fb fd6c 	bl	8001620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2224      	movs	r2, #36	@ 0x24
 8005b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0201 	bic.w	r2, r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f8b6 	bl	8005cd0 <UART_SetConfig>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e022      	b.n	8005bb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f9e0 	bl	8005f3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fa67 	bl	8006080 <UART_CheckIdleState>
 8005bb2:	4603      	mov	r3, r0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08a      	sub	sp, #40	@ 0x28
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d177      	bne.n	8005cc4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_UART_Transmit+0x24>
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e070      	b.n	8005cc6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2221      	movs	r2, #33	@ 0x21
 8005bf0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bf2:	f7fb fedd 	bl	80019b0 <HAL_GetTick>
 8005bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	88fa      	ldrh	r2, [r7, #6]
 8005bfc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c10:	d108      	bne.n	8005c24 <HAL_UART_Transmit+0x68>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	e003      	b.n	8005c2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c2c:	e02f      	b.n	8005c8e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2180      	movs	r1, #128	@ 0x80
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 fac9 	bl	80061d0 <UART_WaitOnFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d004      	beq.n	8005c4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e03b      	b.n	8005cc6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10b      	bne.n	8005c6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	881a      	ldrh	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c60:	b292      	uxth	r2, r2
 8005c62:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	3302      	adds	r3, #2
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	e007      	b.n	8005c7c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	781a      	ldrb	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1c9      	bne.n	8005c2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2140      	movs	r1, #64	@ 0x40
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fa93 	bl	80061d0 <UART_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e005      	b.n	8005cc6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3720      	adds	r7, #32
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4b8a      	ldr	r3, [pc, #552]	@ (8005f24 <UART_SetConfig+0x254>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	6979      	ldr	r1, [r7, #20]
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a78      	ldr	r2, [pc, #480]	@ (8005f28 <UART_SetConfig+0x258>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d120      	bne.n	8005d8e <UART_SetConfig+0xbe>
 8005d4c:	4b77      	ldr	r3, [pc, #476]	@ (8005f2c <UART_SetConfig+0x25c>)
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d817      	bhi.n	8005d88 <UART_SetConfig+0xb8>
 8005d58:	a201      	add	r2, pc, #4	@ (adr r2, 8005d60 <UART_SetConfig+0x90>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005d71 	.word	0x08005d71
 8005d64:	08005d7d 	.word	0x08005d7d
 8005d68:	08005d83 	.word	0x08005d83
 8005d6c:	08005d77 	.word	0x08005d77
 8005d70:	2300      	movs	r3, #0
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e01d      	b.n	8005db2 <UART_SetConfig+0xe2>
 8005d76:	2302      	movs	r3, #2
 8005d78:	77fb      	strb	r3, [r7, #31]
 8005d7a:	e01a      	b.n	8005db2 <UART_SetConfig+0xe2>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	77fb      	strb	r3, [r7, #31]
 8005d80:	e017      	b.n	8005db2 <UART_SetConfig+0xe2>
 8005d82:	2308      	movs	r3, #8
 8005d84:	77fb      	strb	r3, [r7, #31]
 8005d86:	e014      	b.n	8005db2 <UART_SetConfig+0xe2>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	77fb      	strb	r3, [r7, #31]
 8005d8c:	e011      	b.n	8005db2 <UART_SetConfig+0xe2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a67      	ldr	r2, [pc, #412]	@ (8005f30 <UART_SetConfig+0x260>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d102      	bne.n	8005d9e <UART_SetConfig+0xce>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	e009      	b.n	8005db2 <UART_SetConfig+0xe2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a64      	ldr	r2, [pc, #400]	@ (8005f34 <UART_SetConfig+0x264>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d102      	bne.n	8005dae <UART_SetConfig+0xde>
 8005da8:	2300      	movs	r3, #0
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e001      	b.n	8005db2 <UART_SetConfig+0xe2>
 8005dae:	2310      	movs	r3, #16
 8005db0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dba:	d15a      	bne.n	8005e72 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005dbc:	7ffb      	ldrb	r3, [r7, #31]
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d827      	bhi.n	8005e12 <UART_SetConfig+0x142>
 8005dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc8 <UART_SetConfig+0xf8>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005ded 	.word	0x08005ded
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005dfd 	.word	0x08005dfd
 8005dd4:	08005e13 	.word	0x08005e13
 8005dd8:	08005e03 	.word	0x08005e03
 8005ddc:	08005e13 	.word	0x08005e13
 8005de0:	08005e13 	.word	0x08005e13
 8005de4:	08005e13 	.word	0x08005e13
 8005de8:	08005e0b 	.word	0x08005e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dec:	f7fe ff76 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 8005df0:	61b8      	str	r0, [r7, #24]
        break;
 8005df2:	e013      	b.n	8005e1c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df4:	f7fe ff94 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 8005df8:	61b8      	str	r0, [r7, #24]
        break;
 8005dfa:	e00f      	b.n	8005e1c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8005f38 <UART_SetConfig+0x268>)
 8005dfe:	61bb      	str	r3, [r7, #24]
        break;
 8005e00:	e00c      	b.n	8005e1c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e02:	f7fe fef5 	bl	8004bf0 <HAL_RCC_GetSysClockFreq>
 8005e06:	61b8      	str	r0, [r7, #24]
        break;
 8005e08:	e008      	b.n	8005e1c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e0e:	61bb      	str	r3, [r7, #24]
        break;
 8005e10:	e004      	b.n	8005e1c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	77bb      	strb	r3, [r7, #30]
        break;
 8005e1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d074      	beq.n	8005f0c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	005a      	lsls	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	085b      	lsrs	r3, r3, #1
 8005e2c:	441a      	add	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b0f      	cmp	r3, #15
 8005e3c:	d916      	bls.n	8005e6c <UART_SetConfig+0x19c>
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e44:	d212      	bcs.n	8005e6c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f023 030f 	bic.w	r3, r3, #15
 8005e4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	89fb      	ldrh	r3, [r7, #14]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	89fa      	ldrh	r2, [r7, #14]
 8005e68:	60da      	str	r2, [r3, #12]
 8005e6a:	e04f      	b.n	8005f0c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	77bb      	strb	r3, [r7, #30]
 8005e70:	e04c      	b.n	8005f0c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e72:	7ffb      	ldrb	r3, [r7, #31]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d828      	bhi.n	8005eca <UART_SetConfig+0x1fa>
 8005e78:	a201      	add	r2, pc, #4	@ (adr r2, 8005e80 <UART_SetConfig+0x1b0>)
 8005e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7e:	bf00      	nop
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ead 	.word	0x08005ead
 8005e88:	08005eb5 	.word	0x08005eb5
 8005e8c:	08005ecb 	.word	0x08005ecb
 8005e90:	08005ebb 	.word	0x08005ebb
 8005e94:	08005ecb 	.word	0x08005ecb
 8005e98:	08005ecb 	.word	0x08005ecb
 8005e9c:	08005ecb 	.word	0x08005ecb
 8005ea0:	08005ec3 	.word	0x08005ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ea4:	f7fe ff1a 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 8005ea8:	61b8      	str	r0, [r7, #24]
        break;
 8005eaa:	e013      	b.n	8005ed4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eac:	f7fe ff38 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 8005eb0:	61b8      	str	r0, [r7, #24]
        break;
 8005eb2:	e00f      	b.n	8005ed4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb4:	4b20      	ldr	r3, [pc, #128]	@ (8005f38 <UART_SetConfig+0x268>)
 8005eb6:	61bb      	str	r3, [r7, #24]
        break;
 8005eb8:	e00c      	b.n	8005ed4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eba:	f7fe fe99 	bl	8004bf0 <HAL_RCC_GetSysClockFreq>
 8005ebe:	61b8      	str	r0, [r7, #24]
        break;
 8005ec0:	e008      	b.n	8005ed4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ec6:	61bb      	str	r3, [r7, #24]
        break;
 8005ec8:	e004      	b.n	8005ed4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ed2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d018      	beq.n	8005f0c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	085a      	lsrs	r2, r3, #1
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	441a      	add	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b0f      	cmp	r3, #15
 8005ef2:	d909      	bls.n	8005f08 <UART_SetConfig+0x238>
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005efa:	d205      	bcs.n	8005f08 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60da      	str	r2, [r3, #12]
 8005f06:	e001      	b.n	8005f0c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005f18:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3720      	adds	r7, #32
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	efff69f3 	.word	0xefff69f3
 8005f28:	40013800 	.word	0x40013800
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40004400 	.word	0x40004400
 8005f34:	40004800 	.word	0x40004800
 8005f38:	007a1200 	.word	0x007a1200

08005f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01a      	beq.n	8006052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800603a:	d10a      	bne.n	8006052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	605a      	str	r2, [r3, #4]
  }
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b098      	sub	sp, #96	@ 0x60
 8006084:	af02      	add	r7, sp, #8
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006090:	f7fb fc8e 	bl	80019b0 <HAL_GetTick>
 8006094:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d12e      	bne.n	8006102 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ac:	2200      	movs	r2, #0
 80060ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f88c 	bl	80061d0 <UART_WaitOnFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d021      	beq.n	8006102 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80060de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e6      	bne.n	80060be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e062      	b.n	80061c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b04      	cmp	r3, #4
 800610e:	d149      	bne.n	80061a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006110:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006118:	2200      	movs	r2, #0
 800611a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f856 	bl	80061d0 <UART_WaitOnFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d03c      	beq.n	80061a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	623b      	str	r3, [r7, #32]
   return(result);
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800613e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006148:	633b      	str	r3, [r7, #48]	@ 0x30
 800614a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800614e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e6      	bne.n	800612a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3308      	adds	r3, #8
 8006162:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	e853 3f00 	ldrex	r3, [r3]
 800616a:	60fb      	str	r3, [r7, #12]
   return(result);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0301 	bic.w	r3, r3, #1
 8006172:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3308      	adds	r3, #8
 800617a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800617c:	61fa      	str	r2, [r7, #28]
 800617e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	69b9      	ldr	r1, [r7, #24]
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	617b      	str	r3, [r7, #20]
   return(result);
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e5      	bne.n	800615c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e011      	b.n	80061c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3758      	adds	r7, #88	@ 0x58
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	4613      	mov	r3, r2
 80061de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e0:	e049      	b.n	8006276 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d045      	beq.n	8006276 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ea:	f7fb fbe1 	bl	80019b0 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d302      	bcc.n	8006200 <UART_WaitOnFlagUntilTimeout+0x30>
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e048      	b.n	8006296 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	d031      	beq.n	8006276 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	2b08      	cmp	r3, #8
 800621e:	d110      	bne.n	8006242 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2208      	movs	r2, #8
 8006226:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 f838 	bl	800629e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2208      	movs	r2, #8
 8006232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e029      	b.n	8006296 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800624c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006250:	d111      	bne.n	8006276 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800625a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f81e 	bl	800629e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e00f      	b.n	8006296 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4013      	ands	r3, r2
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	bf0c      	ite	eq
 8006286:	2301      	moveq	r3, #1
 8006288:	2300      	movne	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	429a      	cmp	r2, r3
 8006292:	d0a6      	beq.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800629e:	b480      	push	{r7}
 80062a0:	b095      	sub	sp, #84	@ 0x54
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ae:	e853 3f00 	ldrex	r3, [r3]
 80062b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80062c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e6      	bne.n	80062a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3308      	adds	r3, #8
 80062de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	e853 3f00 	ldrex	r3, [r3]
 80062e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f023 0301 	bic.w	r3, r3, #1
 80062ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3308      	adds	r3, #8
 80062f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006300:	e841 2300 	strex	r3, r2, [r1]
 8006304:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e5      	bne.n	80062d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006310:	2b01      	cmp	r3, #1
 8006312:	d118      	bne.n	8006346 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	60bb      	str	r3, [r7, #8]
   return(result);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f023 0310 	bic.w	r3, r3, #16
 8006328:	647b      	str	r3, [r7, #68]	@ 0x44
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006332:	61bb      	str	r3, [r7, #24]
 8006334:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	6979      	ldr	r1, [r7, #20]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	613b      	str	r3, [r7, #16]
   return(result);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e6      	bne.n	8006314 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800635a:	bf00      	nop
 800635c:	3754      	adds	r7, #84	@ 0x54
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e03c      	b.n	80063f2 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d106      	bne.n	8006392 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7fb f903 	bl	8001598 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2202      	movs	r2, #2
 8006396:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0201 	bic.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f85c 	bl	8006468 <USART_SetConfig>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e01b      	b.n	80063f2 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063c8:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063d8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0201 	orr.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f942 	bl	8006674 <USART_CheckIdleState>
 80063f0:	4603      	mov	r3, r0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	603b      	str	r3, [r7, #0]
 8006406:	4613      	mov	r3, r2
 8006408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800640a:	e018      	b.n	800643e <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006412:	d014      	beq.n	800643e <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006414:	f7fb facc 	bl	80019b0 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	429a      	cmp	r2, r3
 8006422:	d302      	bcc.n	800642a <USART_WaitOnFlagUntilTimeout+0x30>
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d109      	bne.n	800643e <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e00f      	b.n	800645e <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69da      	ldr	r2, [r3, #28]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4013      	ands	r3, r2
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	bf0c      	ite	eq
 800644e:	2301      	moveq	r3, #1
 8006450:	2300      	movne	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	429a      	cmp	r2, r3
 800645a:	d0d7      	beq.n	800640c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8006474:	2300      	movs	r3, #0
 8006476:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	4313      	orrs	r3, r2
 8006488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800648c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4b72      	ldr	r3, [pc, #456]	@ (8006660 <USART_SetConfig+0x1f8>)
 8006496:	4013      	ands	r3, r2
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6812      	ldr	r2, [r2, #0]
 800649c:	6979      	ldr	r1, [r7, #20]
 800649e:	430b      	orrs	r3, r1
 80064a0:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80064a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80064a6:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	430a      	orrs	r2, r1
 80064de:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a5f      	ldr	r2, [pc, #380]	@ (8006664 <USART_SetConfig+0x1fc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d11f      	bne.n	800652a <USART_SetConfig+0xc2>
 80064ea:	4b5f      	ldr	r3, [pc, #380]	@ (8006668 <USART_SetConfig+0x200>)
 80064ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d816      	bhi.n	8006524 <USART_SetConfig+0xbc>
 80064f6:	a201      	add	r2, pc, #4	@ (adr r2, 80064fc <USART_SetConfig+0x94>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	08006519 	.word	0x08006519
 8006504:	0800651f 	.word	0x0800651f
 8006508:	08006513 	.word	0x08006513
 800650c:	2300      	movs	r3, #0
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e01d      	b.n	800654e <USART_SetConfig+0xe6>
 8006512:	2302      	movs	r3, #2
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e01a      	b.n	800654e <USART_SetConfig+0xe6>
 8006518:	2304      	movs	r3, #4
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e017      	b.n	800654e <USART_SetConfig+0xe6>
 800651e:	2308      	movs	r3, #8
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e014      	b.n	800654e <USART_SetConfig+0xe6>
 8006524:	2310      	movs	r3, #16
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e011      	b.n	800654e <USART_SetConfig+0xe6>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a4f      	ldr	r2, [pc, #316]	@ (800666c <USART_SetConfig+0x204>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d102      	bne.n	800653a <USART_SetConfig+0xd2>
 8006534:	2300      	movs	r3, #0
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e009      	b.n	800654e <USART_SetConfig+0xe6>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a4c      	ldr	r2, [pc, #304]	@ (8006670 <USART_SetConfig+0x208>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d102      	bne.n	800654a <USART_SetConfig+0xe2>
 8006544:	2300      	movs	r3, #0
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	e001      	b.n	800654e <USART_SetConfig+0xe6>
 800654a:	2310      	movs	r3, #16
 800654c:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800654e:	7ffb      	ldrb	r3, [r7, #31]
 8006550:	2b08      	cmp	r3, #8
 8006552:	d85a      	bhi.n	800660a <USART_SetConfig+0x1a2>
 8006554:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <USART_SetConfig+0xf4>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	08006581 	.word	0x08006581
 8006560:	0800659f 	.word	0x0800659f
 8006564:	080065bd 	.word	0x080065bd
 8006568:	0800660b 	.word	0x0800660b
 800656c:	080065d7 	.word	0x080065d7
 8006570:	0800660b 	.word	0x0800660b
 8006574:	0800660b 	.word	0x0800660b
 8006578:	0800660b 	.word	0x0800660b
 800657c:	080065f5 	.word	0x080065f5
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8006580:	f7fe fbac 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 8006584:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	005a      	lsls	r2, r3, #1
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	441a      	add	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	fbb2 f3f3 	udiv	r3, r2, r3
 800659a:	61bb      	str	r3, [r7, #24]
      break;
 800659c:	e038      	b.n	8006610 <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800659e:	f7fe fbbf 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 80065a2:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	005a      	lsls	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	085b      	lsrs	r3, r3, #1
 80065ae:	441a      	add	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b8:	61bb      	str	r3, [r7, #24]
      break;
 80065ba:	e029      	b.n	8006610 <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	085b      	lsrs	r3, r3, #1
 80065c2:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 80065c6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6852      	ldr	r2, [r2, #4]
 80065ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d2:	61bb      	str	r3, [r7, #24]
      break;
 80065d4:	e01c      	b.n	8006610 <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80065d6:	f7fe fb0b 	bl	8004bf0 <HAL_RCC_GetSysClockFreq>
 80065da:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	005a      	lsls	r2, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	441a      	add	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f0:	61bb      	str	r3, [r7, #24]
      break;
 80065f2:	e00d      	b.n	8006610 <USART_SetConfig+0x1a8>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	fbb2 f3f3 	udiv	r3, r2, r3
 8006606:	61bb      	str	r3, [r7, #24]
      break;
 8006608:	e002      	b.n	8006610 <USART_SetConfig+0x1a8>
    default:
      ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	77bb      	strb	r3, [r7, #30]
      break;
 800660e:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	2b0f      	cmp	r3, #15
 8006614:	d916      	bls.n	8006644 <USART_SetConfig+0x1dc>
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800661c:	d212      	bcs.n	8006644 <USART_SetConfig+0x1dc>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	b29b      	uxth	r3, r3
 8006622:	f023 030f 	bic.w	r3, r3, #15
 8006626:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	b29b      	uxth	r3, r3
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	b29a      	uxth	r2, r3
 8006634:	89fb      	ldrh	r3, [r7, #14]
 8006636:	4313      	orrs	r3, r2
 8006638:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	89fa      	ldrh	r2, [r7, #14]
 8006640:	60da      	str	r2, [r3, #12]
 8006642:	e001      	b.n	8006648 <USART_SetConfig+0x1e0>
  }
  else
  {
    ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	639a      	str	r2, [r3, #56]	@ 0x38
  husart->TxISR   = NULL;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ret;
 8006654:	7fbb      	ldrb	r3, [r7, #30]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3720      	adds	r7, #32
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	efff69f3 	.word	0xefff69f3
 8006664:	40013800 	.word	0x40013800
 8006668:	40021000 	.word	0x40021000
 800666c:	40004400 	.word	0x40004400
 8006670:	40004800 	.word	0x40004800

08006674 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af02      	add	r7, sp, #8
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006682:	f7fb f995 	bl	80019b0 <HAL_GetTick>
 8006686:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b08      	cmp	r3, #8
 8006694:	d10e      	bne.n	80066b4 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8006696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff fea8 	bl	80063fa <USART_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e01e      	b.n	80066f2 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d10e      	bne.n	80066e0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80066c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff fe92 	bl	80063fa <USART_WaitOnFlagUntilTimeout>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e008      	b.n	80066f2 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006702:	f3ef 8305 	mrs	r3, IPSR
 8006706:	60bb      	str	r3, [r7, #8]
  return(result);
 8006708:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10f      	bne.n	800672e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800670e:	f3ef 8310 	mrs	r3, PRIMASK
 8006712:	607b      	str	r3, [r7, #4]
  return(result);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <osKernelInitialize+0x32>
 800671a:	4b11      	ldr	r3, [pc, #68]	@ (8006760 <osKernelInitialize+0x64>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d109      	bne.n	8006736 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006722:	f3ef 8311 	mrs	r3, BASEPRI
 8006726:	603b      	str	r3, [r7, #0]
  return(result);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800672e:	f06f 0305 	mvn.w	r3, #5
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e00c      	b.n	8006750 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006736:	4b0a      	ldr	r3, [pc, #40]	@ (8006760 <osKernelInitialize+0x64>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d105      	bne.n	800674a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800673e:	4b08      	ldr	r3, [pc, #32]	@ (8006760 <osKernelInitialize+0x64>)
 8006740:	2201      	movs	r2, #1
 8006742:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	e002      	b.n	8006750 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800674a:	f04f 33ff 	mov.w	r3, #4294967295
 800674e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006750:	68fb      	ldr	r3, [r7, #12]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	200003e0 	.word	0x200003e0

08006764 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800676a:	f3ef 8305 	mrs	r3, IPSR
 800676e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006770:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10f      	bne.n	8006796 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006776:	f3ef 8310 	mrs	r3, PRIMASK
 800677a:	607b      	str	r3, [r7, #4]
  return(result);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <osKernelStart+0x32>
 8006782:	4b11      	ldr	r3, [pc, #68]	@ (80067c8 <osKernelStart+0x64>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d109      	bne.n	800679e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800678a:	f3ef 8311 	mrs	r3, BASEPRI
 800678e:	603b      	str	r3, [r7, #0]
  return(result);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006796:	f06f 0305 	mvn.w	r3, #5
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	e00e      	b.n	80067bc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800679e:	4b0a      	ldr	r3, [pc, #40]	@ (80067c8 <osKernelStart+0x64>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d107      	bne.n	80067b6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80067a6:	4b08      	ldr	r3, [pc, #32]	@ (80067c8 <osKernelStart+0x64>)
 80067a8:	2202      	movs	r2, #2
 80067aa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80067ac:	f001 f898 	bl	80078e0 <vTaskStartScheduler>
      stat = osOK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	e002      	b.n	80067bc <osKernelStart+0x58>
    } else {
      stat = osError;
 80067b6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80067bc:	68fb      	ldr	r3, [r7, #12]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	200003e0 	.word	0x200003e0

080067cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b092      	sub	sp, #72	@ 0x48
 80067d0:	af04      	add	r7, sp, #16
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067dc:	f3ef 8305 	mrs	r3, IPSR
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 8094 	bne.w	8006912 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ea:	f3ef 8310 	mrs	r3, PRIMASK
 80067ee:	623b      	str	r3, [r7, #32]
  return(result);
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f040 808d 	bne.w	8006912 <osThreadNew+0x146>
 80067f8:	4b48      	ldr	r3, [pc, #288]	@ (800691c <osThreadNew+0x150>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d106      	bne.n	800680e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006800:	f3ef 8311 	mrs	r3, BASEPRI
 8006804:	61fb      	str	r3, [r7, #28]
  return(result);
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	2b00      	cmp	r3, #0
 800680a:	f040 8082 	bne.w	8006912 <osThreadNew+0x146>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d07e      	beq.n	8006912 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006814:	2380      	movs	r3, #128	@ 0x80
 8006816:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006818:	2318      	movs	r3, #24
 800681a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800681c:	2300      	movs	r3, #0
 800681e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006820:	f107 031b 	add.w	r3, r7, #27
 8006824:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8006826:	f04f 33ff 	mov.w	r3, #4294967295
 800682a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d045      	beq.n	80068be <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <osThreadNew+0x74>
        name = attr->name;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800684e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d008      	beq.n	8006866 <osThreadNew+0x9a>
 8006854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006856:	2b38      	cmp	r3, #56	@ 0x38
 8006858:	d805      	bhi.n	8006866 <osThreadNew+0x9a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <osThreadNew+0x9e>
        return (NULL);
 8006866:	2300      	movs	r3, #0
 8006868:	e054      	b.n	8006914 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	089b      	lsrs	r3, r3, #2
 8006878:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00e      	beq.n	80068a0 <osThreadNew+0xd4>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	2b5b      	cmp	r3, #91	@ 0x5b
 8006888:	d90a      	bls.n	80068a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800688e:	2b00      	cmp	r3, #0
 8006890:	d006      	beq.n	80068a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <osThreadNew+0xd4>
        mem = 1;
 800689a:	2301      	movs	r3, #1
 800689c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800689e:	e010      	b.n	80068c2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10c      	bne.n	80068c2 <osThreadNew+0xf6>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d108      	bne.n	80068c2 <osThreadNew+0xf6>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <osThreadNew+0xf6>
          mem = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068bc:	e001      	b.n	80068c2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80068c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d110      	bne.n	80068ea <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068d0:	9202      	str	r2, [sp, #8]
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 fe2c 	bl	800753c <xTaskCreateStatic>
 80068e4:	4603      	mov	r3, r0
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e013      	b.n	8006912 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80068ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d110      	bne.n	8006912 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	f107 0314 	add.w	r3, r7, #20
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 fe79 	bl	80075fa <xTaskCreate>
 8006908:	4603      	mov	r3, r0
 800690a:	2b01      	cmp	r3, #1
 800690c:	d001      	beq.n	8006912 <osThreadNew+0x146>
          hTask = NULL;
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006912:	697b      	ldr	r3, [r7, #20]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3738      	adds	r7, #56	@ 0x38
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	200003e0 	.word	0x200003e0

08006920 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006928:	f3ef 8305 	mrs	r3, IPSR
 800692c:	613b      	str	r3, [r7, #16]
  return(result);
 800692e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10f      	bne.n	8006954 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006934:	f3ef 8310 	mrs	r3, PRIMASK
 8006938:	60fb      	str	r3, [r7, #12]
  return(result);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <osDelay+0x34>
 8006940:	4b0d      	ldr	r3, [pc, #52]	@ (8006978 <osDelay+0x58>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b02      	cmp	r3, #2
 8006946:	d109      	bne.n	800695c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006948:	f3ef 8311 	mrs	r3, BASEPRI
 800694c:	60bb      	str	r3, [r7, #8]
  return(result);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <osDelay+0x3c>
    stat = osErrorISR;
 8006954:	f06f 0305 	mvn.w	r3, #5
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	e007      	b.n	800696c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 ff84 	bl	8007874 <vTaskDelay>
    }
  }

  return (stat);
 800696c:	697b      	ldr	r3, [r7, #20]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	200003e0 	.word	0x200003e0

0800697c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4a07      	ldr	r2, [pc, #28]	@ (80069a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800698c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4a06      	ldr	r2, [pc, #24]	@ (80069ac <vApplicationGetIdleTaskMemory+0x30>)
 8006992:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2280      	movs	r2, #128	@ 0x80
 8006998:	601a      	str	r2, [r3, #0]
}
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	200003e4 	.word	0x200003e4
 80069ac:	20000440 	.word	0x20000440

080069b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4a07      	ldr	r2, [pc, #28]	@ (80069dc <vApplicationGetTimerTaskMemory+0x2c>)
 80069c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	4a06      	ldr	r2, [pc, #24]	@ (80069e0 <vApplicationGetTimerTaskMemory+0x30>)
 80069c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069ce:	601a      	str	r2, [r3, #0]
}
 80069d0:	bf00      	nop
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20000640 	.word	0x20000640
 80069e0:	2000069c 	.word	0x2000069c

080069e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f103 0208 	add.w	r2, r3, #8
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f04f 32ff 	mov.w	r2, #4294967295
 80069fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f103 0208 	add.w	r2, r3, #8
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f103 0208 	add.w	r2, r3, #8
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b085      	sub	sp, #20
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	601a      	str	r2, [r3, #0]
}
 8006a7a:	bf00      	nop
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9c:	d103      	bne.n	8006aa6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	e00c      	b.n	8006ac0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	e002      	b.n	8006ab4 <vListInsert+0x2e>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d2f6      	bcs.n	8006aae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	601a      	str	r2, [r3, #0]
}
 8006aec:	bf00      	nop
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6892      	ldr	r2, [r2, #8]
 8006b0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6852      	ldr	r2, [r2, #4]
 8006b18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d103      	bne.n	8006b2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	1e5a      	subs	r2, r3, #1
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10b      	bne.n	8006b78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b72:	bf00      	nop
 8006b74:	bf00      	nop
 8006b76:	e7fd      	b.n	8006b74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b78:	f002 f83e 	bl	8008bf8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b84:	68f9      	ldr	r1, [r7, #12]
 8006b86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	441a      	add	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	68f9      	ldr	r1, [r7, #12]
 8006bac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	441a      	add	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	22ff      	movs	r2, #255	@ 0xff
 8006bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	22ff      	movs	r2, #255	@ 0xff
 8006bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d114      	bne.n	8006bf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d01a      	beq.n	8006c0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3310      	adds	r3, #16
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f001 f914 	bl	8007e08 <xTaskRemoveFromEventList>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d012      	beq.n	8006c0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006be6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c1c <xQueueGenericReset+0xd0>)
 8006be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	e009      	b.n	8006c0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3310      	adds	r3, #16
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fef1 	bl	80069e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3324      	adds	r3, #36	@ 0x24
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff feec 	bl	80069e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c0c:	f002 f826 	bl	8008c5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c10:	2301      	movs	r3, #1
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08e      	sub	sp, #56	@ 0x38
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10b      	bne.n	8006c4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c46:	bf00      	nop
 8006c48:	bf00      	nop
 8006c4a:	e7fd      	b.n	8006c48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10b      	bne.n	8006c6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop
 8006c68:	e7fd      	b.n	8006c66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <xQueueGenericCreateStatic+0x56>
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <xQueueGenericCreateStatic+0x5a>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <xQueueGenericCreateStatic+0x5c>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10b      	bne.n	8006c98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	623b      	str	r3, [r7, #32]
}
 8006c92:	bf00      	nop
 8006c94:	bf00      	nop
 8006c96:	e7fd      	b.n	8006c94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d102      	bne.n	8006ca4 <xQueueGenericCreateStatic+0x84>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <xQueueGenericCreateStatic+0x88>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e000      	b.n	8006caa <xQueueGenericCreateStatic+0x8a>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10b      	bne.n	8006cc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	61fb      	str	r3, [r7, #28]
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	e7fd      	b.n	8006cc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cc6:	2350      	movs	r3, #80	@ 0x50
 8006cc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b50      	cmp	r3, #80	@ 0x50
 8006cce:	d00b      	beq.n	8006ce8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	61bb      	str	r3, [r7, #24]
}
 8006ce2:	bf00      	nop
 8006ce4:	bf00      	nop
 8006ce6:	e7fd      	b.n	8006ce4 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00d      	beq.n	8006d0e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cfa:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	4613      	mov	r3, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f805 	bl	8006d18 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3730      	adds	r7, #48	@ 0x30
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d103      	bne.n	8006d34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	e002      	b.n	8006d3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d46:	2101      	movs	r1, #1
 8006d48:	69b8      	ldr	r0, [r7, #24]
 8006d4a:	f7ff feff 	bl	8006b4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	78fa      	ldrb	r2, [r7, #3]
 8006d52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d56:	bf00      	nop
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08e      	sub	sp, #56	@ 0x38
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10b      	bne.n	8006d94 <xQueueGenericSend+0x34>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d8e:	bf00      	nop
 8006d90:	bf00      	nop
 8006d92:	e7fd      	b.n	8006d90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <xQueueGenericSend+0x42>
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <xQueueGenericSend+0x46>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <xQueueGenericSend+0x48>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10b      	bne.n	8006dc4 <xQueueGenericSend+0x64>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006dbe:	bf00      	nop
 8006dc0:	bf00      	nop
 8006dc2:	e7fd      	b.n	8006dc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d103      	bne.n	8006dd2 <xQueueGenericSend+0x72>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <xQueueGenericSend+0x76>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <xQueueGenericSend+0x78>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10b      	bne.n	8006df4 <xQueueGenericSend+0x94>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	623b      	str	r3, [r7, #32]
}
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
 8006df2:	e7fd      	b.n	8006df0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006df4:	f001 f9ce 	bl	8008194 <xTaskGetSchedulerState>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d102      	bne.n	8006e04 <xQueueGenericSend+0xa4>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <xQueueGenericSend+0xa8>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <xQueueGenericSend+0xaa>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10b      	bne.n	8006e26 <xQueueGenericSend+0xc6>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	61fb      	str	r3, [r7, #28]
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	e7fd      	b.n	8006e22 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e26:	f001 fee7 	bl	8008bf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d302      	bcc.n	8006e3c <xQueueGenericSend+0xdc>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d129      	bne.n	8006e90 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e42:	f000 fa0d 	bl	8007260 <prvCopyDataToQueue>
 8006e46:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d010      	beq.n	8006e72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e52:	3324      	adds	r3, #36	@ 0x24
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 ffd7 	bl	8007e08 <xTaskRemoveFromEventList>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d013      	beq.n	8006e88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e60:	4b3f      	ldr	r3, [pc, #252]	@ (8006f60 <xQueueGenericSend+0x200>)
 8006e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	e00a      	b.n	8006e88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e78:	4b39      	ldr	r3, [pc, #228]	@ (8006f60 <xQueueGenericSend+0x200>)
 8006e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e88:	f001 fee8 	bl	8008c5c <vPortExitCritical>
				return pdPASS;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e063      	b.n	8006f58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d103      	bne.n	8006e9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e96:	f001 fee1 	bl	8008c5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e05c      	b.n	8006f58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d106      	bne.n	8006eb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ea4:	f107 0314 	add.w	r3, r7, #20
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f001 f811 	bl	8007ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eb2:	f001 fed3 	bl	8008c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eb6:	f000 fd7b 	bl	80079b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eba:	f001 fe9d 	bl	8008bf8 <vPortEnterCritical>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ec4:	b25b      	sxtb	r3, r3
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eca:	d103      	bne.n	8006ed4 <xQueueGenericSend+0x174>
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eda:	b25b      	sxtb	r3, r3
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d103      	bne.n	8006eea <xQueueGenericSend+0x18a>
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006eea:	f001 feb7 	bl	8008c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006eee:	1d3a      	adds	r2, r7, #4
 8006ef0:	f107 0314 	add.w	r3, r7, #20
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 f800 	bl	8007efc <xTaskCheckForTimeOut>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d124      	bne.n	8006f4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f04:	f000 faa4 	bl	8007450 <prvIsQueueFull>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d018      	beq.n	8006f40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	3310      	adds	r3, #16
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	4611      	mov	r1, r2
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 ff24 	bl	8007d64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f1e:	f000 fa2f 	bl	8007380 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f22:	f000 fd53 	bl	80079cc <xTaskResumeAll>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f47f af7c 	bne.w	8006e26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f60 <xQueueGenericSend+0x200>)
 8006f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	e772      	b.n	8006e26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f42:	f000 fa1d 	bl	8007380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f46:	f000 fd41 	bl	80079cc <xTaskResumeAll>
 8006f4a:	e76c      	b.n	8006e26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f4e:	f000 fa17 	bl	8007380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f52:	f000 fd3b 	bl	80079cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f56:	2300      	movs	r3, #0
		}
	}
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3738      	adds	r7, #56	@ 0x38
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08e      	sub	sp, #56	@ 0x38
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10b      	bne.n	8006f94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f8e:	bf00      	nop
 8006f90:	bf00      	nop
 8006f92:	e7fd      	b.n	8006f90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d103      	bne.n	8006fa2 <xQueueGenericSendFromISR+0x3e>
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <xQueueGenericSendFromISR+0x42>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <xQueueGenericSendFromISR+0x44>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	623b      	str	r3, [r7, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	e7fd      	b.n	8006fc0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d103      	bne.n	8006fd2 <xQueueGenericSendFromISR+0x6e>
 8006fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d101      	bne.n	8006fd6 <xQueueGenericSendFromISR+0x72>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <xQueueGenericSendFromISR+0x74>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	61fb      	str	r3, [r7, #28]
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ff4:	f001 fee0 	bl	8008db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ff8:	f3ef 8211 	mrs	r2, BASEPRI
 8006ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	61ba      	str	r2, [r7, #24]
 800700e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007010:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007012:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800701c:	429a      	cmp	r2, r3
 800701e:	d302      	bcc.n	8007026 <xQueueGenericSendFromISR+0xc2>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b02      	cmp	r3, #2
 8007024:	d12c      	bne.n	8007080 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007028:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800702c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007036:	f000 f913 	bl	8007260 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800703a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007042:	d112      	bne.n	800706a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007048:	2b00      	cmp	r3, #0
 800704a:	d016      	beq.n	800707a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800704c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704e:	3324      	adds	r3, #36	@ 0x24
 8007050:	4618      	mov	r0, r3
 8007052:	f000 fed9 	bl	8007e08 <xTaskRemoveFromEventList>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00e      	beq.n	800707a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	e007      	b.n	800707a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800706a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800706e:	3301      	adds	r3, #1
 8007070:	b2db      	uxtb	r3, r3
 8007072:	b25a      	sxtb	r2, r3
 8007074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800707a:	2301      	movs	r3, #1
 800707c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800707e:	e001      	b.n	8007084 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007080:	2300      	movs	r3, #0
 8007082:	637b      	str	r3, [r7, #52]	@ 0x34
 8007084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007086:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800708e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007092:	4618      	mov	r0, r3
 8007094:	3738      	adds	r7, #56	@ 0x38
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08c      	sub	sp, #48	@ 0x30
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10b      	bne.n	80070ce <xQueueReceive+0x32>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	623b      	str	r3, [r7, #32]
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop
 80070cc:	e7fd      	b.n	80070ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <xQueueReceive+0x40>
 80070d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <xQueueReceive+0x44>
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <xQueueReceive+0x46>
 80070e0:	2300      	movs	r3, #0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10b      	bne.n	80070fe <xQueueReceive+0x62>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	61fb      	str	r3, [r7, #28]
}
 80070f8:	bf00      	nop
 80070fa:	bf00      	nop
 80070fc:	e7fd      	b.n	80070fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070fe:	f001 f849 	bl	8008194 <xTaskGetSchedulerState>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d102      	bne.n	800710e <xQueueReceive+0x72>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <xQueueReceive+0x76>
 800710e:	2301      	movs	r3, #1
 8007110:	e000      	b.n	8007114 <xQueueReceive+0x78>
 8007112:	2300      	movs	r3, #0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10b      	bne.n	8007130 <xQueueReceive+0x94>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	61bb      	str	r3, [r7, #24]
}
 800712a:	bf00      	nop
 800712c:	bf00      	nop
 800712e:	e7fd      	b.n	800712c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007130:	f001 fd62 	bl	8008bf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01f      	beq.n	8007180 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007144:	f000 f8f6 	bl	8007334 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	1e5a      	subs	r2, r3, #1
 800714c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00f      	beq.n	8007178 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715a:	3310      	adds	r3, #16
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fe53 	bl	8007e08 <xTaskRemoveFromEventList>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d007      	beq.n	8007178 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007168:	4b3c      	ldr	r3, [pc, #240]	@ (800725c <xQueueReceive+0x1c0>)
 800716a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007178:	f001 fd70 	bl	8008c5c <vPortExitCritical>
				return pdPASS;
 800717c:	2301      	movs	r3, #1
 800717e:	e069      	b.n	8007254 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d103      	bne.n	800718e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007186:	f001 fd69 	bl	8008c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800718a:	2300      	movs	r3, #0
 800718c:	e062      	b.n	8007254 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800718e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007194:	f107 0310 	add.w	r3, r7, #16
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fe99 	bl	8007ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800719e:	2301      	movs	r3, #1
 80071a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071a2:	f001 fd5b 	bl	8008c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071a6:	f000 fc03 	bl	80079b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071aa:	f001 fd25 	bl	8008bf8 <vPortEnterCritical>
 80071ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071b4:	b25b      	sxtb	r3, r3
 80071b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ba:	d103      	bne.n	80071c4 <xQueueReceive+0x128>
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071ca:	b25b      	sxtb	r3, r3
 80071cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d0:	d103      	bne.n	80071da <xQueueReceive+0x13e>
 80071d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071da:	f001 fd3f 	bl	8008c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071de:	1d3a      	adds	r2, r7, #4
 80071e0:	f107 0310 	add.w	r3, r7, #16
 80071e4:	4611      	mov	r1, r2
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 fe88 	bl	8007efc <xTaskCheckForTimeOut>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d123      	bne.n	800723a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071f4:	f000 f916 	bl	8007424 <prvIsQueueEmpty>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d017      	beq.n	800722e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	3324      	adds	r3, #36	@ 0x24
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	4611      	mov	r1, r2
 8007206:	4618      	mov	r0, r3
 8007208:	f000 fdac 	bl	8007d64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800720c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800720e:	f000 f8b7 	bl	8007380 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007212:	f000 fbdb 	bl	80079cc <xTaskResumeAll>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d189      	bne.n	8007130 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800721c:	4b0f      	ldr	r3, [pc, #60]	@ (800725c <xQueueReceive+0x1c0>)
 800721e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	e780      	b.n	8007130 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800722e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007230:	f000 f8a6 	bl	8007380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007234:	f000 fbca 	bl	80079cc <xTaskResumeAll>
 8007238:	e77a      	b.n	8007130 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800723a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800723c:	f000 f8a0 	bl	8007380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007240:	f000 fbc4 	bl	80079cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007244:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007246:	f000 f8ed 	bl	8007424 <prvIsQueueEmpty>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	f43f af6f 	beq.w	8007130 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007252:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007254:	4618      	mov	r0, r3
 8007256:	3730      	adds	r7, #48	@ 0x30
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	e000ed04 	.word	0xe000ed04

08007260 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007274:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10d      	bne.n	800729a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d14d      	bne.n	8007322 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 ffa0 	bl	80081d0 <xTaskPriorityDisinherit>
 8007290:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	605a      	str	r2, [r3, #4]
 8007298:	e043      	b.n	8007322 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d119      	bne.n	80072d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6898      	ldr	r0, [r3, #8]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a8:	461a      	mov	r2, r3
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	f002 fedb 	bl	800a066 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	441a      	add	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d32b      	bcc.n	8007322 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	609a      	str	r2, [r3, #8]
 80072d2:	e026      	b.n	8007322 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68d8      	ldr	r0, [r3, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072dc:	461a      	mov	r2, r3
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	f002 fec1 	bl	800a066 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ec:	425b      	negs	r3, r3
 80072ee:	441a      	add	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d207      	bcs.n	8007310 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007308:	425b      	negs	r3, r3
 800730a:	441a      	add	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b02      	cmp	r3, #2
 8007314:	d105      	bne.n	8007322 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	3b01      	subs	r3, #1
 8007320:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800732a:	697b      	ldr	r3, [r7, #20]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d018      	beq.n	8007378 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734e:	441a      	add	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	429a      	cmp	r2, r3
 800735e:	d303      	bcc.n	8007368 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68d9      	ldr	r1, [r3, #12]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007370:	461a      	mov	r2, r3
 8007372:	6838      	ldr	r0, [r7, #0]
 8007374:	f002 fe77 	bl	800a066 <memcpy>
	}
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007388:	f001 fc36 	bl	8008bf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007392:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007394:	e011      	b.n	80073ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739a:	2b00      	cmp	r3, #0
 800739c:	d012      	beq.n	80073c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3324      	adds	r3, #36	@ 0x24
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fd30 	bl	8007e08 <xTaskRemoveFromEventList>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073ae:	f000 fe09 	bl	8007fc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	dce9      	bgt.n	8007396 <prvUnlockQueue+0x16>
 80073c2:	e000      	b.n	80073c6 <prvUnlockQueue+0x46>
					break;
 80073c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	22ff      	movs	r2, #255	@ 0xff
 80073ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80073ce:	f001 fc45 	bl	8008c5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073d2:	f001 fc11 	bl	8008bf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073de:	e011      	b.n	8007404 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d012      	beq.n	800740e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3310      	adds	r3, #16
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fd0b 	bl	8007e08 <xTaskRemoveFromEventList>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073f8:	f000 fde4 	bl	8007fc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	3b01      	subs	r3, #1
 8007400:	b2db      	uxtb	r3, r3
 8007402:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007408:	2b00      	cmp	r3, #0
 800740a:	dce9      	bgt.n	80073e0 <prvUnlockQueue+0x60>
 800740c:	e000      	b.n	8007410 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800740e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	22ff      	movs	r2, #255	@ 0xff
 8007414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007418:	f001 fc20 	bl	8008c5c <vPortExitCritical>
}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800742c:	f001 fbe4 	bl	8008bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007438:	2301      	movs	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	e001      	b.n	8007442 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007442:	f001 fc0b 	bl	8008c5c <vPortExitCritical>

	return xReturn;
 8007446:	68fb      	ldr	r3, [r7, #12]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007458:	f001 fbce 	bl	8008bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007464:	429a      	cmp	r2, r3
 8007466:	d102      	bne.n	800746e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007468:	2301      	movs	r3, #1
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e001      	b.n	8007472 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007472:	f001 fbf3 	bl	8008c5c <vPortExitCritical>

	return xReturn;
 8007476:	68fb      	ldr	r3, [r7, #12]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	e014      	b.n	80074ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007490:	4a0f      	ldr	r2, [pc, #60]	@ (80074d0 <vQueueAddToRegistry+0x50>)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10b      	bne.n	80074b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800749c:	490c      	ldr	r1, [pc, #48]	@ (80074d0 <vQueueAddToRegistry+0x50>)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074a6:	4a0a      	ldr	r2, [pc, #40]	@ (80074d0 <vQueueAddToRegistry+0x50>)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	4413      	add	r3, r2
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074b2:	e006      	b.n	80074c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	3301      	adds	r3, #1
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b07      	cmp	r3, #7
 80074be:	d9e7      	bls.n	8007490 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20000a9c 	.word	0x20000a9c

080074d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80074e4:	f001 fb88 	bl	8008bf8 <vPortEnterCritical>
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074ee:	b25b      	sxtb	r3, r3
 80074f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f4:	d103      	bne.n	80074fe <vQueueWaitForMessageRestricted+0x2a>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007504:	b25b      	sxtb	r3, r3
 8007506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750a:	d103      	bne.n	8007514 <vQueueWaitForMessageRestricted+0x40>
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007514:	f001 fba2 	bl	8008c5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751c:	2b00      	cmp	r3, #0
 800751e:	d106      	bne.n	800752e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	3324      	adds	r3, #36	@ 0x24
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fc41 	bl	8007db0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800752e:	6978      	ldr	r0, [r7, #20]
 8007530:	f7ff ff26 	bl	8007380 <prvUnlockQueue>
	}
 8007534:	bf00      	nop
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08e      	sub	sp, #56	@ 0x38
 8007540:	af04      	add	r7, sp, #16
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800754a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10b      	bne.n	8007568 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	623b      	str	r3, [r7, #32]
}
 8007562:	bf00      	nop
 8007564:	bf00      	nop
 8007566:	e7fd      	b.n	8007564 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10b      	bne.n	8007586 <xTaskCreateStatic+0x4a>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	61fb      	str	r3, [r7, #28]
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	e7fd      	b.n	8007582 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007586:	235c      	movs	r3, #92	@ 0x5c
 8007588:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	2b5c      	cmp	r3, #92	@ 0x5c
 800758e:	d00b      	beq.n	80075a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	61bb      	str	r3, [r7, #24]
}
 80075a2:	bf00      	nop
 80075a4:	bf00      	nop
 80075a6:	e7fd      	b.n	80075a4 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01e      	beq.n	80075ec <xTaskCreateStatic+0xb0>
 80075ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01b      	beq.n	80075ec <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075bc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c0:	2202      	movs	r2, #2
 80075c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075c6:	2300      	movs	r3, #0
 80075c8:	9303      	str	r3, [sp, #12]
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	9302      	str	r3, [sp, #8]
 80075ce:	f107 0314 	add.w	r3, r7, #20
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 f850 	bl	8007684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80075e6:	f000 f8d5 	bl	8007794 <prvAddNewTaskToReadyList>
 80075ea:	e001      	b.n	80075f0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075f0:	697b      	ldr	r3, [r7, #20]
	}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3728      	adds	r7, #40	@ 0x28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b08c      	sub	sp, #48	@ 0x30
 80075fe:	af04      	add	r7, sp, #16
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	603b      	str	r3, [r7, #0]
 8007606:	4613      	mov	r3, r2
 8007608:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4618      	mov	r0, r3
 8007610:	f001 fc14 	bl	8008e3c <pvPortMalloc>
 8007614:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00e      	beq.n	800763a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800761c:	205c      	movs	r0, #92	@ 0x5c
 800761e:	f001 fc0d 	bl	8008e3c <pvPortMalloc>
 8007622:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007630:	e005      	b.n	800763e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007632:	6978      	ldr	r0, [r7, #20]
 8007634:	f001 fcca 	bl	8008fcc <vPortFree>
 8007638:	e001      	b.n	800763e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d017      	beq.n	8007674 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800764c:	88fa      	ldrh	r2, [r7, #6]
 800764e:	2300      	movs	r3, #0
 8007650:	9303      	str	r3, [sp, #12]
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	9302      	str	r3, [sp, #8]
 8007656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 f80e 	bl	8007684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007668:	69f8      	ldr	r0, [r7, #28]
 800766a:	f000 f893 	bl	8007794 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800766e:	2301      	movs	r3, #1
 8007670:	61bb      	str	r3, [r7, #24]
 8007672:	e002      	b.n	800767a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007674:	f04f 33ff 	mov.w	r3, #4294967295
 8007678:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800767a:	69bb      	ldr	r3, [r7, #24]
	}
 800767c:	4618      	mov	r0, r3
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	461a      	mov	r2, r3
 800769c:	21a5      	movs	r1, #165	@ 0xa5
 800769e:	f002 fc63 	bl	8009f68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076ac:	3b01      	subs	r3, #1
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	f023 0307 	bic.w	r3, r3, #7
 80076ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00b      	beq.n	80076de <prvInitialiseNewTask+0x5a>
	__asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	617b      	str	r3, [r7, #20]
}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	e7fd      	b.n	80076da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076de:	2300      	movs	r3, #0
 80076e0:	61fb      	str	r3, [r7, #28]
 80076e2:	e012      	b.n	800770a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	4413      	add	r3, r2
 80076ea:	7819      	ldrb	r1, [r3, #0]
 80076ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	4413      	add	r3, r2
 80076f2:	3334      	adds	r3, #52	@ 0x34
 80076f4:	460a      	mov	r2, r1
 80076f6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	4413      	add	r3, r2
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d006      	beq.n	8007712 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	3301      	adds	r3, #1
 8007708:	61fb      	str	r3, [r7, #28]
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	2b0f      	cmp	r3, #15
 800770e:	d9e9      	bls.n	80076e4 <prvInitialiseNewTask+0x60>
 8007710:	e000      	b.n	8007714 <prvInitialiseNewTask+0x90>
		{
			break;
 8007712:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800771c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771e:	2b37      	cmp	r3, #55	@ 0x37
 8007720:	d901      	bls.n	8007726 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007722:	2337      	movs	r3, #55	@ 0x37
 8007724:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800772a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800772c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007730:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	2200      	movs	r2, #0
 8007736:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	3304      	adds	r3, #4
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff f971 	bl	8006a24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	3318      	adds	r3, #24
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff f96c 	bl	8006a24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800774c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007750:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007754:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007760:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	2200      	movs	r2, #0
 8007766:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	68f9      	ldr	r1, [r7, #12]
 8007774:	69b8      	ldr	r0, [r7, #24]
 8007776:	f001 f90f 	bl	8008998 <pxPortInitialiseStack>
 800777a:	4602      	mov	r2, r0
 800777c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800778a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800778c:	bf00      	nop
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800779c:	f001 fa2c 	bl	8008bf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077a0:	4b2d      	ldr	r3, [pc, #180]	@ (8007858 <prvAddNewTaskToReadyList+0xc4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3301      	adds	r3, #1
 80077a6:	4a2c      	ldr	r2, [pc, #176]	@ (8007858 <prvAddNewTaskToReadyList+0xc4>)
 80077a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077aa:	4b2c      	ldr	r3, [pc, #176]	@ (800785c <prvAddNewTaskToReadyList+0xc8>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d109      	bne.n	80077c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077b2:	4a2a      	ldr	r2, [pc, #168]	@ (800785c <prvAddNewTaskToReadyList+0xc8>)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077b8:	4b27      	ldr	r3, [pc, #156]	@ (8007858 <prvAddNewTaskToReadyList+0xc4>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d110      	bne.n	80077e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077c0:	f000 fc24 	bl	800800c <prvInitialiseTaskLists>
 80077c4:	e00d      	b.n	80077e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077c6:	4b26      	ldr	r3, [pc, #152]	@ (8007860 <prvAddNewTaskToReadyList+0xcc>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d109      	bne.n	80077e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077ce:	4b23      	ldr	r3, [pc, #140]	@ (800785c <prvAddNewTaskToReadyList+0xc8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d8:	429a      	cmp	r2, r3
 80077da:	d802      	bhi.n	80077e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077dc:	4a1f      	ldr	r2, [pc, #124]	@ (800785c <prvAddNewTaskToReadyList+0xc8>)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077e2:	4b20      	ldr	r3, [pc, #128]	@ (8007864 <prvAddNewTaskToReadyList+0xd0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3301      	adds	r3, #1
 80077e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007864 <prvAddNewTaskToReadyList+0xd0>)
 80077ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007864 <prvAddNewTaskToReadyList+0xd0>)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007868 <prvAddNewTaskToReadyList+0xd4>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d903      	bls.n	8007808 <prvAddNewTaskToReadyList+0x74>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007804:	4a18      	ldr	r2, [pc, #96]	@ (8007868 <prvAddNewTaskToReadyList+0xd4>)
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780c:	4613      	mov	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4a15      	ldr	r2, [pc, #84]	@ (800786c <prvAddNewTaskToReadyList+0xd8>)
 8007816:	441a      	add	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3304      	adds	r3, #4
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f7ff f90d 	bl	8006a3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007824:	f001 fa1a 	bl	8008c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007828:	4b0d      	ldr	r3, [pc, #52]	@ (8007860 <prvAddNewTaskToReadyList+0xcc>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00e      	beq.n	800784e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007830:	4b0a      	ldr	r3, [pc, #40]	@ (800785c <prvAddNewTaskToReadyList+0xc8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783a:	429a      	cmp	r2, r3
 800783c:	d207      	bcs.n	800784e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800783e:	4b0c      	ldr	r3, [pc, #48]	@ (8007870 <prvAddNewTaskToReadyList+0xdc>)
 8007840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800784e:	bf00      	nop
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20000fb0 	.word	0x20000fb0
 800785c:	20000adc 	.word	0x20000adc
 8007860:	20000fbc 	.word	0x20000fbc
 8007864:	20000fcc 	.word	0x20000fcc
 8007868:	20000fb8 	.word	0x20000fb8
 800786c:	20000ae0 	.word	0x20000ae0
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d018      	beq.n	80078b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007886:	4b14      	ldr	r3, [pc, #80]	@ (80078d8 <vTaskDelay+0x64>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00b      	beq.n	80078a6 <vTaskDelay+0x32>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	60bb      	str	r3, [r7, #8]
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078a6:	f000 f883 	bl	80079b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078aa:	2100      	movs	r1, #0
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fcff 	bl	80082b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078b2:	f000 f88b 	bl	80079cc <xTaskResumeAll>
 80078b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d107      	bne.n	80078ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80078be:	4b07      	ldr	r3, [pc, #28]	@ (80078dc <vTaskDelay+0x68>)
 80078c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20000fd8 	.word	0x20000fd8
 80078dc:	e000ed04 	.word	0xe000ed04

080078e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	@ 0x28
 80078e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078ee:	463a      	mov	r2, r7
 80078f0:	1d39      	adds	r1, r7, #4
 80078f2:	f107 0308 	add.w	r3, r7, #8
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff f840 	bl	800697c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	9202      	str	r2, [sp, #8]
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	2300      	movs	r3, #0
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	2300      	movs	r3, #0
 800790c:	460a      	mov	r2, r1
 800790e:	4922      	ldr	r1, [pc, #136]	@ (8007998 <vTaskStartScheduler+0xb8>)
 8007910:	4822      	ldr	r0, [pc, #136]	@ (800799c <vTaskStartScheduler+0xbc>)
 8007912:	f7ff fe13 	bl	800753c <xTaskCreateStatic>
 8007916:	4603      	mov	r3, r0
 8007918:	4a21      	ldr	r2, [pc, #132]	@ (80079a0 <vTaskStartScheduler+0xc0>)
 800791a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800791c:	4b20      	ldr	r3, [pc, #128]	@ (80079a0 <vTaskStartScheduler+0xc0>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007924:	2301      	movs	r3, #1
 8007926:	617b      	str	r3, [r7, #20]
 8007928:	e001      	b.n	800792e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800792a:	2300      	movs	r3, #0
 800792c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d102      	bne.n	800793a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007934:	f000 fd10 	bl	8008358 <xTimerCreateTimerTask>
 8007938:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d116      	bne.n	800796e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	613b      	str	r3, [r7, #16]
}
 8007952:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007954:	4b13      	ldr	r3, [pc, #76]	@ (80079a4 <vTaskStartScheduler+0xc4>)
 8007956:	f04f 32ff 	mov.w	r2, #4294967295
 800795a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800795c:	4b12      	ldr	r3, [pc, #72]	@ (80079a8 <vTaskStartScheduler+0xc8>)
 800795e:	2201      	movs	r2, #1
 8007960:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007962:	4b12      	ldr	r3, [pc, #72]	@ (80079ac <vTaskStartScheduler+0xcc>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007968:	f001 f8a2 	bl	8008ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800796c:	e00f      	b.n	800798e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007974:	d10b      	bne.n	800798e <vTaskStartScheduler+0xae>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	60fb      	str	r3, [r7, #12]
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	e7fd      	b.n	800798a <vTaskStartScheduler+0xaa>
}
 800798e:	bf00      	nop
 8007990:	3718      	adds	r7, #24
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	0800c0d0 	.word	0x0800c0d0
 800799c:	08007fdd 	.word	0x08007fdd
 80079a0:	20000fd4 	.word	0x20000fd4
 80079a4:	20000fd0 	.word	0x20000fd0
 80079a8:	20000fbc 	.word	0x20000fbc
 80079ac:	20000fb4 	.word	0x20000fb4

080079b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80079b4:	4b04      	ldr	r3, [pc, #16]	@ (80079c8 <vTaskSuspendAll+0x18>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3301      	adds	r3, #1
 80079ba:	4a03      	ldr	r2, [pc, #12]	@ (80079c8 <vTaskSuspendAll+0x18>)
 80079bc:	6013      	str	r3, [r2, #0]
}
 80079be:	bf00      	nop
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	20000fd8 	.word	0x20000fd8

080079cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079da:	4b42      	ldr	r3, [pc, #264]	@ (8007ae4 <xTaskResumeAll+0x118>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10b      	bne.n	80079fa <xTaskResumeAll+0x2e>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	603b      	str	r3, [r7, #0]
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop
 80079f8:	e7fd      	b.n	80079f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079fa:	f001 f8fd 	bl	8008bf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079fe:	4b39      	ldr	r3, [pc, #228]	@ (8007ae4 <xTaskResumeAll+0x118>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	4a37      	ldr	r2, [pc, #220]	@ (8007ae4 <xTaskResumeAll+0x118>)
 8007a06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a08:	4b36      	ldr	r3, [pc, #216]	@ (8007ae4 <xTaskResumeAll+0x118>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d162      	bne.n	8007ad6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a10:	4b35      	ldr	r3, [pc, #212]	@ (8007ae8 <xTaskResumeAll+0x11c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d05e      	beq.n	8007ad6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a18:	e02f      	b.n	8007a7a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007a1a:	4b34      	ldr	r3, [pc, #208]	@ (8007aec <xTaskResumeAll+0x120>)
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3318      	adds	r3, #24
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7ff f866 	bl	8006af8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff f861 	bl	8006af8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8007af0 <xTaskResumeAll+0x124>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d903      	bls.n	8007a4a <xTaskResumeAll+0x7e>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a46:	4a2a      	ldr	r2, [pc, #168]	@ (8007af0 <xTaskResumeAll+0x124>)
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4a27      	ldr	r2, [pc, #156]	@ (8007af4 <xTaskResumeAll+0x128>)
 8007a58:	441a      	add	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4610      	mov	r0, r2
 8007a62:	f7fe ffec 	bl	8006a3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a6a:	4b23      	ldr	r3, [pc, #140]	@ (8007af8 <xTaskResumeAll+0x12c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d302      	bcc.n	8007a7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007a74:	4b21      	ldr	r3, [pc, #132]	@ (8007afc <xTaskResumeAll+0x130>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8007aec <xTaskResumeAll+0x120>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1cb      	bne.n	8007a1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a88:	f000 fb5e 	bl	8008148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007b00 <xTaskResumeAll+0x134>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d010      	beq.n	8007aba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a98:	f000 f846 	bl	8007b28 <xTaskIncrementTick>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007aa2:	4b16      	ldr	r3, [pc, #88]	@ (8007afc <xTaskResumeAll+0x130>)
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1f1      	bne.n	8007a98 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007ab4:	4b12      	ldr	r3, [pc, #72]	@ (8007b00 <xTaskResumeAll+0x134>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007aba:	4b10      	ldr	r3, [pc, #64]	@ (8007afc <xTaskResumeAll+0x130>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d009      	beq.n	8007ad6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b04 <xTaskResumeAll+0x138>)
 8007ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ad6:	f001 f8c1 	bl	8008c5c <vPortExitCritical>

	return xAlreadyYielded;
 8007ada:	68bb      	ldr	r3, [r7, #8]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20000fd8 	.word	0x20000fd8
 8007ae8:	20000fb0 	.word	0x20000fb0
 8007aec:	20000f70 	.word	0x20000f70
 8007af0:	20000fb8 	.word	0x20000fb8
 8007af4:	20000ae0 	.word	0x20000ae0
 8007af8:	20000adc 	.word	0x20000adc
 8007afc:	20000fc4 	.word	0x20000fc4
 8007b00:	20000fc0 	.word	0x20000fc0
 8007b04:	e000ed04 	.word	0xe000ed04

08007b08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b0e:	4b05      	ldr	r3, [pc, #20]	@ (8007b24 <xTaskGetTickCount+0x1c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b14:	687b      	ldr	r3, [r7, #4]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	20000fb4 	.word	0x20000fb4

08007b28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b32:	4b52      	ldr	r3, [pc, #328]	@ (8007c7c <xTaskIncrementTick+0x154>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 808f 	bne.w	8007c5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b3c:	4b50      	ldr	r3, [pc, #320]	@ (8007c80 <xTaskIncrementTick+0x158>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3301      	adds	r3, #1
 8007b42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b44:	4a4e      	ldr	r2, [pc, #312]	@ (8007c80 <xTaskIncrementTick+0x158>)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d121      	bne.n	8007b94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b50:	4b4c      	ldr	r3, [pc, #304]	@ (8007c84 <xTaskIncrementTick+0x15c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00b      	beq.n	8007b72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	603b      	str	r3, [r7, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	bf00      	nop
 8007b70:	e7fd      	b.n	8007b6e <xTaskIncrementTick+0x46>
 8007b72:	4b44      	ldr	r3, [pc, #272]	@ (8007c84 <xTaskIncrementTick+0x15c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	4b43      	ldr	r3, [pc, #268]	@ (8007c88 <xTaskIncrementTick+0x160>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a41      	ldr	r2, [pc, #260]	@ (8007c84 <xTaskIncrementTick+0x15c>)
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	4a41      	ldr	r2, [pc, #260]	@ (8007c88 <xTaskIncrementTick+0x160>)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	4b41      	ldr	r3, [pc, #260]	@ (8007c8c <xTaskIncrementTick+0x164>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	4a3f      	ldr	r2, [pc, #252]	@ (8007c8c <xTaskIncrementTick+0x164>)
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	f000 fada 	bl	8008148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b94:	4b3e      	ldr	r3, [pc, #248]	@ (8007c90 <xTaskIncrementTick+0x168>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d34e      	bcc.n	8007c3c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b9e:	4b39      	ldr	r3, [pc, #228]	@ (8007c84 <xTaskIncrementTick+0x15c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <xTaskIncrementTick+0x84>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e000      	b.n	8007bae <xTaskIncrementTick+0x86>
 8007bac:	2300      	movs	r3, #0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d004      	beq.n	8007bbc <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb2:	4b37      	ldr	r3, [pc, #220]	@ (8007c90 <xTaskIncrementTick+0x168>)
 8007bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb8:	601a      	str	r2, [r3, #0]
					break;
 8007bba:	e03f      	b.n	8007c3c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007bbc:	4b31      	ldr	r3, [pc, #196]	@ (8007c84 <xTaskIncrementTick+0x15c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d203      	bcs.n	8007bdc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8007c90 <xTaskIncrementTick+0x168>)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6013      	str	r3, [r2, #0]
						break;
 8007bda:	e02f      	b.n	8007c3c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe ff89 	bl	8006af8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	3318      	adds	r3, #24
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe ff80 	bl	8006af8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bfc:	4b25      	ldr	r3, [pc, #148]	@ (8007c94 <xTaskIncrementTick+0x16c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d903      	bls.n	8007c0c <xTaskIncrementTick+0xe4>
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c08:	4a22      	ldr	r2, [pc, #136]	@ (8007c94 <xTaskIncrementTick+0x16c>)
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4a1f      	ldr	r2, [pc, #124]	@ (8007c98 <xTaskIncrementTick+0x170>)
 8007c1a:	441a      	add	r2, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	f7fe ff0b 	bl	8006a3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8007c9c <xTaskIncrementTick+0x174>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d3b3      	bcc.n	8007b9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007c36:	2301      	movs	r3, #1
 8007c38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c3a:	e7b0      	b.n	8007b9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c3c:	4b17      	ldr	r3, [pc, #92]	@ (8007c9c <xTaskIncrementTick+0x174>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c42:	4915      	ldr	r1, [pc, #84]	@ (8007c98 <xTaskIncrementTick+0x170>)
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d907      	bls.n	8007c64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	e004      	b.n	8007c64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c5a:	4b11      	ldr	r3, [pc, #68]	@ (8007ca0 <xTaskIncrementTick+0x178>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	4a0f      	ldr	r2, [pc, #60]	@ (8007ca0 <xTaskIncrementTick+0x178>)
 8007c62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c64:	4b0f      	ldr	r3, [pc, #60]	@ (8007ca4 <xTaskIncrementTick+0x17c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c70:	697b      	ldr	r3, [r7, #20]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20000fd8 	.word	0x20000fd8
 8007c80:	20000fb4 	.word	0x20000fb4
 8007c84:	20000f68 	.word	0x20000f68
 8007c88:	20000f6c 	.word	0x20000f6c
 8007c8c:	20000fc8 	.word	0x20000fc8
 8007c90:	20000fd0 	.word	0x20000fd0
 8007c94:	20000fb8 	.word	0x20000fb8
 8007c98:	20000ae0 	.word	0x20000ae0
 8007c9c:	20000adc 	.word	0x20000adc
 8007ca0:	20000fc0 	.word	0x20000fc0
 8007ca4:	20000fc4 	.word	0x20000fc4

08007ca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cae:	4b28      	ldr	r3, [pc, #160]	@ (8007d50 <vTaskSwitchContext+0xa8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cb6:	4b27      	ldr	r3, [pc, #156]	@ (8007d54 <vTaskSwitchContext+0xac>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cbc:	e042      	b.n	8007d44 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007cbe:	4b25      	ldr	r3, [pc, #148]	@ (8007d54 <vTaskSwitchContext+0xac>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007cc4:	4b24      	ldr	r3, [pc, #144]	@ (8007d58 <vTaskSwitchContext+0xb0>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	e011      	b.n	8007cf0 <vTaskSwitchContext+0x48>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10b      	bne.n	8007cea <vTaskSwitchContext+0x42>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	607b      	str	r3, [r7, #4]
}
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop
 8007ce8:	e7fd      	b.n	8007ce6 <vTaskSwitchContext+0x3e>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3b01      	subs	r3, #1
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	491a      	ldr	r1, [pc, #104]	@ (8007d5c <vTaskSwitchContext+0xb4>)
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0e3      	beq.n	8007ccc <vTaskSwitchContext+0x24>
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4a13      	ldr	r2, [pc, #76]	@ (8007d5c <vTaskSwitchContext+0xb4>)
 8007d10:	4413      	add	r3, r2
 8007d12:	60bb      	str	r3, [r7, #8]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	605a      	str	r2, [r3, #4]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	3308      	adds	r3, #8
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d104      	bne.n	8007d34 <vTaskSwitchContext+0x8c>
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	605a      	str	r2, [r3, #4]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	4a09      	ldr	r2, [pc, #36]	@ (8007d60 <vTaskSwitchContext+0xb8>)
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	4a06      	ldr	r2, [pc, #24]	@ (8007d58 <vTaskSwitchContext+0xb0>)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6013      	str	r3, [r2, #0]
}
 8007d44:	bf00      	nop
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	20000fd8 	.word	0x20000fd8
 8007d54:	20000fc4 	.word	0x20000fc4
 8007d58:	20000fb8 	.word	0x20000fb8
 8007d5c:	20000ae0 	.word	0x20000ae0
 8007d60:	20000adc 	.word	0x20000adc

08007d64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10b      	bne.n	8007d8c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	60fb      	str	r3, [r7, #12]
}
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
 8007d8a:	e7fd      	b.n	8007d88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d8c:	4b07      	ldr	r3, [pc, #28]	@ (8007dac <vTaskPlaceOnEventList+0x48>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3318      	adds	r3, #24
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7fe fe76 	bl	8006a86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	6838      	ldr	r0, [r7, #0]
 8007d9e:	f000 fa87 	bl	80082b0 <prvAddCurrentTaskToDelayedList>
}
 8007da2:	bf00      	nop
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20000adc 	.word	0x20000adc

08007db0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10b      	bne.n	8007dda <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	617b      	str	r3, [r7, #20]
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop
 8007dd8:	e7fd      	b.n	8007dd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dda:	4b0a      	ldr	r3, [pc, #40]	@ (8007e04 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3318      	adds	r3, #24
 8007de0:	4619      	mov	r1, r3
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7fe fe2b 	bl	8006a3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007dee:	f04f 33ff 	mov.w	r3, #4294967295
 8007df2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007df4:	6879      	ldr	r1, [r7, #4]
 8007df6:	68b8      	ldr	r0, [r7, #8]
 8007df8:	f000 fa5a 	bl	80082b0 <prvAddCurrentTaskToDelayedList>
	}
 8007dfc:	bf00      	nop
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000adc 	.word	0x20000adc

08007e08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10b      	bne.n	8007e36 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	60fb      	str	r3, [r7, #12]
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	e7fd      	b.n	8007e32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	3318      	adds	r3, #24
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe fe5c 	bl	8006af8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e40:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb8 <xTaskRemoveFromEventList+0xb0>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d11d      	bne.n	8007e84 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe fe53 	bl	8006af8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e56:	4b19      	ldr	r3, [pc, #100]	@ (8007ebc <xTaskRemoveFromEventList+0xb4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d903      	bls.n	8007e66 <xTaskRemoveFromEventList+0x5e>
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e62:	4a16      	ldr	r2, [pc, #88]	@ (8007ebc <xTaskRemoveFromEventList+0xb4>)
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4a13      	ldr	r2, [pc, #76]	@ (8007ec0 <xTaskRemoveFromEventList+0xb8>)
 8007e74:	441a      	add	r2, r3
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	f7fe fdde 	bl	8006a3e <vListInsertEnd>
 8007e82:	e005      	b.n	8007e90 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	3318      	adds	r3, #24
 8007e88:	4619      	mov	r1, r3
 8007e8a:	480e      	ldr	r0, [pc, #56]	@ (8007ec4 <xTaskRemoveFromEventList+0xbc>)
 8007e8c:	f7fe fdd7 	bl	8006a3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e94:	4b0c      	ldr	r3, [pc, #48]	@ (8007ec8 <xTaskRemoveFromEventList+0xc0>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d905      	bls.n	8007eaa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ecc <xTaskRemoveFromEventList+0xc4>)
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	e001      	b.n	8007eae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007eae:	697b      	ldr	r3, [r7, #20]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000fd8 	.word	0x20000fd8
 8007ebc:	20000fb8 	.word	0x20000fb8
 8007ec0:	20000ae0 	.word	0x20000ae0
 8007ec4:	20000f70 	.word	0x20000f70
 8007ec8:	20000adc 	.word	0x20000adc
 8007ecc:	20000fc4 	.word	0x20000fc4

08007ed0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ed8:	4b06      	ldr	r3, [pc, #24]	@ (8007ef4 <vTaskInternalSetTimeOutState+0x24>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ee0:	4b05      	ldr	r3, [pc, #20]	@ (8007ef8 <vTaskInternalSetTimeOutState+0x28>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	605a      	str	r2, [r3, #4]
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	20000fc8 	.word	0x20000fc8
 8007ef8:	20000fb4 	.word	0x20000fb4

08007efc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10b      	bne.n	8007f24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	613b      	str	r3, [r7, #16]
}
 8007f1e:	bf00      	nop
 8007f20:	bf00      	nop
 8007f22:	e7fd      	b.n	8007f20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10b      	bne.n	8007f42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	60fb      	str	r3, [r7, #12]
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007f42:	f000 fe59 	bl	8008bf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f46:	4b1d      	ldr	r3, [pc, #116]	@ (8007fbc <xTaskCheckForTimeOut+0xc0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5e:	d102      	bne.n	8007f66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	e023      	b.n	8007fae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4b15      	ldr	r3, [pc, #84]	@ (8007fc0 <xTaskCheckForTimeOut+0xc4>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d007      	beq.n	8007f82 <xTaskCheckForTimeOut+0x86>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d302      	bcc.n	8007f82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	61fb      	str	r3, [r7, #28]
 8007f80:	e015      	b.n	8007fae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d20b      	bcs.n	8007fa4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	1ad2      	subs	r2, r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff ff99 	bl	8007ed0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61fb      	str	r3, [r7, #28]
 8007fa2:	e004      	b.n	8007fae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007faa:	2301      	movs	r3, #1
 8007fac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fae:	f000 fe55 	bl	8008c5c <vPortExitCritical>

	return xReturn;
 8007fb2:	69fb      	ldr	r3, [r7, #28]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3720      	adds	r7, #32
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	20000fb4 	.word	0x20000fb4
 8007fc0:	20000fc8 	.word	0x20000fc8

08007fc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fc8:	4b03      	ldr	r3, [pc, #12]	@ (8007fd8 <vTaskMissedYield+0x14>)
 8007fca:	2201      	movs	r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]
}
 8007fce:	bf00      	nop
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	20000fc4 	.word	0x20000fc4

08007fdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fe4:	f000 f852 	bl	800808c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fe8:	4b06      	ldr	r3, [pc, #24]	@ (8008004 <prvIdleTask+0x28>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d9f9      	bls.n	8007fe4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ff0:	4b05      	ldr	r3, [pc, #20]	@ (8008008 <prvIdleTask+0x2c>)
 8007ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008000:	e7f0      	b.n	8007fe4 <prvIdleTask+0x8>
 8008002:	bf00      	nop
 8008004:	20000ae0 	.word	0x20000ae0
 8008008:	e000ed04 	.word	0xe000ed04

0800800c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008012:	2300      	movs	r3, #0
 8008014:	607b      	str	r3, [r7, #4]
 8008016:	e00c      	b.n	8008032 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4a12      	ldr	r2, [pc, #72]	@ (800806c <prvInitialiseTaskLists+0x60>)
 8008024:	4413      	add	r3, r2
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fcdc 	bl	80069e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3301      	adds	r3, #1
 8008030:	607b      	str	r3, [r7, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b37      	cmp	r3, #55	@ 0x37
 8008036:	d9ef      	bls.n	8008018 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008038:	480d      	ldr	r0, [pc, #52]	@ (8008070 <prvInitialiseTaskLists+0x64>)
 800803a:	f7fe fcd3 	bl	80069e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800803e:	480d      	ldr	r0, [pc, #52]	@ (8008074 <prvInitialiseTaskLists+0x68>)
 8008040:	f7fe fcd0 	bl	80069e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008044:	480c      	ldr	r0, [pc, #48]	@ (8008078 <prvInitialiseTaskLists+0x6c>)
 8008046:	f7fe fccd 	bl	80069e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800804a:	480c      	ldr	r0, [pc, #48]	@ (800807c <prvInitialiseTaskLists+0x70>)
 800804c:	f7fe fcca 	bl	80069e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008050:	480b      	ldr	r0, [pc, #44]	@ (8008080 <prvInitialiseTaskLists+0x74>)
 8008052:	f7fe fcc7 	bl	80069e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008056:	4b0b      	ldr	r3, [pc, #44]	@ (8008084 <prvInitialiseTaskLists+0x78>)
 8008058:	4a05      	ldr	r2, [pc, #20]	@ (8008070 <prvInitialiseTaskLists+0x64>)
 800805a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800805c:	4b0a      	ldr	r3, [pc, #40]	@ (8008088 <prvInitialiseTaskLists+0x7c>)
 800805e:	4a05      	ldr	r2, [pc, #20]	@ (8008074 <prvInitialiseTaskLists+0x68>)
 8008060:	601a      	str	r2, [r3, #0]
}
 8008062:	bf00      	nop
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000ae0 	.word	0x20000ae0
 8008070:	20000f40 	.word	0x20000f40
 8008074:	20000f54 	.word	0x20000f54
 8008078:	20000f70 	.word	0x20000f70
 800807c:	20000f84 	.word	0x20000f84
 8008080:	20000f9c 	.word	0x20000f9c
 8008084:	20000f68 	.word	0x20000f68
 8008088:	20000f6c 	.word	0x20000f6c

0800808c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008092:	e019      	b.n	80080c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008094:	f000 fdb0 	bl	8008bf8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008098:	4b10      	ldr	r3, [pc, #64]	@ (80080dc <prvCheckTasksWaitingTermination+0x50>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3304      	adds	r3, #4
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe fd27 	bl	8006af8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080aa:	4b0d      	ldr	r3, [pc, #52]	@ (80080e0 <prvCheckTasksWaitingTermination+0x54>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	4a0b      	ldr	r2, [pc, #44]	@ (80080e0 <prvCheckTasksWaitingTermination+0x54>)
 80080b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080b4:	4b0b      	ldr	r3, [pc, #44]	@ (80080e4 <prvCheckTasksWaitingTermination+0x58>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	4a0a      	ldr	r2, [pc, #40]	@ (80080e4 <prvCheckTasksWaitingTermination+0x58>)
 80080bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080be:	f000 fdcd 	bl	8008c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f810 	bl	80080e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080c8:	4b06      	ldr	r3, [pc, #24]	@ (80080e4 <prvCheckTasksWaitingTermination+0x58>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1e1      	bne.n	8008094 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000f84 	.word	0x20000f84
 80080e0:	20000fb0 	.word	0x20000fb0
 80080e4:	20000f98 	.word	0x20000f98

080080e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d108      	bne.n	800810c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 ff64 	bl	8008fcc <vPortFree>
				vPortFree( pxTCB );
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 ff61 	bl	8008fcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800810a:	e019      	b.n	8008140 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008112:	2b01      	cmp	r3, #1
 8008114:	d103      	bne.n	800811e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 ff58 	bl	8008fcc <vPortFree>
	}
 800811c:	e010      	b.n	8008140 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008124:	2b02      	cmp	r3, #2
 8008126:	d00b      	beq.n	8008140 <prvDeleteTCB+0x58>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	60fb      	str	r3, [r7, #12]
}
 800813a:	bf00      	nop
 800813c:	bf00      	nop
 800813e:	e7fd      	b.n	800813c <prvDeleteTCB+0x54>
	}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800814e:	4b0f      	ldr	r3, [pc, #60]	@ (800818c <prvResetNextTaskUnblockTime+0x44>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <prvResetNextTaskUnblockTime+0x14>
 8008158:	2301      	movs	r3, #1
 800815a:	e000      	b.n	800815e <prvResetNextTaskUnblockTime+0x16>
 800815c:	2300      	movs	r3, #0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d004      	beq.n	800816c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008162:	4b0b      	ldr	r3, [pc, #44]	@ (8008190 <prvResetNextTaskUnblockTime+0x48>)
 8008164:	f04f 32ff 	mov.w	r2, #4294967295
 8008168:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800816a:	e008      	b.n	800817e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800816c:	4b07      	ldr	r3, [pc, #28]	@ (800818c <prvResetNextTaskUnblockTime+0x44>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	4a05      	ldr	r2, [pc, #20]	@ (8008190 <prvResetNextTaskUnblockTime+0x48>)
 800817c:	6013      	str	r3, [r2, #0]
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	20000f68 	.word	0x20000f68
 8008190:	20000fd0 	.word	0x20000fd0

08008194 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800819a:	4b0b      	ldr	r3, [pc, #44]	@ (80081c8 <xTaskGetSchedulerState+0x34>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d102      	bne.n	80081a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081a2:	2301      	movs	r3, #1
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	e008      	b.n	80081ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081a8:	4b08      	ldr	r3, [pc, #32]	@ (80081cc <xTaskGetSchedulerState+0x38>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081b0:	2302      	movs	r3, #2
 80081b2:	607b      	str	r3, [r7, #4]
 80081b4:	e001      	b.n	80081ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081b6:	2300      	movs	r3, #0
 80081b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081ba:	687b      	ldr	r3, [r7, #4]
	}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	20000fbc 	.word	0x20000fbc
 80081cc:	20000fd8 	.word	0x20000fd8

080081d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081dc:	2300      	movs	r3, #0
 80081de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d058      	beq.n	8008298 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081e6:	4b2f      	ldr	r3, [pc, #188]	@ (80082a4 <xTaskPriorityDisinherit+0xd4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d00b      	beq.n	8008208 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	60fb      	str	r3, [r7, #12]
}
 8008202:	bf00      	nop
 8008204:	bf00      	nop
 8008206:	e7fd      	b.n	8008204 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10b      	bne.n	8008228 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	60bb      	str	r3, [r7, #8]
}
 8008222:	bf00      	nop
 8008224:	bf00      	nop
 8008226:	e7fd      	b.n	8008224 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800822c:	1e5a      	subs	r2, r3, #1
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800823a:	429a      	cmp	r2, r3
 800823c:	d02c      	beq.n	8008298 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008242:	2b00      	cmp	r3, #0
 8008244:	d128      	bne.n	8008298 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	3304      	adds	r3, #4
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe fc54 	bl	8006af8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008268:	4b0f      	ldr	r3, [pc, #60]	@ (80082a8 <xTaskPriorityDisinherit+0xd8>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	429a      	cmp	r2, r3
 800826e:	d903      	bls.n	8008278 <xTaskPriorityDisinherit+0xa8>
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008274:	4a0c      	ldr	r2, [pc, #48]	@ (80082a8 <xTaskPriorityDisinherit+0xd8>)
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800827c:	4613      	mov	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4a09      	ldr	r2, [pc, #36]	@ (80082ac <xTaskPriorityDisinherit+0xdc>)
 8008286:	441a      	add	r2, r3
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	3304      	adds	r3, #4
 800828c:	4619      	mov	r1, r3
 800828e:	4610      	mov	r0, r2
 8008290:	f7fe fbd5 	bl	8006a3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008294:	2301      	movs	r3, #1
 8008296:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008298:	697b      	ldr	r3, [r7, #20]
	}
 800829a:	4618      	mov	r0, r3
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20000adc 	.word	0x20000adc
 80082a8:	20000fb8 	.word	0x20000fb8
 80082ac:	20000ae0 	.word	0x20000ae0

080082b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082ba:	4b21      	ldr	r3, [pc, #132]	@ (8008340 <prvAddCurrentTaskToDelayedList+0x90>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082c0:	4b20      	ldr	r3, [pc, #128]	@ (8008344 <prvAddCurrentTaskToDelayedList+0x94>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3304      	adds	r3, #4
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe fc16 	bl	8006af8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d2:	d10a      	bne.n	80082ea <prvAddCurrentTaskToDelayedList+0x3a>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d007      	beq.n	80082ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082da:	4b1a      	ldr	r3, [pc, #104]	@ (8008344 <prvAddCurrentTaskToDelayedList+0x94>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3304      	adds	r3, #4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4819      	ldr	r0, [pc, #100]	@ (8008348 <prvAddCurrentTaskToDelayedList+0x98>)
 80082e4:	f7fe fbab 	bl	8006a3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082e8:	e026      	b.n	8008338 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4413      	add	r3, r2
 80082f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082f2:	4b14      	ldr	r3, [pc, #80]	@ (8008344 <prvAddCurrentTaskToDelayedList+0x94>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d209      	bcs.n	8008316 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008302:	4b12      	ldr	r3, [pc, #72]	@ (800834c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	4b0f      	ldr	r3, [pc, #60]	@ (8008344 <prvAddCurrentTaskToDelayedList+0x94>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3304      	adds	r3, #4
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f7fe fbb9 	bl	8006a86 <vListInsert>
}
 8008314:	e010      	b.n	8008338 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008316:	4b0e      	ldr	r3, [pc, #56]	@ (8008350 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	4b0a      	ldr	r3, [pc, #40]	@ (8008344 <prvAddCurrentTaskToDelayedList+0x94>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3304      	adds	r3, #4
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f7fe fbaf 	bl	8006a86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008328:	4b0a      	ldr	r3, [pc, #40]	@ (8008354 <prvAddCurrentTaskToDelayedList+0xa4>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	429a      	cmp	r2, r3
 8008330:	d202      	bcs.n	8008338 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008332:	4a08      	ldr	r2, [pc, #32]	@ (8008354 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	6013      	str	r3, [r2, #0]
}
 8008338:	bf00      	nop
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20000fb4 	.word	0x20000fb4
 8008344:	20000adc 	.word	0x20000adc
 8008348:	20000f9c 	.word	0x20000f9c
 800834c:	20000f6c 	.word	0x20000f6c
 8008350:	20000f68 	.word	0x20000f68
 8008354:	20000fd0 	.word	0x20000fd0

08008358 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	@ 0x28
 800835c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800835e:	2300      	movs	r3, #0
 8008360:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008362:	f000 fad9 	bl	8008918 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008366:	4b1d      	ldr	r3, [pc, #116]	@ (80083dc <xTimerCreateTimerTask+0x84>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d021      	beq.n	80083b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008376:	1d3a      	adds	r2, r7, #4
 8008378:	f107 0108 	add.w	r1, r7, #8
 800837c:	f107 030c 	add.w	r3, r7, #12
 8008380:	4618      	mov	r0, r3
 8008382:	f7fe fb15 	bl	80069b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	9202      	str	r2, [sp, #8]
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	2302      	movs	r3, #2
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	2300      	movs	r3, #0
 8008396:	460a      	mov	r2, r1
 8008398:	4911      	ldr	r1, [pc, #68]	@ (80083e0 <xTimerCreateTimerTask+0x88>)
 800839a:	4812      	ldr	r0, [pc, #72]	@ (80083e4 <xTimerCreateTimerTask+0x8c>)
 800839c:	f7ff f8ce 	bl	800753c <xTaskCreateStatic>
 80083a0:	4603      	mov	r3, r0
 80083a2:	4a11      	ldr	r2, [pc, #68]	@ (80083e8 <xTimerCreateTimerTask+0x90>)
 80083a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083a6:	4b10      	ldr	r3, [pc, #64]	@ (80083e8 <xTimerCreateTimerTask+0x90>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083ae:	2301      	movs	r3, #1
 80083b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10b      	bne.n	80083d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	613b      	str	r3, [r7, #16]
}
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	e7fd      	b.n	80083cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80083d0:	697b      	ldr	r3, [r7, #20]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	2000100c 	.word	0x2000100c
 80083e0:	0800c0d8 	.word	0x0800c0d8
 80083e4:	0800850d 	.word	0x0800850d
 80083e8:	20001010 	.word	0x20001010

080083ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	@ 0x28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10b      	bne.n	800841c <xTimerGenericCommand+0x30>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	623b      	str	r3, [r7, #32]
}
 8008416:	bf00      	nop
 8008418:	bf00      	nop
 800841a:	e7fd      	b.n	8008418 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800841c:	4b19      	ldr	r3, [pc, #100]	@ (8008484 <xTimerGenericCommand+0x98>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d02a      	beq.n	800847a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b05      	cmp	r3, #5
 8008434:	dc18      	bgt.n	8008468 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008436:	f7ff fead 	bl	8008194 <xTaskGetSchedulerState>
 800843a:	4603      	mov	r3, r0
 800843c:	2b02      	cmp	r3, #2
 800843e:	d109      	bne.n	8008454 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008440:	4b10      	ldr	r3, [pc, #64]	@ (8008484 <xTimerGenericCommand+0x98>)
 8008442:	6818      	ldr	r0, [r3, #0]
 8008444:	f107 0110 	add.w	r1, r7, #16
 8008448:	2300      	movs	r3, #0
 800844a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800844c:	f7fe fc88 	bl	8006d60 <xQueueGenericSend>
 8008450:	6278      	str	r0, [r7, #36]	@ 0x24
 8008452:	e012      	b.n	800847a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008454:	4b0b      	ldr	r3, [pc, #44]	@ (8008484 <xTimerGenericCommand+0x98>)
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	f107 0110 	add.w	r1, r7, #16
 800845c:	2300      	movs	r3, #0
 800845e:	2200      	movs	r2, #0
 8008460:	f7fe fc7e 	bl	8006d60 <xQueueGenericSend>
 8008464:	6278      	str	r0, [r7, #36]	@ 0x24
 8008466:	e008      	b.n	800847a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008468:	4b06      	ldr	r3, [pc, #24]	@ (8008484 <xTimerGenericCommand+0x98>)
 800846a:	6818      	ldr	r0, [r3, #0]
 800846c:	f107 0110 	add.w	r1, r7, #16
 8008470:	2300      	movs	r3, #0
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	f7fe fd76 	bl	8006f64 <xQueueGenericSendFromISR>
 8008478:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800847c:	4618      	mov	r0, r3
 800847e:	3728      	adds	r7, #40	@ 0x28
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	2000100c 	.word	0x2000100c

08008488 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af02      	add	r7, sp, #8
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008492:	4b1d      	ldr	r3, [pc, #116]	@ (8008508 <prvProcessExpiredTimer+0x80>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	3304      	adds	r3, #4
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fb29 	bl	8006af8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d123      	bne.n	80084f6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	699a      	ldr	r2, [r3, #24]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	18d1      	adds	r1, r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	6978      	ldr	r0, [r7, #20]
 80084bc:	f000 f8cc 	bl	8008658 <prvInsertTimerInActiveList>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d017      	beq.n	80084f6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084c6:	2300      	movs	r3, #0
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	2300      	movs	r3, #0
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	2100      	movs	r1, #0
 80084d0:	6978      	ldr	r0, [r7, #20]
 80084d2:	f7ff ff8b 	bl	80083ec <xTimerGenericCommand>
 80084d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10b      	bne.n	80084f6 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	60fb      	str	r3, [r7, #12]
}
 80084f0:	bf00      	nop
 80084f2:	bf00      	nop
 80084f4:	e7fd      	b.n	80084f2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084fa:	6978      	ldr	r0, [r7, #20]
 80084fc:	4798      	blx	r3
}
 80084fe:	bf00      	nop
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20001004 	.word	0x20001004

0800850c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008514:	f107 0308 	add.w	r3, r7, #8
 8008518:	4618      	mov	r0, r3
 800851a:	f000 f859 	bl	80085d0 <prvGetNextExpireTime>
 800851e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	4619      	mov	r1, r3
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f805 	bl	8008534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800852a:	f000 f8d7 	bl	80086dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800852e:	bf00      	nop
 8008530:	e7f0      	b.n	8008514 <prvTimerTask+0x8>
	...

08008534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800853e:	f7ff fa37 	bl	80079b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008542:	f107 0308 	add.w	r3, r7, #8
 8008546:	4618      	mov	r0, r3
 8008548:	f000 f866 	bl	8008618 <prvSampleTimeNow>
 800854c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d130      	bne.n	80085b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10a      	bne.n	8008570 <prvProcessTimerOrBlockTask+0x3c>
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	429a      	cmp	r2, r3
 8008560:	d806      	bhi.n	8008570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008562:	f7ff fa33 	bl	80079cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008566:	68f9      	ldr	r1, [r7, #12]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff ff8d 	bl	8008488 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800856e:	e024      	b.n	80085ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d008      	beq.n	8008588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008576:	4b13      	ldr	r3, [pc, #76]	@ (80085c4 <prvProcessTimerOrBlockTask+0x90>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	bf0c      	ite	eq
 8008580:	2301      	moveq	r3, #1
 8008582:	2300      	movne	r3, #0
 8008584:	b2db      	uxtb	r3, r3
 8008586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008588:	4b0f      	ldr	r3, [pc, #60]	@ (80085c8 <prvProcessTimerOrBlockTask+0x94>)
 800858a:	6818      	ldr	r0, [r3, #0]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4619      	mov	r1, r3
 8008596:	f7fe ff9d 	bl	80074d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800859a:	f7ff fa17 	bl	80079cc <xTaskResumeAll>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10a      	bne.n	80085ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085a4:	4b09      	ldr	r3, [pc, #36]	@ (80085cc <prvProcessTimerOrBlockTask+0x98>)
 80085a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	f3bf 8f6f 	isb	sy
}
 80085b4:	e001      	b.n	80085ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085b6:	f7ff fa09 	bl	80079cc <xTaskResumeAll>
}
 80085ba:	bf00      	nop
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20001008 	.word	0x20001008
 80085c8:	2000100c 	.word	0x2000100c
 80085cc:	e000ed04 	.word	0xe000ed04

080085d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008614 <prvGetNextExpireTime+0x44>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bf0c      	ite	eq
 80085e2:	2301      	moveq	r3, #1
 80085e4:	2300      	movne	r3, #0
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	461a      	mov	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d105      	bne.n	8008602 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085f6:	4b07      	ldr	r3, [pc, #28]	@ (8008614 <prvGetNextExpireTime+0x44>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	e001      	b.n	8008606 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008606:	68fb      	ldr	r3, [r7, #12]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	20001004 	.word	0x20001004

08008618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008620:	f7ff fa72 	bl	8007b08 <xTaskGetTickCount>
 8008624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008626:	4b0b      	ldr	r3, [pc, #44]	@ (8008654 <prvSampleTimeNow+0x3c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	429a      	cmp	r2, r3
 800862e:	d205      	bcs.n	800863c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008630:	f000 f910 	bl	8008854 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	e002      	b.n	8008642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008642:	4a04      	ldr	r2, [pc, #16]	@ (8008654 <prvSampleTimeNow+0x3c>)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008648:	68fb      	ldr	r3, [r7, #12]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20001014 	.word	0x20001014

08008658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008666:	2300      	movs	r3, #0
 8008668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	429a      	cmp	r2, r3
 800867c:	d812      	bhi.n	80086a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	1ad2      	subs	r2, r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	429a      	cmp	r2, r3
 800868a:	d302      	bcc.n	8008692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800868c:	2301      	movs	r3, #1
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	e01b      	b.n	80086ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008692:	4b10      	ldr	r3, [pc, #64]	@ (80086d4 <prvInsertTimerInActiveList+0x7c>)
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3304      	adds	r3, #4
 800869a:	4619      	mov	r1, r3
 800869c:	4610      	mov	r0, r2
 800869e:	f7fe f9f2 	bl	8006a86 <vListInsert>
 80086a2:	e012      	b.n	80086ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d206      	bcs.n	80086ba <prvInsertTimerInActiveList+0x62>
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d302      	bcc.n	80086ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086b4:	2301      	movs	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	e007      	b.n	80086ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086ba:	4b07      	ldr	r3, [pc, #28]	@ (80086d8 <prvInsertTimerInActiveList+0x80>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3304      	adds	r3, #4
 80086c2:	4619      	mov	r1, r3
 80086c4:	4610      	mov	r0, r2
 80086c6:	f7fe f9de 	bl	8006a86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086ca:	697b      	ldr	r3, [r7, #20]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20001008 	.word	0x20001008
 80086d8:	20001004 	.word	0x20001004

080086dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08e      	sub	sp, #56	@ 0x38
 80086e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086e2:	e0a5      	b.n	8008830 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	da19      	bge.n	800871e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086ea:	1d3b      	adds	r3, r7, #4
 80086ec:	3304      	adds	r3, #4
 80086ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	61fb      	str	r3, [r7, #28]
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800870e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008714:	6850      	ldr	r0, [r2, #4]
 8008716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008718:	6892      	ldr	r2, [r2, #8]
 800871a:	4611      	mov	r1, r2
 800871c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	f2c0 8085 	blt.w	8008830 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800872a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d004      	beq.n	800873c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008734:	3304      	adds	r3, #4
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe f9de 	bl	8006af8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800873c:	463b      	mov	r3, r7
 800873e:	4618      	mov	r0, r3
 8008740:	f7ff ff6a 	bl	8008618 <prvSampleTimeNow>
 8008744:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b09      	cmp	r3, #9
 800874a:	d86c      	bhi.n	8008826 <prvProcessReceivedCommands+0x14a>
 800874c:	a201      	add	r2, pc, #4	@ (adr r2, 8008754 <prvProcessReceivedCommands+0x78>)
 800874e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008752:	bf00      	nop
 8008754:	0800877d 	.word	0x0800877d
 8008758:	0800877d 	.word	0x0800877d
 800875c:	0800877d 	.word	0x0800877d
 8008760:	08008827 	.word	0x08008827
 8008764:	080087db 	.word	0x080087db
 8008768:	08008815 	.word	0x08008815
 800876c:	0800877d 	.word	0x0800877d
 8008770:	0800877d 	.word	0x0800877d
 8008774:	08008827 	.word	0x08008827
 8008778:	080087db 	.word	0x080087db
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	18d1      	adds	r1, r2, r3
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800878a:	f7ff ff65 	bl	8008658 <prvInsertTimerInActiveList>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d04a      	beq.n	800882a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800879a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800879c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d142      	bne.n	800882a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	441a      	add	r2, r3
 80087ac:	2300      	movs	r3, #0
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	2300      	movs	r3, #0
 80087b2:	2100      	movs	r1, #0
 80087b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087b6:	f7ff fe19 	bl	80083ec <xTimerGenericCommand>
 80087ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d133      	bne.n	800882a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	61bb      	str	r3, [r7, #24]
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop
 80087d8:	e7fd      	b.n	80087d6 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10b      	bne.n	8008800 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	617b      	str	r3, [r7, #20]
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	e7fd      	b.n	80087fc <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008802:	699a      	ldr	r2, [r3, #24]
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	18d1      	adds	r1, r2, r3
 8008808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800880c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800880e:	f7ff ff23 	bl	8008658 <prvInsertTimerInActiveList>
					break;
 8008812:	e00d      	b.n	8008830 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008816:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d107      	bne.n	800882e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800881e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008820:	f000 fbd4 	bl	8008fcc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008824:	e003      	b.n	800882e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8008826:	bf00      	nop
 8008828:	e002      	b.n	8008830 <prvProcessReceivedCommands+0x154>
					break;
 800882a:	bf00      	nop
 800882c:	e000      	b.n	8008830 <prvProcessReceivedCommands+0x154>
					break;
 800882e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008830:	4b07      	ldr	r3, [pc, #28]	@ (8008850 <prvProcessReceivedCommands+0x174>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	1d39      	adds	r1, r7, #4
 8008836:	2200      	movs	r2, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f7fe fc2f 	bl	800709c <xQueueReceive>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	f47f af4f 	bne.w	80086e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008846:	bf00      	nop
 8008848:	bf00      	nop
 800884a:	3730      	adds	r7, #48	@ 0x30
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	2000100c 	.word	0x2000100c

08008854 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b088      	sub	sp, #32
 8008858:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800885a:	e046      	b.n	80088ea <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800885c:	4b2c      	ldr	r3, [pc, #176]	@ (8008910 <prvSwitchTimerLists+0xbc>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008866:	4b2a      	ldr	r3, [pc, #168]	@ (8008910 <prvSwitchTimerLists+0xbc>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3304      	adds	r3, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f7fe f93f 	bl	8006af8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d12f      	bne.n	80088ea <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	4413      	add	r3, r2
 8008892:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	429a      	cmp	r2, r3
 800889a:	d90e      	bls.n	80088ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088a8:	4b19      	ldr	r3, [pc, #100]	@ (8008910 <prvSwitchTimerLists+0xbc>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3304      	adds	r3, #4
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f7fe f8e7 	bl	8006a86 <vListInsert>
 80088b8:	e017      	b.n	80088ea <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088ba:	2300      	movs	r3, #0
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	2300      	movs	r3, #0
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	2100      	movs	r1, #0
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f7ff fd91 	bl	80083ec <xTimerGenericCommand>
 80088ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10b      	bne.n	80088ea <prvSwitchTimerLists+0x96>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	603b      	str	r3, [r7, #0]
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
 80088e8:	e7fd      	b.n	80088e6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088ea:	4b09      	ldr	r3, [pc, #36]	@ (8008910 <prvSwitchTimerLists+0xbc>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1b3      	bne.n	800885c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088f4:	4b06      	ldr	r3, [pc, #24]	@ (8008910 <prvSwitchTimerLists+0xbc>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088fa:	4b06      	ldr	r3, [pc, #24]	@ (8008914 <prvSwitchTimerLists+0xc0>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a04      	ldr	r2, [pc, #16]	@ (8008910 <prvSwitchTimerLists+0xbc>)
 8008900:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008902:	4a04      	ldr	r2, [pc, #16]	@ (8008914 <prvSwitchTimerLists+0xc0>)
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	6013      	str	r3, [r2, #0]
}
 8008908:	bf00      	nop
 800890a:	3718      	adds	r7, #24
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	20001004 	.word	0x20001004
 8008914:	20001008 	.word	0x20001008

08008918 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800891e:	f000 f96b 	bl	8008bf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008922:	4b15      	ldr	r3, [pc, #84]	@ (8008978 <prvCheckForValidListAndQueue+0x60>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d120      	bne.n	800896c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800892a:	4814      	ldr	r0, [pc, #80]	@ (800897c <prvCheckForValidListAndQueue+0x64>)
 800892c:	f7fe f85a 	bl	80069e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008930:	4813      	ldr	r0, [pc, #76]	@ (8008980 <prvCheckForValidListAndQueue+0x68>)
 8008932:	f7fe f857 	bl	80069e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008936:	4b13      	ldr	r3, [pc, #76]	@ (8008984 <prvCheckForValidListAndQueue+0x6c>)
 8008938:	4a10      	ldr	r2, [pc, #64]	@ (800897c <prvCheckForValidListAndQueue+0x64>)
 800893a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800893c:	4b12      	ldr	r3, [pc, #72]	@ (8008988 <prvCheckForValidListAndQueue+0x70>)
 800893e:	4a10      	ldr	r2, [pc, #64]	@ (8008980 <prvCheckForValidListAndQueue+0x68>)
 8008940:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008942:	2300      	movs	r3, #0
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	4b11      	ldr	r3, [pc, #68]	@ (800898c <prvCheckForValidListAndQueue+0x74>)
 8008948:	4a11      	ldr	r2, [pc, #68]	@ (8008990 <prvCheckForValidListAndQueue+0x78>)
 800894a:	2110      	movs	r1, #16
 800894c:	200a      	movs	r0, #10
 800894e:	f7fe f967 	bl	8006c20 <xQueueGenericCreateStatic>
 8008952:	4603      	mov	r3, r0
 8008954:	4a08      	ldr	r2, [pc, #32]	@ (8008978 <prvCheckForValidListAndQueue+0x60>)
 8008956:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008958:	4b07      	ldr	r3, [pc, #28]	@ (8008978 <prvCheckForValidListAndQueue+0x60>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d005      	beq.n	800896c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008960:	4b05      	ldr	r3, [pc, #20]	@ (8008978 <prvCheckForValidListAndQueue+0x60>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	490b      	ldr	r1, [pc, #44]	@ (8008994 <prvCheckForValidListAndQueue+0x7c>)
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe fd8a 	bl	8007480 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800896c:	f000 f976 	bl	8008c5c <vPortExitCritical>
}
 8008970:	bf00      	nop
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	2000100c 	.word	0x2000100c
 800897c:	20000fdc 	.word	0x20000fdc
 8008980:	20000ff0 	.word	0x20000ff0
 8008984:	20001004 	.word	0x20001004
 8008988:	20001008 	.word	0x20001008
 800898c:	200010b8 	.word	0x200010b8
 8008990:	20001018 	.word	0x20001018
 8008994:	0800c0e0 	.word	0x0800c0e0

08008998 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	3b04      	subs	r3, #4
 80089a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80089b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3b04      	subs	r3, #4
 80089b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	f023 0201 	bic.w	r2, r3, #1
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3b04      	subs	r3, #4
 80089c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089c8:	4a0c      	ldr	r2, [pc, #48]	@ (80089fc <pxPortInitialiseStack+0x64>)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3b14      	subs	r3, #20
 80089d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	3b04      	subs	r3, #4
 80089de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f06f 0202 	mvn.w	r2, #2
 80089e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3b20      	subs	r3, #32
 80089ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089ee:	68fb      	ldr	r3, [r7, #12]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	08008a01 	.word	0x08008a01

08008a00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a0a:	4b13      	ldr	r3, [pc, #76]	@ (8008a58 <prvTaskExitError+0x58>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d00b      	beq.n	8008a2c <prvTaskExitError+0x2c>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	60fb      	str	r3, [r7, #12]
}
 8008a26:	bf00      	nop
 8008a28:	bf00      	nop
 8008a2a:	e7fd      	b.n	8008a28 <prvTaskExitError+0x28>
	__asm volatile
 8008a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	60bb      	str	r3, [r7, #8]
}
 8008a3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a40:	bf00      	nop
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0fc      	beq.n	8008a42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	2000000c 	.word	0x2000000c
 8008a5c:	00000000 	.word	0x00000000

08008a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a60:	4b07      	ldr	r3, [pc, #28]	@ (8008a80 <pxCurrentTCBConst2>)
 8008a62:	6819      	ldr	r1, [r3, #0]
 8008a64:	6808      	ldr	r0, [r1, #0]
 8008a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6a:	f380 8809 	msr	PSP, r0
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f04f 0000 	mov.w	r0, #0
 8008a76:	f380 8811 	msr	BASEPRI, r0
 8008a7a:	4770      	bx	lr
 8008a7c:	f3af 8000 	nop.w

08008a80 <pxCurrentTCBConst2>:
 8008a80:	20000adc 	.word	0x20000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop

08008a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a88:	4808      	ldr	r0, [pc, #32]	@ (8008aac <prvPortStartFirstTask+0x24>)
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	6800      	ldr	r0, [r0, #0]
 8008a8e:	f380 8808 	msr	MSP, r0
 8008a92:	f04f 0000 	mov.w	r0, #0
 8008a96:	f380 8814 	msr	CONTROL, r0
 8008a9a:	b662      	cpsie	i
 8008a9c:	b661      	cpsie	f
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	df00      	svc	0
 8008aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008aaa:	bf00      	nop
 8008aac:	e000ed08 	.word	0xe000ed08

08008ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ab6:	4b47      	ldr	r3, [pc, #284]	@ (8008bd4 <xPortStartScheduler+0x124>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a47      	ldr	r2, [pc, #284]	@ (8008bd8 <xPortStartScheduler+0x128>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d10b      	bne.n	8008ad8 <xPortStartScheduler+0x28>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	613b      	str	r3, [r7, #16]
}
 8008ad2:	bf00      	nop
 8008ad4:	bf00      	nop
 8008ad6:	e7fd      	b.n	8008ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8008bd4 <xPortStartScheduler+0x124>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a3f      	ldr	r2, [pc, #252]	@ (8008bdc <xPortStartScheduler+0x12c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d10b      	bne.n	8008afa <xPortStartScheduler+0x4a>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	60fb      	str	r3, [r7, #12]
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	e7fd      	b.n	8008af6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008afa:	4b39      	ldr	r3, [pc, #228]	@ (8008be0 <xPortStartScheduler+0x130>)
 8008afc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	22ff      	movs	r2, #255	@ 0xff
 8008b0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	4b31      	ldr	r3, [pc, #196]	@ (8008be4 <xPortStartScheduler+0x134>)
 8008b20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b22:	4b31      	ldr	r3, [pc, #196]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b24:	2207      	movs	r2, #7
 8008b26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b28:	e009      	b.n	8008b3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	4a2d      	ldr	r2, [pc, #180]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b3e:	78fb      	ldrb	r3, [r7, #3]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b46:	2b80      	cmp	r3, #128	@ 0x80
 8008b48:	d0ef      	beq.n	8008b2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b4a:	4b27      	ldr	r3, [pc, #156]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f1c3 0307 	rsb	r3, r3, #7
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d00b      	beq.n	8008b6e <xPortStartScheduler+0xbe>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	60bb      	str	r3, [r7, #8]
}
 8008b68:	bf00      	nop
 8008b6a:	bf00      	nop
 8008b6c:	e7fd      	b.n	8008b6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	021b      	lsls	r3, r3, #8
 8008b74:	4a1c      	ldr	r2, [pc, #112]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b78:	4b1b      	ldr	r3, [pc, #108]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b80:	4a19      	ldr	r2, [pc, #100]	@ (8008be8 <xPortStartScheduler+0x138>)
 8008b82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b8c:	4b17      	ldr	r3, [pc, #92]	@ (8008bec <xPortStartScheduler+0x13c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a16      	ldr	r2, [pc, #88]	@ (8008bec <xPortStartScheduler+0x13c>)
 8008b92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b98:	4b14      	ldr	r3, [pc, #80]	@ (8008bec <xPortStartScheduler+0x13c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a13      	ldr	r2, [pc, #76]	@ (8008bec <xPortStartScheduler+0x13c>)
 8008b9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ba2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ba4:	f000 f8da 	bl	8008d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ba8:	4b11      	ldr	r3, [pc, #68]	@ (8008bf0 <xPortStartScheduler+0x140>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bae:	f000 f8f9 	bl	8008da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bb2:	4b10      	ldr	r3, [pc, #64]	@ (8008bf4 <xPortStartScheduler+0x144>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8008bf4 <xPortStartScheduler+0x144>)
 8008bb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008bbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bbe:	f7ff ff63 	bl	8008a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bc2:	f7ff f871 	bl	8007ca8 <vTaskSwitchContext>
	prvTaskExitError();
 8008bc6:	f7ff ff1b 	bl	8008a00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	e000ed00 	.word	0xe000ed00
 8008bd8:	410fc271 	.word	0x410fc271
 8008bdc:	410fc270 	.word	0x410fc270
 8008be0:	e000e400 	.word	0xe000e400
 8008be4:	20001108 	.word	0x20001108
 8008be8:	2000110c 	.word	0x2000110c
 8008bec:	e000ed20 	.word	0xe000ed20
 8008bf0:	2000000c 	.word	0x2000000c
 8008bf4:	e000ef34 	.word	0xe000ef34

08008bf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	607b      	str	r3, [r7, #4]
}
 8008c10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c12:	4b10      	ldr	r3, [pc, #64]	@ (8008c54 <vPortEnterCritical+0x5c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3301      	adds	r3, #1
 8008c18:	4a0e      	ldr	r2, [pc, #56]	@ (8008c54 <vPortEnterCritical+0x5c>)
 8008c1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c54 <vPortEnterCritical+0x5c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d110      	bne.n	8008c46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c24:	4b0c      	ldr	r3, [pc, #48]	@ (8008c58 <vPortEnterCritical+0x60>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00b      	beq.n	8008c46 <vPortEnterCritical+0x4e>
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	603b      	str	r3, [r7, #0]
}
 8008c40:	bf00      	nop
 8008c42:	bf00      	nop
 8008c44:	e7fd      	b.n	8008c42 <vPortEnterCritical+0x4a>
	}
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	2000000c 	.word	0x2000000c
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c62:	4b12      	ldr	r3, [pc, #72]	@ (8008cac <vPortExitCritical+0x50>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10b      	bne.n	8008c82 <vPortExitCritical+0x26>
	__asm volatile
 8008c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	607b      	str	r3, [r7, #4]
}
 8008c7c:	bf00      	nop
 8008c7e:	bf00      	nop
 8008c80:	e7fd      	b.n	8008c7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c82:	4b0a      	ldr	r3, [pc, #40]	@ (8008cac <vPortExitCritical+0x50>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	4a08      	ldr	r2, [pc, #32]	@ (8008cac <vPortExitCritical+0x50>)
 8008c8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c8c:	4b07      	ldr	r3, [pc, #28]	@ (8008cac <vPortExitCritical+0x50>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d105      	bne.n	8008ca0 <vPortExitCritical+0x44>
 8008c94:	2300      	movs	r3, #0
 8008c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	f383 8811 	msr	BASEPRI, r3
}
 8008c9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	2000000c 	.word	0x2000000c

08008cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cb0:	f3ef 8009 	mrs	r0, PSP
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	4b15      	ldr	r3, [pc, #84]	@ (8008d10 <pxCurrentTCBConst>)
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	f01e 0f10 	tst.w	lr, #16
 8008cc0:	bf08      	it	eq
 8008cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cca:	6010      	str	r0, [r2, #0]
 8008ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008cd4:	f380 8811 	msr	BASEPRI, r0
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f7fe ffe2 	bl	8007ca8 <vTaskSwitchContext>
 8008ce4:	f04f 0000 	mov.w	r0, #0
 8008ce8:	f380 8811 	msr	BASEPRI, r0
 8008cec:	bc09      	pop	{r0, r3}
 8008cee:	6819      	ldr	r1, [r3, #0]
 8008cf0:	6808      	ldr	r0, [r1, #0]
 8008cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf6:	f01e 0f10 	tst.w	lr, #16
 8008cfa:	bf08      	it	eq
 8008cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d00:	f380 8809 	msr	PSP, r0
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	f3af 8000 	nop.w

08008d10 <pxCurrentTCBConst>:
 8008d10:	20000adc 	.word	0x20000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop

08008d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	607b      	str	r3, [r7, #4]
}
 8008d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d32:	f7fe fef9 	bl	8007b28 <xTaskIncrementTick>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d3c:	4b06      	ldr	r3, [pc, #24]	@ (8008d58 <xPortSysTickHandler+0x40>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	2300      	movs	r3, #0
 8008d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	f383 8811 	msr	BASEPRI, r3
}
 8008d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d60:	4b0b      	ldr	r3, [pc, #44]	@ (8008d90 <vPortSetupTimerInterrupt+0x34>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d66:	4b0b      	ldr	r3, [pc, #44]	@ (8008d94 <vPortSetupTimerInterrupt+0x38>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d98 <vPortSetupTimerInterrupt+0x3c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a0a      	ldr	r2, [pc, #40]	@ (8008d9c <vPortSetupTimerInterrupt+0x40>)
 8008d72:	fba2 2303 	umull	r2, r3, r2, r3
 8008d76:	099b      	lsrs	r3, r3, #6
 8008d78:	4a09      	ldr	r2, [pc, #36]	@ (8008da0 <vPortSetupTimerInterrupt+0x44>)
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d7e:	4b04      	ldr	r3, [pc, #16]	@ (8008d90 <vPortSetupTimerInterrupt+0x34>)
 8008d80:	2207      	movs	r2, #7
 8008d82:	601a      	str	r2, [r3, #0]
}
 8008d84:	bf00      	nop
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	e000e010 	.word	0xe000e010
 8008d94:	e000e018 	.word	0xe000e018
 8008d98:	20000000 	.word	0x20000000
 8008d9c:	10624dd3 	.word	0x10624dd3
 8008da0:	e000e014 	.word	0xe000e014

08008da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008da4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008db4 <vPortEnableVFP+0x10>
 8008da8:	6801      	ldr	r1, [r0, #0]
 8008daa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008dae:	6001      	str	r1, [r0, #0]
 8008db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008db2:	bf00      	nop
 8008db4:	e000ed88 	.word	0xe000ed88

08008db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dbe:	f3ef 8305 	mrs	r3, IPSR
 8008dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b0f      	cmp	r3, #15
 8008dc8:	d915      	bls.n	8008df6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dca:	4a18      	ldr	r2, [pc, #96]	@ (8008e2c <vPortValidateInterruptPriority+0x74>)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008dd4:	4b16      	ldr	r3, [pc, #88]	@ (8008e30 <vPortValidateInterruptPriority+0x78>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	7afa      	ldrb	r2, [r7, #11]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d20b      	bcs.n	8008df6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	607b      	str	r3, [r7, #4]
}
 8008df0:	bf00      	nop
 8008df2:	bf00      	nop
 8008df4:	e7fd      	b.n	8008df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008df6:	4b0f      	ldr	r3, [pc, #60]	@ (8008e34 <vPortValidateInterruptPriority+0x7c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008e38 <vPortValidateInterruptPriority+0x80>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d90b      	bls.n	8008e1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	603b      	str	r3, [r7, #0]
}
 8008e18:	bf00      	nop
 8008e1a:	bf00      	nop
 8008e1c:	e7fd      	b.n	8008e1a <vPortValidateInterruptPriority+0x62>
	}
 8008e1e:	bf00      	nop
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	e000e3f0 	.word	0xe000e3f0
 8008e30:	20001108 	.word	0x20001108
 8008e34:	e000ed0c 	.word	0xe000ed0c
 8008e38:	2000110c 	.word	0x2000110c

08008e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08a      	sub	sp, #40	@ 0x28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e44:	2300      	movs	r3, #0
 8008e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e48:	f7fe fdb2 	bl	80079b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8008fb8 <pvPortMalloc+0x17c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e54:	f000 f916 	bl	8009084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e58:	4b58      	ldr	r3, [pc, #352]	@ (8008fbc <pvPortMalloc+0x180>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4013      	ands	r3, r2
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f040 8090 	bne.w	8008f86 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d01e      	beq.n	8008eaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e6c:	2208      	movs	r2, #8
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4413      	add	r3, r2
 8008e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d015      	beq.n	8008eaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f023 0307 	bic.w	r3, r3, #7
 8008e84:	3308      	adds	r3, #8
 8008e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f003 0307 	and.w	r3, r3, #7
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <pvPortMalloc+0x6e>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	617b      	str	r3, [r7, #20]
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop
 8008ea8:	e7fd      	b.n	8008ea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d06a      	beq.n	8008f86 <pvPortMalloc+0x14a>
 8008eb0:	4b43      	ldr	r3, [pc, #268]	@ (8008fc0 <pvPortMalloc+0x184>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d865      	bhi.n	8008f86 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008eba:	4b42      	ldr	r3, [pc, #264]	@ (8008fc4 <pvPortMalloc+0x188>)
 8008ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ebe:	4b41      	ldr	r3, [pc, #260]	@ (8008fc4 <pvPortMalloc+0x188>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ec4:	e004      	b.n	8008ed0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d903      	bls.n	8008ee2 <pvPortMalloc+0xa6>
 8008eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1f1      	bne.n	8008ec6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ee2:	4b35      	ldr	r3, [pc, #212]	@ (8008fb8 <pvPortMalloc+0x17c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d04c      	beq.n	8008f86 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2208      	movs	r2, #8
 8008ef2:	4413      	add	r3, r2
 8008ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	1ad2      	subs	r2, r2, r3
 8008f06:	2308      	movs	r3, #8
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d920      	bls.n	8008f50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4413      	add	r3, r2
 8008f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	f003 0307 	and.w	r3, r3, #7
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <pvPortMalloc+0xfc>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	613b      	str	r3, [r7, #16]
}
 8008f32:	bf00      	nop
 8008f34:	bf00      	nop
 8008f36:	e7fd      	b.n	8008f34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f4a:	69b8      	ldr	r0, [r7, #24]
 8008f4c:	f000 f8fc 	bl	8009148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f50:	4b1b      	ldr	r3, [pc, #108]	@ (8008fc0 <pvPortMalloc+0x184>)
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	4a19      	ldr	r2, [pc, #100]	@ (8008fc0 <pvPortMalloc+0x184>)
 8008f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f5e:	4b18      	ldr	r3, [pc, #96]	@ (8008fc0 <pvPortMalloc+0x184>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	4b19      	ldr	r3, [pc, #100]	@ (8008fc8 <pvPortMalloc+0x18c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d203      	bcs.n	8008f72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f6a:	4b15      	ldr	r3, [pc, #84]	@ (8008fc0 <pvPortMalloc+0x184>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a16      	ldr	r2, [pc, #88]	@ (8008fc8 <pvPortMalloc+0x18c>)
 8008f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	4b11      	ldr	r3, [pc, #68]	@ (8008fbc <pvPortMalloc+0x180>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f86:	f7fe fd21 	bl	80079cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	f003 0307 	and.w	r3, r3, #7
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <pvPortMalloc+0x170>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	60fb      	str	r3, [r7, #12]
}
 8008fa6:	bf00      	nop
 8008fa8:	bf00      	nop
 8008faa:	e7fd      	b.n	8008fa8 <pvPortMalloc+0x16c>
	return pvReturn;
 8008fac:	69fb      	ldr	r3, [r7, #28]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3728      	adds	r7, #40	@ 0x28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20002118 	.word	0x20002118
 8008fbc:	20002124 	.word	0x20002124
 8008fc0:	2000211c 	.word	0x2000211c
 8008fc4:	20002110 	.word	0x20002110
 8008fc8:	20002120 	.word	0x20002120

08008fcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d04a      	beq.n	8009074 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fde:	2308      	movs	r3, #8
 8008fe0:	425b      	negs	r3, r3
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	4b22      	ldr	r3, [pc, #136]	@ (800907c <vPortFree+0xb0>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10b      	bne.n	8009012 <vPortFree+0x46>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	60fb      	str	r3, [r7, #12]
}
 800900c:	bf00      	nop
 800900e:	bf00      	nop
 8009010:	e7fd      	b.n	800900e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00b      	beq.n	8009032 <vPortFree+0x66>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	60bb      	str	r3, [r7, #8]
}
 800902c:	bf00      	nop
 800902e:	bf00      	nop
 8009030:	e7fd      	b.n	800902e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	4b11      	ldr	r3, [pc, #68]	@ (800907c <vPortFree+0xb0>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4013      	ands	r3, r2
 800903c:	2b00      	cmp	r3, #0
 800903e:	d019      	beq.n	8009074 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d115      	bne.n	8009074 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	4b0b      	ldr	r3, [pc, #44]	@ (800907c <vPortFree+0xb0>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	43db      	mvns	r3, r3
 8009052:	401a      	ands	r2, r3
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009058:	f7fe fcaa 	bl	80079b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	4b07      	ldr	r3, [pc, #28]	@ (8009080 <vPortFree+0xb4>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4413      	add	r3, r2
 8009066:	4a06      	ldr	r2, [pc, #24]	@ (8009080 <vPortFree+0xb4>)
 8009068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800906a:	6938      	ldr	r0, [r7, #16]
 800906c:	f000 f86c 	bl	8009148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009070:	f7fe fcac 	bl	80079cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009074:	bf00      	nop
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	20002124 	.word	0x20002124
 8009080:	2000211c 	.word	0x2000211c

08009084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800908a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800908e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009090:	4b27      	ldr	r3, [pc, #156]	@ (8009130 <prvHeapInit+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00c      	beq.n	80090b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3307      	adds	r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	4a1f      	ldr	r2, [pc, #124]	@ (8009130 <prvHeapInit+0xac>)
 80090b4:	4413      	add	r3, r2
 80090b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009134 <prvHeapInit+0xb0>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090c2:	4b1c      	ldr	r3, [pc, #112]	@ (8009134 <prvHeapInit+0xb0>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4413      	add	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090d0:	2208      	movs	r2, #8
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4a15      	ldr	r2, [pc, #84]	@ (8009138 <prvHeapInit+0xb4>)
 80090e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090e6:	4b14      	ldr	r3, [pc, #80]	@ (8009138 <prvHeapInit+0xb4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ee:	4b12      	ldr	r3, [pc, #72]	@ (8009138 <prvHeapInit+0xb4>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009104:	4b0c      	ldr	r3, [pc, #48]	@ (8009138 <prvHeapInit+0xb4>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a0a      	ldr	r2, [pc, #40]	@ (800913c <prvHeapInit+0xb8>)
 8009112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4a09      	ldr	r2, [pc, #36]	@ (8009140 <prvHeapInit+0xbc>)
 800911a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800911c:	4b09      	ldr	r3, [pc, #36]	@ (8009144 <prvHeapInit+0xc0>)
 800911e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009122:	601a      	str	r2, [r3, #0]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	20001110 	.word	0x20001110
 8009134:	20002110 	.word	0x20002110
 8009138:	20002118 	.word	0x20002118
 800913c:	20002120 	.word	0x20002120
 8009140:	2000211c 	.word	0x2000211c
 8009144:	20002124 	.word	0x20002124

08009148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009150:	4b28      	ldr	r3, [pc, #160]	@ (80091f4 <prvInsertBlockIntoFreeList+0xac>)
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e002      	b.n	800915c <prvInsertBlockIntoFreeList+0x14>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	429a      	cmp	r2, r3
 8009164:	d8f7      	bhi.n	8009156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4413      	add	r3, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d108      	bne.n	800918a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	441a      	add	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	441a      	add	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d118      	bne.n	80091d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b15      	ldr	r3, [pc, #84]	@ (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d00d      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	441a      	add	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	e008      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091c6:	4b0c      	ldr	r3, [pc, #48]	@ (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	e003      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d002      	beq.n	80091e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091e6:	bf00      	nop
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20002110 	.word	0x20002110
 80091f8:	20002118 	.word	0x20002118

080091fc <__cvt>:
 80091fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	ec57 6b10 	vmov	r6, r7, d0
 8009204:	2f00      	cmp	r7, #0
 8009206:	460c      	mov	r4, r1
 8009208:	4619      	mov	r1, r3
 800920a:	463b      	mov	r3, r7
 800920c:	bfbb      	ittet	lt
 800920e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009212:	461f      	movlt	r7, r3
 8009214:	2300      	movge	r3, #0
 8009216:	232d      	movlt	r3, #45	@ 0x2d
 8009218:	700b      	strb	r3, [r1, #0]
 800921a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800921c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009220:	4691      	mov	r9, r2
 8009222:	f023 0820 	bic.w	r8, r3, #32
 8009226:	bfbc      	itt	lt
 8009228:	4632      	movlt	r2, r6
 800922a:	4616      	movlt	r6, r2
 800922c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009230:	d005      	beq.n	800923e <__cvt+0x42>
 8009232:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009236:	d100      	bne.n	800923a <__cvt+0x3e>
 8009238:	3401      	adds	r4, #1
 800923a:	2102      	movs	r1, #2
 800923c:	e000      	b.n	8009240 <__cvt+0x44>
 800923e:	2103      	movs	r1, #3
 8009240:	ab03      	add	r3, sp, #12
 8009242:	9301      	str	r3, [sp, #4]
 8009244:	ab02      	add	r3, sp, #8
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	ec47 6b10 	vmov	d0, r6, r7
 800924c:	4653      	mov	r3, sl
 800924e:	4622      	mov	r2, r4
 8009250:	f000 ffa2 	bl	800a198 <_dtoa_r>
 8009254:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009258:	4605      	mov	r5, r0
 800925a:	d119      	bne.n	8009290 <__cvt+0x94>
 800925c:	f019 0f01 	tst.w	r9, #1
 8009260:	d00e      	beq.n	8009280 <__cvt+0x84>
 8009262:	eb00 0904 	add.w	r9, r0, r4
 8009266:	2200      	movs	r2, #0
 8009268:	2300      	movs	r3, #0
 800926a:	4630      	mov	r0, r6
 800926c:	4639      	mov	r1, r7
 800926e:	f7f7 fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009272:	b108      	cbz	r0, 8009278 <__cvt+0x7c>
 8009274:	f8cd 900c 	str.w	r9, [sp, #12]
 8009278:	2230      	movs	r2, #48	@ 0x30
 800927a:	9b03      	ldr	r3, [sp, #12]
 800927c:	454b      	cmp	r3, r9
 800927e:	d31e      	bcc.n	80092be <__cvt+0xc2>
 8009280:	9b03      	ldr	r3, [sp, #12]
 8009282:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009284:	1b5b      	subs	r3, r3, r5
 8009286:	4628      	mov	r0, r5
 8009288:	6013      	str	r3, [r2, #0]
 800928a:	b004      	add	sp, #16
 800928c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009290:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009294:	eb00 0904 	add.w	r9, r0, r4
 8009298:	d1e5      	bne.n	8009266 <__cvt+0x6a>
 800929a:	7803      	ldrb	r3, [r0, #0]
 800929c:	2b30      	cmp	r3, #48	@ 0x30
 800929e:	d10a      	bne.n	80092b6 <__cvt+0xba>
 80092a0:	2200      	movs	r2, #0
 80092a2:	2300      	movs	r3, #0
 80092a4:	4630      	mov	r0, r6
 80092a6:	4639      	mov	r1, r7
 80092a8:	f7f7 fc0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ac:	b918      	cbnz	r0, 80092b6 <__cvt+0xba>
 80092ae:	f1c4 0401 	rsb	r4, r4, #1
 80092b2:	f8ca 4000 	str.w	r4, [sl]
 80092b6:	f8da 3000 	ldr.w	r3, [sl]
 80092ba:	4499      	add	r9, r3
 80092bc:	e7d3      	b.n	8009266 <__cvt+0x6a>
 80092be:	1c59      	adds	r1, r3, #1
 80092c0:	9103      	str	r1, [sp, #12]
 80092c2:	701a      	strb	r2, [r3, #0]
 80092c4:	e7d9      	b.n	800927a <__cvt+0x7e>

080092c6 <__exponent>:
 80092c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092c8:	2900      	cmp	r1, #0
 80092ca:	bfba      	itte	lt
 80092cc:	4249      	neglt	r1, r1
 80092ce:	232d      	movlt	r3, #45	@ 0x2d
 80092d0:	232b      	movge	r3, #43	@ 0x2b
 80092d2:	2909      	cmp	r1, #9
 80092d4:	7002      	strb	r2, [r0, #0]
 80092d6:	7043      	strb	r3, [r0, #1]
 80092d8:	dd29      	ble.n	800932e <__exponent+0x68>
 80092da:	f10d 0307 	add.w	r3, sp, #7
 80092de:	461d      	mov	r5, r3
 80092e0:	270a      	movs	r7, #10
 80092e2:	461a      	mov	r2, r3
 80092e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80092e8:	fb07 1416 	mls	r4, r7, r6, r1
 80092ec:	3430      	adds	r4, #48	@ 0x30
 80092ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80092f2:	460c      	mov	r4, r1
 80092f4:	2c63      	cmp	r4, #99	@ 0x63
 80092f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80092fa:	4631      	mov	r1, r6
 80092fc:	dcf1      	bgt.n	80092e2 <__exponent+0x1c>
 80092fe:	3130      	adds	r1, #48	@ 0x30
 8009300:	1e94      	subs	r4, r2, #2
 8009302:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009306:	1c41      	adds	r1, r0, #1
 8009308:	4623      	mov	r3, r4
 800930a:	42ab      	cmp	r3, r5
 800930c:	d30a      	bcc.n	8009324 <__exponent+0x5e>
 800930e:	f10d 0309 	add.w	r3, sp, #9
 8009312:	1a9b      	subs	r3, r3, r2
 8009314:	42ac      	cmp	r4, r5
 8009316:	bf88      	it	hi
 8009318:	2300      	movhi	r3, #0
 800931a:	3302      	adds	r3, #2
 800931c:	4403      	add	r3, r0
 800931e:	1a18      	subs	r0, r3, r0
 8009320:	b003      	add	sp, #12
 8009322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009324:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009328:	f801 6f01 	strb.w	r6, [r1, #1]!
 800932c:	e7ed      	b.n	800930a <__exponent+0x44>
 800932e:	2330      	movs	r3, #48	@ 0x30
 8009330:	3130      	adds	r1, #48	@ 0x30
 8009332:	7083      	strb	r3, [r0, #2]
 8009334:	70c1      	strb	r1, [r0, #3]
 8009336:	1d03      	adds	r3, r0, #4
 8009338:	e7f1      	b.n	800931e <__exponent+0x58>
	...

0800933c <_printf_float>:
 800933c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009340:	b08d      	sub	sp, #52	@ 0x34
 8009342:	460c      	mov	r4, r1
 8009344:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009348:	4616      	mov	r6, r2
 800934a:	461f      	mov	r7, r3
 800934c:	4605      	mov	r5, r0
 800934e:	f000 fe13 	bl	8009f78 <_localeconv_r>
 8009352:	6803      	ldr	r3, [r0, #0]
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	4618      	mov	r0, r3
 8009358:	f7f6 ff8a 	bl	8000270 <strlen>
 800935c:	2300      	movs	r3, #0
 800935e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009360:	f8d8 3000 	ldr.w	r3, [r8]
 8009364:	9005      	str	r0, [sp, #20]
 8009366:	3307      	adds	r3, #7
 8009368:	f023 0307 	bic.w	r3, r3, #7
 800936c:	f103 0208 	add.w	r2, r3, #8
 8009370:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009374:	f8d4 b000 	ldr.w	fp, [r4]
 8009378:	f8c8 2000 	str.w	r2, [r8]
 800937c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009380:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009384:	9307      	str	r3, [sp, #28]
 8009386:	f8cd 8018 	str.w	r8, [sp, #24]
 800938a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800938e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009392:	4b9c      	ldr	r3, [pc, #624]	@ (8009604 <_printf_float+0x2c8>)
 8009394:	f04f 32ff 	mov.w	r2, #4294967295
 8009398:	f7f7 fbc8 	bl	8000b2c <__aeabi_dcmpun>
 800939c:	bb70      	cbnz	r0, 80093fc <_printf_float+0xc0>
 800939e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093a2:	4b98      	ldr	r3, [pc, #608]	@ (8009604 <_printf_float+0x2c8>)
 80093a4:	f04f 32ff 	mov.w	r2, #4294967295
 80093a8:	f7f7 fba2 	bl	8000af0 <__aeabi_dcmple>
 80093ac:	bb30      	cbnz	r0, 80093fc <_printf_float+0xc0>
 80093ae:	2200      	movs	r2, #0
 80093b0:	2300      	movs	r3, #0
 80093b2:	4640      	mov	r0, r8
 80093b4:	4649      	mov	r1, r9
 80093b6:	f7f7 fb91 	bl	8000adc <__aeabi_dcmplt>
 80093ba:	b110      	cbz	r0, 80093c2 <_printf_float+0x86>
 80093bc:	232d      	movs	r3, #45	@ 0x2d
 80093be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093c2:	4a91      	ldr	r2, [pc, #580]	@ (8009608 <_printf_float+0x2cc>)
 80093c4:	4b91      	ldr	r3, [pc, #580]	@ (800960c <_printf_float+0x2d0>)
 80093c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80093ca:	bf94      	ite	ls
 80093cc:	4690      	movls	r8, r2
 80093ce:	4698      	movhi	r8, r3
 80093d0:	2303      	movs	r3, #3
 80093d2:	6123      	str	r3, [r4, #16]
 80093d4:	f02b 0304 	bic.w	r3, fp, #4
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	f04f 0900 	mov.w	r9, #0
 80093de:	9700      	str	r7, [sp, #0]
 80093e0:	4633      	mov	r3, r6
 80093e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80093e4:	4621      	mov	r1, r4
 80093e6:	4628      	mov	r0, r5
 80093e8:	f000 f9d2 	bl	8009790 <_printf_common>
 80093ec:	3001      	adds	r0, #1
 80093ee:	f040 808d 	bne.w	800950c <_printf_float+0x1d0>
 80093f2:	f04f 30ff 	mov.w	r0, #4294967295
 80093f6:	b00d      	add	sp, #52	@ 0x34
 80093f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fc:	4642      	mov	r2, r8
 80093fe:	464b      	mov	r3, r9
 8009400:	4640      	mov	r0, r8
 8009402:	4649      	mov	r1, r9
 8009404:	f7f7 fb92 	bl	8000b2c <__aeabi_dcmpun>
 8009408:	b140      	cbz	r0, 800941c <_printf_float+0xe0>
 800940a:	464b      	mov	r3, r9
 800940c:	2b00      	cmp	r3, #0
 800940e:	bfbc      	itt	lt
 8009410:	232d      	movlt	r3, #45	@ 0x2d
 8009412:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009416:	4a7e      	ldr	r2, [pc, #504]	@ (8009610 <_printf_float+0x2d4>)
 8009418:	4b7e      	ldr	r3, [pc, #504]	@ (8009614 <_printf_float+0x2d8>)
 800941a:	e7d4      	b.n	80093c6 <_printf_float+0x8a>
 800941c:	6863      	ldr	r3, [r4, #4]
 800941e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009422:	9206      	str	r2, [sp, #24]
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	d13b      	bne.n	80094a0 <_printf_float+0x164>
 8009428:	2306      	movs	r3, #6
 800942a:	6063      	str	r3, [r4, #4]
 800942c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009430:	2300      	movs	r3, #0
 8009432:	6022      	str	r2, [r4, #0]
 8009434:	9303      	str	r3, [sp, #12]
 8009436:	ab0a      	add	r3, sp, #40	@ 0x28
 8009438:	e9cd a301 	strd	sl, r3, [sp, #4]
 800943c:	ab09      	add	r3, sp, #36	@ 0x24
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	6861      	ldr	r1, [r4, #4]
 8009442:	ec49 8b10 	vmov	d0, r8, r9
 8009446:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800944a:	4628      	mov	r0, r5
 800944c:	f7ff fed6 	bl	80091fc <__cvt>
 8009450:	9b06      	ldr	r3, [sp, #24]
 8009452:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009454:	2b47      	cmp	r3, #71	@ 0x47
 8009456:	4680      	mov	r8, r0
 8009458:	d129      	bne.n	80094ae <_printf_float+0x172>
 800945a:	1cc8      	adds	r0, r1, #3
 800945c:	db02      	blt.n	8009464 <_printf_float+0x128>
 800945e:	6863      	ldr	r3, [r4, #4]
 8009460:	4299      	cmp	r1, r3
 8009462:	dd41      	ble.n	80094e8 <_printf_float+0x1ac>
 8009464:	f1aa 0a02 	sub.w	sl, sl, #2
 8009468:	fa5f fa8a 	uxtb.w	sl, sl
 800946c:	3901      	subs	r1, #1
 800946e:	4652      	mov	r2, sl
 8009470:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009474:	9109      	str	r1, [sp, #36]	@ 0x24
 8009476:	f7ff ff26 	bl	80092c6 <__exponent>
 800947a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800947c:	1813      	adds	r3, r2, r0
 800947e:	2a01      	cmp	r2, #1
 8009480:	4681      	mov	r9, r0
 8009482:	6123      	str	r3, [r4, #16]
 8009484:	dc02      	bgt.n	800948c <_printf_float+0x150>
 8009486:	6822      	ldr	r2, [r4, #0]
 8009488:	07d2      	lsls	r2, r2, #31
 800948a:	d501      	bpl.n	8009490 <_printf_float+0x154>
 800948c:	3301      	adds	r3, #1
 800948e:	6123      	str	r3, [r4, #16]
 8009490:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0a2      	beq.n	80093de <_printf_float+0xa2>
 8009498:	232d      	movs	r3, #45	@ 0x2d
 800949a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800949e:	e79e      	b.n	80093de <_printf_float+0xa2>
 80094a0:	9a06      	ldr	r2, [sp, #24]
 80094a2:	2a47      	cmp	r2, #71	@ 0x47
 80094a4:	d1c2      	bne.n	800942c <_printf_float+0xf0>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1c0      	bne.n	800942c <_printf_float+0xf0>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e7bd      	b.n	800942a <_printf_float+0xee>
 80094ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80094b2:	d9db      	bls.n	800946c <_printf_float+0x130>
 80094b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80094b8:	d118      	bne.n	80094ec <_printf_float+0x1b0>
 80094ba:	2900      	cmp	r1, #0
 80094bc:	6863      	ldr	r3, [r4, #4]
 80094be:	dd0b      	ble.n	80094d8 <_printf_float+0x19c>
 80094c0:	6121      	str	r1, [r4, #16]
 80094c2:	b913      	cbnz	r3, 80094ca <_printf_float+0x18e>
 80094c4:	6822      	ldr	r2, [r4, #0]
 80094c6:	07d0      	lsls	r0, r2, #31
 80094c8:	d502      	bpl.n	80094d0 <_printf_float+0x194>
 80094ca:	3301      	adds	r3, #1
 80094cc:	440b      	add	r3, r1
 80094ce:	6123      	str	r3, [r4, #16]
 80094d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80094d2:	f04f 0900 	mov.w	r9, #0
 80094d6:	e7db      	b.n	8009490 <_printf_float+0x154>
 80094d8:	b913      	cbnz	r3, 80094e0 <_printf_float+0x1a4>
 80094da:	6822      	ldr	r2, [r4, #0]
 80094dc:	07d2      	lsls	r2, r2, #31
 80094de:	d501      	bpl.n	80094e4 <_printf_float+0x1a8>
 80094e0:	3302      	adds	r3, #2
 80094e2:	e7f4      	b.n	80094ce <_printf_float+0x192>
 80094e4:	2301      	movs	r3, #1
 80094e6:	e7f2      	b.n	80094ce <_printf_float+0x192>
 80094e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80094ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094ee:	4299      	cmp	r1, r3
 80094f0:	db05      	blt.n	80094fe <_printf_float+0x1c2>
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	6121      	str	r1, [r4, #16]
 80094f6:	07d8      	lsls	r0, r3, #31
 80094f8:	d5ea      	bpl.n	80094d0 <_printf_float+0x194>
 80094fa:	1c4b      	adds	r3, r1, #1
 80094fc:	e7e7      	b.n	80094ce <_printf_float+0x192>
 80094fe:	2900      	cmp	r1, #0
 8009500:	bfd4      	ite	le
 8009502:	f1c1 0202 	rsble	r2, r1, #2
 8009506:	2201      	movgt	r2, #1
 8009508:	4413      	add	r3, r2
 800950a:	e7e0      	b.n	80094ce <_printf_float+0x192>
 800950c:	6823      	ldr	r3, [r4, #0]
 800950e:	055a      	lsls	r2, r3, #21
 8009510:	d407      	bmi.n	8009522 <_printf_float+0x1e6>
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	4642      	mov	r2, r8
 8009516:	4631      	mov	r1, r6
 8009518:	4628      	mov	r0, r5
 800951a:	47b8      	blx	r7
 800951c:	3001      	adds	r0, #1
 800951e:	d12b      	bne.n	8009578 <_printf_float+0x23c>
 8009520:	e767      	b.n	80093f2 <_printf_float+0xb6>
 8009522:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009526:	f240 80dd 	bls.w	80096e4 <_printf_float+0x3a8>
 800952a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800952e:	2200      	movs	r2, #0
 8009530:	2300      	movs	r3, #0
 8009532:	f7f7 fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009536:	2800      	cmp	r0, #0
 8009538:	d033      	beq.n	80095a2 <_printf_float+0x266>
 800953a:	4a37      	ldr	r2, [pc, #220]	@ (8009618 <_printf_float+0x2dc>)
 800953c:	2301      	movs	r3, #1
 800953e:	4631      	mov	r1, r6
 8009540:	4628      	mov	r0, r5
 8009542:	47b8      	blx	r7
 8009544:	3001      	adds	r0, #1
 8009546:	f43f af54 	beq.w	80093f2 <_printf_float+0xb6>
 800954a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800954e:	4543      	cmp	r3, r8
 8009550:	db02      	blt.n	8009558 <_printf_float+0x21c>
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	07d8      	lsls	r0, r3, #31
 8009556:	d50f      	bpl.n	8009578 <_printf_float+0x23c>
 8009558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800955c:	4631      	mov	r1, r6
 800955e:	4628      	mov	r0, r5
 8009560:	47b8      	blx	r7
 8009562:	3001      	adds	r0, #1
 8009564:	f43f af45 	beq.w	80093f2 <_printf_float+0xb6>
 8009568:	f04f 0900 	mov.w	r9, #0
 800956c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009570:	f104 0a1a 	add.w	sl, r4, #26
 8009574:	45c8      	cmp	r8, r9
 8009576:	dc09      	bgt.n	800958c <_printf_float+0x250>
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	079b      	lsls	r3, r3, #30
 800957c:	f100 8103 	bmi.w	8009786 <_printf_float+0x44a>
 8009580:	68e0      	ldr	r0, [r4, #12]
 8009582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009584:	4298      	cmp	r0, r3
 8009586:	bfb8      	it	lt
 8009588:	4618      	movlt	r0, r3
 800958a:	e734      	b.n	80093f6 <_printf_float+0xba>
 800958c:	2301      	movs	r3, #1
 800958e:	4652      	mov	r2, sl
 8009590:	4631      	mov	r1, r6
 8009592:	4628      	mov	r0, r5
 8009594:	47b8      	blx	r7
 8009596:	3001      	adds	r0, #1
 8009598:	f43f af2b 	beq.w	80093f2 <_printf_float+0xb6>
 800959c:	f109 0901 	add.w	r9, r9, #1
 80095a0:	e7e8      	b.n	8009574 <_printf_float+0x238>
 80095a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	dc39      	bgt.n	800961c <_printf_float+0x2e0>
 80095a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009618 <_printf_float+0x2dc>)
 80095aa:	2301      	movs	r3, #1
 80095ac:	4631      	mov	r1, r6
 80095ae:	4628      	mov	r0, r5
 80095b0:	47b8      	blx	r7
 80095b2:	3001      	adds	r0, #1
 80095b4:	f43f af1d 	beq.w	80093f2 <_printf_float+0xb6>
 80095b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80095bc:	ea59 0303 	orrs.w	r3, r9, r3
 80095c0:	d102      	bne.n	80095c8 <_printf_float+0x28c>
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	07d9      	lsls	r1, r3, #31
 80095c6:	d5d7      	bpl.n	8009578 <_printf_float+0x23c>
 80095c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095cc:	4631      	mov	r1, r6
 80095ce:	4628      	mov	r0, r5
 80095d0:	47b8      	blx	r7
 80095d2:	3001      	adds	r0, #1
 80095d4:	f43f af0d 	beq.w	80093f2 <_printf_float+0xb6>
 80095d8:	f04f 0a00 	mov.w	sl, #0
 80095dc:	f104 0b1a 	add.w	fp, r4, #26
 80095e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e2:	425b      	negs	r3, r3
 80095e4:	4553      	cmp	r3, sl
 80095e6:	dc01      	bgt.n	80095ec <_printf_float+0x2b0>
 80095e8:	464b      	mov	r3, r9
 80095ea:	e793      	b.n	8009514 <_printf_float+0x1d8>
 80095ec:	2301      	movs	r3, #1
 80095ee:	465a      	mov	r2, fp
 80095f0:	4631      	mov	r1, r6
 80095f2:	4628      	mov	r0, r5
 80095f4:	47b8      	blx	r7
 80095f6:	3001      	adds	r0, #1
 80095f8:	f43f aefb 	beq.w	80093f2 <_printf_float+0xb6>
 80095fc:	f10a 0a01 	add.w	sl, sl, #1
 8009600:	e7ee      	b.n	80095e0 <_printf_float+0x2a4>
 8009602:	bf00      	nop
 8009604:	7fefffff 	.word	0x7fefffff
 8009608:	0800c144 	.word	0x0800c144
 800960c:	0800c148 	.word	0x0800c148
 8009610:	0800c14c 	.word	0x0800c14c
 8009614:	0800c150 	.word	0x0800c150
 8009618:	0800c154 	.word	0x0800c154
 800961c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800961e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009622:	4553      	cmp	r3, sl
 8009624:	bfa8      	it	ge
 8009626:	4653      	movge	r3, sl
 8009628:	2b00      	cmp	r3, #0
 800962a:	4699      	mov	r9, r3
 800962c:	dc36      	bgt.n	800969c <_printf_float+0x360>
 800962e:	f04f 0b00 	mov.w	fp, #0
 8009632:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009636:	f104 021a 	add.w	r2, r4, #26
 800963a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800963c:	9306      	str	r3, [sp, #24]
 800963e:	eba3 0309 	sub.w	r3, r3, r9
 8009642:	455b      	cmp	r3, fp
 8009644:	dc31      	bgt.n	80096aa <_printf_float+0x36e>
 8009646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009648:	459a      	cmp	sl, r3
 800964a:	dc3a      	bgt.n	80096c2 <_printf_float+0x386>
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	07da      	lsls	r2, r3, #31
 8009650:	d437      	bmi.n	80096c2 <_printf_float+0x386>
 8009652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009654:	ebaa 0903 	sub.w	r9, sl, r3
 8009658:	9b06      	ldr	r3, [sp, #24]
 800965a:	ebaa 0303 	sub.w	r3, sl, r3
 800965e:	4599      	cmp	r9, r3
 8009660:	bfa8      	it	ge
 8009662:	4699      	movge	r9, r3
 8009664:	f1b9 0f00 	cmp.w	r9, #0
 8009668:	dc33      	bgt.n	80096d2 <_printf_float+0x396>
 800966a:	f04f 0800 	mov.w	r8, #0
 800966e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009672:	f104 0b1a 	add.w	fp, r4, #26
 8009676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009678:	ebaa 0303 	sub.w	r3, sl, r3
 800967c:	eba3 0309 	sub.w	r3, r3, r9
 8009680:	4543      	cmp	r3, r8
 8009682:	f77f af79 	ble.w	8009578 <_printf_float+0x23c>
 8009686:	2301      	movs	r3, #1
 8009688:	465a      	mov	r2, fp
 800968a:	4631      	mov	r1, r6
 800968c:	4628      	mov	r0, r5
 800968e:	47b8      	blx	r7
 8009690:	3001      	adds	r0, #1
 8009692:	f43f aeae 	beq.w	80093f2 <_printf_float+0xb6>
 8009696:	f108 0801 	add.w	r8, r8, #1
 800969a:	e7ec      	b.n	8009676 <_printf_float+0x33a>
 800969c:	4642      	mov	r2, r8
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	d1c2      	bne.n	800962e <_printf_float+0x2f2>
 80096a8:	e6a3      	b.n	80093f2 <_printf_float+0xb6>
 80096aa:	2301      	movs	r3, #1
 80096ac:	4631      	mov	r1, r6
 80096ae:	4628      	mov	r0, r5
 80096b0:	9206      	str	r2, [sp, #24]
 80096b2:	47b8      	blx	r7
 80096b4:	3001      	adds	r0, #1
 80096b6:	f43f ae9c 	beq.w	80093f2 <_printf_float+0xb6>
 80096ba:	9a06      	ldr	r2, [sp, #24]
 80096bc:	f10b 0b01 	add.w	fp, fp, #1
 80096c0:	e7bb      	b.n	800963a <_printf_float+0x2fe>
 80096c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096c6:	4631      	mov	r1, r6
 80096c8:	4628      	mov	r0, r5
 80096ca:	47b8      	blx	r7
 80096cc:	3001      	adds	r0, #1
 80096ce:	d1c0      	bne.n	8009652 <_printf_float+0x316>
 80096d0:	e68f      	b.n	80093f2 <_printf_float+0xb6>
 80096d2:	9a06      	ldr	r2, [sp, #24]
 80096d4:	464b      	mov	r3, r9
 80096d6:	4442      	add	r2, r8
 80096d8:	4631      	mov	r1, r6
 80096da:	4628      	mov	r0, r5
 80096dc:	47b8      	blx	r7
 80096de:	3001      	adds	r0, #1
 80096e0:	d1c3      	bne.n	800966a <_printf_float+0x32e>
 80096e2:	e686      	b.n	80093f2 <_printf_float+0xb6>
 80096e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80096e8:	f1ba 0f01 	cmp.w	sl, #1
 80096ec:	dc01      	bgt.n	80096f2 <_printf_float+0x3b6>
 80096ee:	07db      	lsls	r3, r3, #31
 80096f0:	d536      	bpl.n	8009760 <_printf_float+0x424>
 80096f2:	2301      	movs	r3, #1
 80096f4:	4642      	mov	r2, r8
 80096f6:	4631      	mov	r1, r6
 80096f8:	4628      	mov	r0, r5
 80096fa:	47b8      	blx	r7
 80096fc:	3001      	adds	r0, #1
 80096fe:	f43f ae78 	beq.w	80093f2 <_printf_float+0xb6>
 8009702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009706:	4631      	mov	r1, r6
 8009708:	4628      	mov	r0, r5
 800970a:	47b8      	blx	r7
 800970c:	3001      	adds	r0, #1
 800970e:	f43f ae70 	beq.w	80093f2 <_printf_float+0xb6>
 8009712:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009716:	2200      	movs	r2, #0
 8009718:	2300      	movs	r3, #0
 800971a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800971e:	f7f7 f9d3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009722:	b9c0      	cbnz	r0, 8009756 <_printf_float+0x41a>
 8009724:	4653      	mov	r3, sl
 8009726:	f108 0201 	add.w	r2, r8, #1
 800972a:	4631      	mov	r1, r6
 800972c:	4628      	mov	r0, r5
 800972e:	47b8      	blx	r7
 8009730:	3001      	adds	r0, #1
 8009732:	d10c      	bne.n	800974e <_printf_float+0x412>
 8009734:	e65d      	b.n	80093f2 <_printf_float+0xb6>
 8009736:	2301      	movs	r3, #1
 8009738:	465a      	mov	r2, fp
 800973a:	4631      	mov	r1, r6
 800973c:	4628      	mov	r0, r5
 800973e:	47b8      	blx	r7
 8009740:	3001      	adds	r0, #1
 8009742:	f43f ae56 	beq.w	80093f2 <_printf_float+0xb6>
 8009746:	f108 0801 	add.w	r8, r8, #1
 800974a:	45d0      	cmp	r8, sl
 800974c:	dbf3      	blt.n	8009736 <_printf_float+0x3fa>
 800974e:	464b      	mov	r3, r9
 8009750:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009754:	e6df      	b.n	8009516 <_printf_float+0x1da>
 8009756:	f04f 0800 	mov.w	r8, #0
 800975a:	f104 0b1a 	add.w	fp, r4, #26
 800975e:	e7f4      	b.n	800974a <_printf_float+0x40e>
 8009760:	2301      	movs	r3, #1
 8009762:	4642      	mov	r2, r8
 8009764:	e7e1      	b.n	800972a <_printf_float+0x3ee>
 8009766:	2301      	movs	r3, #1
 8009768:	464a      	mov	r2, r9
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	47b8      	blx	r7
 8009770:	3001      	adds	r0, #1
 8009772:	f43f ae3e 	beq.w	80093f2 <_printf_float+0xb6>
 8009776:	f108 0801 	add.w	r8, r8, #1
 800977a:	68e3      	ldr	r3, [r4, #12]
 800977c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800977e:	1a5b      	subs	r3, r3, r1
 8009780:	4543      	cmp	r3, r8
 8009782:	dcf0      	bgt.n	8009766 <_printf_float+0x42a>
 8009784:	e6fc      	b.n	8009580 <_printf_float+0x244>
 8009786:	f04f 0800 	mov.w	r8, #0
 800978a:	f104 0919 	add.w	r9, r4, #25
 800978e:	e7f4      	b.n	800977a <_printf_float+0x43e>

08009790 <_printf_common>:
 8009790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009794:	4616      	mov	r6, r2
 8009796:	4698      	mov	r8, r3
 8009798:	688a      	ldr	r2, [r1, #8]
 800979a:	690b      	ldr	r3, [r1, #16]
 800979c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097a0:	4293      	cmp	r3, r2
 80097a2:	bfb8      	it	lt
 80097a4:	4613      	movlt	r3, r2
 80097a6:	6033      	str	r3, [r6, #0]
 80097a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80097ac:	4607      	mov	r7, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	b10a      	cbz	r2, 80097b6 <_printf_common+0x26>
 80097b2:	3301      	adds	r3, #1
 80097b4:	6033      	str	r3, [r6, #0]
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	0699      	lsls	r1, r3, #26
 80097ba:	bf42      	ittt	mi
 80097bc:	6833      	ldrmi	r3, [r6, #0]
 80097be:	3302      	addmi	r3, #2
 80097c0:	6033      	strmi	r3, [r6, #0]
 80097c2:	6825      	ldr	r5, [r4, #0]
 80097c4:	f015 0506 	ands.w	r5, r5, #6
 80097c8:	d106      	bne.n	80097d8 <_printf_common+0x48>
 80097ca:	f104 0a19 	add.w	sl, r4, #25
 80097ce:	68e3      	ldr	r3, [r4, #12]
 80097d0:	6832      	ldr	r2, [r6, #0]
 80097d2:	1a9b      	subs	r3, r3, r2
 80097d4:	42ab      	cmp	r3, r5
 80097d6:	dc26      	bgt.n	8009826 <_printf_common+0x96>
 80097d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097dc:	6822      	ldr	r2, [r4, #0]
 80097de:	3b00      	subs	r3, #0
 80097e0:	bf18      	it	ne
 80097e2:	2301      	movne	r3, #1
 80097e4:	0692      	lsls	r2, r2, #26
 80097e6:	d42b      	bmi.n	8009840 <_printf_common+0xb0>
 80097e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097ec:	4641      	mov	r1, r8
 80097ee:	4638      	mov	r0, r7
 80097f0:	47c8      	blx	r9
 80097f2:	3001      	adds	r0, #1
 80097f4:	d01e      	beq.n	8009834 <_printf_common+0xa4>
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	6922      	ldr	r2, [r4, #16]
 80097fa:	f003 0306 	and.w	r3, r3, #6
 80097fe:	2b04      	cmp	r3, #4
 8009800:	bf02      	ittt	eq
 8009802:	68e5      	ldreq	r5, [r4, #12]
 8009804:	6833      	ldreq	r3, [r6, #0]
 8009806:	1aed      	subeq	r5, r5, r3
 8009808:	68a3      	ldr	r3, [r4, #8]
 800980a:	bf0c      	ite	eq
 800980c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009810:	2500      	movne	r5, #0
 8009812:	4293      	cmp	r3, r2
 8009814:	bfc4      	itt	gt
 8009816:	1a9b      	subgt	r3, r3, r2
 8009818:	18ed      	addgt	r5, r5, r3
 800981a:	2600      	movs	r6, #0
 800981c:	341a      	adds	r4, #26
 800981e:	42b5      	cmp	r5, r6
 8009820:	d11a      	bne.n	8009858 <_printf_common+0xc8>
 8009822:	2000      	movs	r0, #0
 8009824:	e008      	b.n	8009838 <_printf_common+0xa8>
 8009826:	2301      	movs	r3, #1
 8009828:	4652      	mov	r2, sl
 800982a:	4641      	mov	r1, r8
 800982c:	4638      	mov	r0, r7
 800982e:	47c8      	blx	r9
 8009830:	3001      	adds	r0, #1
 8009832:	d103      	bne.n	800983c <_printf_common+0xac>
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983c:	3501      	adds	r5, #1
 800983e:	e7c6      	b.n	80097ce <_printf_common+0x3e>
 8009840:	18e1      	adds	r1, r4, r3
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	2030      	movs	r0, #48	@ 0x30
 8009846:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800984a:	4422      	add	r2, r4
 800984c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009854:	3302      	adds	r3, #2
 8009856:	e7c7      	b.n	80097e8 <_printf_common+0x58>
 8009858:	2301      	movs	r3, #1
 800985a:	4622      	mov	r2, r4
 800985c:	4641      	mov	r1, r8
 800985e:	4638      	mov	r0, r7
 8009860:	47c8      	blx	r9
 8009862:	3001      	adds	r0, #1
 8009864:	d0e6      	beq.n	8009834 <_printf_common+0xa4>
 8009866:	3601      	adds	r6, #1
 8009868:	e7d9      	b.n	800981e <_printf_common+0x8e>
	...

0800986c <_printf_i>:
 800986c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009870:	7e0f      	ldrb	r7, [r1, #24]
 8009872:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009874:	2f78      	cmp	r7, #120	@ 0x78
 8009876:	4691      	mov	r9, r2
 8009878:	4680      	mov	r8, r0
 800987a:	460c      	mov	r4, r1
 800987c:	469a      	mov	sl, r3
 800987e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009882:	d807      	bhi.n	8009894 <_printf_i+0x28>
 8009884:	2f62      	cmp	r7, #98	@ 0x62
 8009886:	d80a      	bhi.n	800989e <_printf_i+0x32>
 8009888:	2f00      	cmp	r7, #0
 800988a:	f000 80d2 	beq.w	8009a32 <_printf_i+0x1c6>
 800988e:	2f58      	cmp	r7, #88	@ 0x58
 8009890:	f000 80b9 	beq.w	8009a06 <_printf_i+0x19a>
 8009894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009898:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800989c:	e03a      	b.n	8009914 <_printf_i+0xa8>
 800989e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80098a2:	2b15      	cmp	r3, #21
 80098a4:	d8f6      	bhi.n	8009894 <_printf_i+0x28>
 80098a6:	a101      	add	r1, pc, #4	@ (adr r1, 80098ac <_printf_i+0x40>)
 80098a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098ac:	08009905 	.word	0x08009905
 80098b0:	08009919 	.word	0x08009919
 80098b4:	08009895 	.word	0x08009895
 80098b8:	08009895 	.word	0x08009895
 80098bc:	08009895 	.word	0x08009895
 80098c0:	08009895 	.word	0x08009895
 80098c4:	08009919 	.word	0x08009919
 80098c8:	08009895 	.word	0x08009895
 80098cc:	08009895 	.word	0x08009895
 80098d0:	08009895 	.word	0x08009895
 80098d4:	08009895 	.word	0x08009895
 80098d8:	08009a19 	.word	0x08009a19
 80098dc:	08009943 	.word	0x08009943
 80098e0:	080099d3 	.word	0x080099d3
 80098e4:	08009895 	.word	0x08009895
 80098e8:	08009895 	.word	0x08009895
 80098ec:	08009a3b 	.word	0x08009a3b
 80098f0:	08009895 	.word	0x08009895
 80098f4:	08009943 	.word	0x08009943
 80098f8:	08009895 	.word	0x08009895
 80098fc:	08009895 	.word	0x08009895
 8009900:	080099db 	.word	0x080099db
 8009904:	6833      	ldr	r3, [r6, #0]
 8009906:	1d1a      	adds	r2, r3, #4
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6032      	str	r2, [r6, #0]
 800990c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009910:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009914:	2301      	movs	r3, #1
 8009916:	e09d      	b.n	8009a54 <_printf_i+0x1e8>
 8009918:	6833      	ldr	r3, [r6, #0]
 800991a:	6820      	ldr	r0, [r4, #0]
 800991c:	1d19      	adds	r1, r3, #4
 800991e:	6031      	str	r1, [r6, #0]
 8009920:	0606      	lsls	r6, r0, #24
 8009922:	d501      	bpl.n	8009928 <_printf_i+0xbc>
 8009924:	681d      	ldr	r5, [r3, #0]
 8009926:	e003      	b.n	8009930 <_printf_i+0xc4>
 8009928:	0645      	lsls	r5, r0, #25
 800992a:	d5fb      	bpl.n	8009924 <_printf_i+0xb8>
 800992c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009930:	2d00      	cmp	r5, #0
 8009932:	da03      	bge.n	800993c <_printf_i+0xd0>
 8009934:	232d      	movs	r3, #45	@ 0x2d
 8009936:	426d      	negs	r5, r5
 8009938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800993c:	4859      	ldr	r0, [pc, #356]	@ (8009aa4 <_printf_i+0x238>)
 800993e:	230a      	movs	r3, #10
 8009940:	e011      	b.n	8009966 <_printf_i+0xfa>
 8009942:	6821      	ldr	r1, [r4, #0]
 8009944:	6833      	ldr	r3, [r6, #0]
 8009946:	0608      	lsls	r0, r1, #24
 8009948:	f853 5b04 	ldr.w	r5, [r3], #4
 800994c:	d402      	bmi.n	8009954 <_printf_i+0xe8>
 800994e:	0649      	lsls	r1, r1, #25
 8009950:	bf48      	it	mi
 8009952:	b2ad      	uxthmi	r5, r5
 8009954:	2f6f      	cmp	r7, #111	@ 0x6f
 8009956:	4853      	ldr	r0, [pc, #332]	@ (8009aa4 <_printf_i+0x238>)
 8009958:	6033      	str	r3, [r6, #0]
 800995a:	bf14      	ite	ne
 800995c:	230a      	movne	r3, #10
 800995e:	2308      	moveq	r3, #8
 8009960:	2100      	movs	r1, #0
 8009962:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009966:	6866      	ldr	r6, [r4, #4]
 8009968:	60a6      	str	r6, [r4, #8]
 800996a:	2e00      	cmp	r6, #0
 800996c:	bfa2      	ittt	ge
 800996e:	6821      	ldrge	r1, [r4, #0]
 8009970:	f021 0104 	bicge.w	r1, r1, #4
 8009974:	6021      	strge	r1, [r4, #0]
 8009976:	b90d      	cbnz	r5, 800997c <_printf_i+0x110>
 8009978:	2e00      	cmp	r6, #0
 800997a:	d04b      	beq.n	8009a14 <_printf_i+0x1a8>
 800997c:	4616      	mov	r6, r2
 800997e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009982:	fb03 5711 	mls	r7, r3, r1, r5
 8009986:	5dc7      	ldrb	r7, [r0, r7]
 8009988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800998c:	462f      	mov	r7, r5
 800998e:	42bb      	cmp	r3, r7
 8009990:	460d      	mov	r5, r1
 8009992:	d9f4      	bls.n	800997e <_printf_i+0x112>
 8009994:	2b08      	cmp	r3, #8
 8009996:	d10b      	bne.n	80099b0 <_printf_i+0x144>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	07df      	lsls	r7, r3, #31
 800999c:	d508      	bpl.n	80099b0 <_printf_i+0x144>
 800999e:	6923      	ldr	r3, [r4, #16]
 80099a0:	6861      	ldr	r1, [r4, #4]
 80099a2:	4299      	cmp	r1, r3
 80099a4:	bfde      	ittt	le
 80099a6:	2330      	movle	r3, #48	@ 0x30
 80099a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099b0:	1b92      	subs	r2, r2, r6
 80099b2:	6122      	str	r2, [r4, #16]
 80099b4:	f8cd a000 	str.w	sl, [sp]
 80099b8:	464b      	mov	r3, r9
 80099ba:	aa03      	add	r2, sp, #12
 80099bc:	4621      	mov	r1, r4
 80099be:	4640      	mov	r0, r8
 80099c0:	f7ff fee6 	bl	8009790 <_printf_common>
 80099c4:	3001      	adds	r0, #1
 80099c6:	d14a      	bne.n	8009a5e <_printf_i+0x1f2>
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	b004      	add	sp, #16
 80099ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	f043 0320 	orr.w	r3, r3, #32
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	4833      	ldr	r0, [pc, #204]	@ (8009aa8 <_printf_i+0x23c>)
 80099dc:	2778      	movs	r7, #120	@ 0x78
 80099de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	6831      	ldr	r1, [r6, #0]
 80099e6:	061f      	lsls	r7, r3, #24
 80099e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80099ec:	d402      	bmi.n	80099f4 <_printf_i+0x188>
 80099ee:	065f      	lsls	r7, r3, #25
 80099f0:	bf48      	it	mi
 80099f2:	b2ad      	uxthmi	r5, r5
 80099f4:	6031      	str	r1, [r6, #0]
 80099f6:	07d9      	lsls	r1, r3, #31
 80099f8:	bf44      	itt	mi
 80099fa:	f043 0320 	orrmi.w	r3, r3, #32
 80099fe:	6023      	strmi	r3, [r4, #0]
 8009a00:	b11d      	cbz	r5, 8009a0a <_printf_i+0x19e>
 8009a02:	2310      	movs	r3, #16
 8009a04:	e7ac      	b.n	8009960 <_printf_i+0xf4>
 8009a06:	4827      	ldr	r0, [pc, #156]	@ (8009aa4 <_printf_i+0x238>)
 8009a08:	e7e9      	b.n	80099de <_printf_i+0x172>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	f023 0320 	bic.w	r3, r3, #32
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	e7f6      	b.n	8009a02 <_printf_i+0x196>
 8009a14:	4616      	mov	r6, r2
 8009a16:	e7bd      	b.n	8009994 <_printf_i+0x128>
 8009a18:	6833      	ldr	r3, [r6, #0]
 8009a1a:	6825      	ldr	r5, [r4, #0]
 8009a1c:	6961      	ldr	r1, [r4, #20]
 8009a1e:	1d18      	adds	r0, r3, #4
 8009a20:	6030      	str	r0, [r6, #0]
 8009a22:	062e      	lsls	r6, r5, #24
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	d501      	bpl.n	8009a2c <_printf_i+0x1c0>
 8009a28:	6019      	str	r1, [r3, #0]
 8009a2a:	e002      	b.n	8009a32 <_printf_i+0x1c6>
 8009a2c:	0668      	lsls	r0, r5, #25
 8009a2e:	d5fb      	bpl.n	8009a28 <_printf_i+0x1bc>
 8009a30:	8019      	strh	r1, [r3, #0]
 8009a32:	2300      	movs	r3, #0
 8009a34:	6123      	str	r3, [r4, #16]
 8009a36:	4616      	mov	r6, r2
 8009a38:	e7bc      	b.n	80099b4 <_printf_i+0x148>
 8009a3a:	6833      	ldr	r3, [r6, #0]
 8009a3c:	1d1a      	adds	r2, r3, #4
 8009a3e:	6032      	str	r2, [r6, #0]
 8009a40:	681e      	ldr	r6, [r3, #0]
 8009a42:	6862      	ldr	r2, [r4, #4]
 8009a44:	2100      	movs	r1, #0
 8009a46:	4630      	mov	r0, r6
 8009a48:	f7f6 fbc2 	bl	80001d0 <memchr>
 8009a4c:	b108      	cbz	r0, 8009a52 <_printf_i+0x1e6>
 8009a4e:	1b80      	subs	r0, r0, r6
 8009a50:	6060      	str	r0, [r4, #4]
 8009a52:	6863      	ldr	r3, [r4, #4]
 8009a54:	6123      	str	r3, [r4, #16]
 8009a56:	2300      	movs	r3, #0
 8009a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a5c:	e7aa      	b.n	80099b4 <_printf_i+0x148>
 8009a5e:	6923      	ldr	r3, [r4, #16]
 8009a60:	4632      	mov	r2, r6
 8009a62:	4649      	mov	r1, r9
 8009a64:	4640      	mov	r0, r8
 8009a66:	47d0      	blx	sl
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d0ad      	beq.n	80099c8 <_printf_i+0x15c>
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	079b      	lsls	r3, r3, #30
 8009a70:	d413      	bmi.n	8009a9a <_printf_i+0x22e>
 8009a72:	68e0      	ldr	r0, [r4, #12]
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	4298      	cmp	r0, r3
 8009a78:	bfb8      	it	lt
 8009a7a:	4618      	movlt	r0, r3
 8009a7c:	e7a6      	b.n	80099cc <_printf_i+0x160>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	4632      	mov	r2, r6
 8009a82:	4649      	mov	r1, r9
 8009a84:	4640      	mov	r0, r8
 8009a86:	47d0      	blx	sl
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d09d      	beq.n	80099c8 <_printf_i+0x15c>
 8009a8c:	3501      	adds	r5, #1
 8009a8e:	68e3      	ldr	r3, [r4, #12]
 8009a90:	9903      	ldr	r1, [sp, #12]
 8009a92:	1a5b      	subs	r3, r3, r1
 8009a94:	42ab      	cmp	r3, r5
 8009a96:	dcf2      	bgt.n	8009a7e <_printf_i+0x212>
 8009a98:	e7eb      	b.n	8009a72 <_printf_i+0x206>
 8009a9a:	2500      	movs	r5, #0
 8009a9c:	f104 0619 	add.w	r6, r4, #25
 8009aa0:	e7f5      	b.n	8009a8e <_printf_i+0x222>
 8009aa2:	bf00      	nop
 8009aa4:	0800c156 	.word	0x0800c156
 8009aa8:	0800c167 	.word	0x0800c167

08009aac <std>:
 8009aac:	2300      	movs	r3, #0
 8009aae:	b510      	push	{r4, lr}
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aba:	6083      	str	r3, [r0, #8]
 8009abc:	8181      	strh	r1, [r0, #12]
 8009abe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ac0:	81c2      	strh	r2, [r0, #14]
 8009ac2:	6183      	str	r3, [r0, #24]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	2208      	movs	r2, #8
 8009ac8:	305c      	adds	r0, #92	@ 0x5c
 8009aca:	f000 fa4d 	bl	8009f68 <memset>
 8009ace:	4b0d      	ldr	r3, [pc, #52]	@ (8009b04 <std+0x58>)
 8009ad0:	6263      	str	r3, [r4, #36]	@ 0x24
 8009ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8009b08 <std+0x5c>)
 8009ad4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8009b0c <std+0x60>)
 8009ad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ada:	4b0d      	ldr	r3, [pc, #52]	@ (8009b10 <std+0x64>)
 8009adc:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ade:	4b0d      	ldr	r3, [pc, #52]	@ (8009b14 <std+0x68>)
 8009ae0:	6224      	str	r4, [r4, #32]
 8009ae2:	429c      	cmp	r4, r3
 8009ae4:	d006      	beq.n	8009af4 <std+0x48>
 8009ae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009aea:	4294      	cmp	r4, r2
 8009aec:	d002      	beq.n	8009af4 <std+0x48>
 8009aee:	33d0      	adds	r3, #208	@ 0xd0
 8009af0:	429c      	cmp	r4, r3
 8009af2:	d105      	bne.n	8009b00 <std+0x54>
 8009af4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009afc:	f000 bab0 	b.w	800a060 <__retarget_lock_init_recursive>
 8009b00:	bd10      	pop	{r4, pc}
 8009b02:	bf00      	nop
 8009b04:	08009db9 	.word	0x08009db9
 8009b08:	08009ddb 	.word	0x08009ddb
 8009b0c:	08009e13 	.word	0x08009e13
 8009b10:	08009e37 	.word	0x08009e37
 8009b14:	20002128 	.word	0x20002128

08009b18 <stdio_exit_handler>:
 8009b18:	4a02      	ldr	r2, [pc, #8]	@ (8009b24 <stdio_exit_handler+0xc>)
 8009b1a:	4903      	ldr	r1, [pc, #12]	@ (8009b28 <stdio_exit_handler+0x10>)
 8009b1c:	4803      	ldr	r0, [pc, #12]	@ (8009b2c <stdio_exit_handler+0x14>)
 8009b1e:	f000 b869 	b.w	8009bf4 <_fwalk_sglue>
 8009b22:	bf00      	nop
 8009b24:	20000010 	.word	0x20000010
 8009b28:	0800bc61 	.word	0x0800bc61
 8009b2c:	20000020 	.word	0x20000020

08009b30 <cleanup_stdio>:
 8009b30:	6841      	ldr	r1, [r0, #4]
 8009b32:	4b0c      	ldr	r3, [pc, #48]	@ (8009b64 <cleanup_stdio+0x34>)
 8009b34:	4299      	cmp	r1, r3
 8009b36:	b510      	push	{r4, lr}
 8009b38:	4604      	mov	r4, r0
 8009b3a:	d001      	beq.n	8009b40 <cleanup_stdio+0x10>
 8009b3c:	f002 f890 	bl	800bc60 <_fflush_r>
 8009b40:	68a1      	ldr	r1, [r4, #8]
 8009b42:	4b09      	ldr	r3, [pc, #36]	@ (8009b68 <cleanup_stdio+0x38>)
 8009b44:	4299      	cmp	r1, r3
 8009b46:	d002      	beq.n	8009b4e <cleanup_stdio+0x1e>
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f002 f889 	bl	800bc60 <_fflush_r>
 8009b4e:	68e1      	ldr	r1, [r4, #12]
 8009b50:	4b06      	ldr	r3, [pc, #24]	@ (8009b6c <cleanup_stdio+0x3c>)
 8009b52:	4299      	cmp	r1, r3
 8009b54:	d004      	beq.n	8009b60 <cleanup_stdio+0x30>
 8009b56:	4620      	mov	r0, r4
 8009b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b5c:	f002 b880 	b.w	800bc60 <_fflush_r>
 8009b60:	bd10      	pop	{r4, pc}
 8009b62:	bf00      	nop
 8009b64:	20002128 	.word	0x20002128
 8009b68:	20002190 	.word	0x20002190
 8009b6c:	200021f8 	.word	0x200021f8

08009b70 <global_stdio_init.part.0>:
 8009b70:	b510      	push	{r4, lr}
 8009b72:	4b0b      	ldr	r3, [pc, #44]	@ (8009ba0 <global_stdio_init.part.0+0x30>)
 8009b74:	4c0b      	ldr	r4, [pc, #44]	@ (8009ba4 <global_stdio_init.part.0+0x34>)
 8009b76:	4a0c      	ldr	r2, [pc, #48]	@ (8009ba8 <global_stdio_init.part.0+0x38>)
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	2104      	movs	r1, #4
 8009b80:	f7ff ff94 	bl	8009aac <std>
 8009b84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b88:	2201      	movs	r2, #1
 8009b8a:	2109      	movs	r1, #9
 8009b8c:	f7ff ff8e 	bl	8009aac <std>
 8009b90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b94:	2202      	movs	r2, #2
 8009b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b9a:	2112      	movs	r1, #18
 8009b9c:	f7ff bf86 	b.w	8009aac <std>
 8009ba0:	20002260 	.word	0x20002260
 8009ba4:	20002128 	.word	0x20002128
 8009ba8:	08009b19 	.word	0x08009b19

08009bac <__sfp_lock_acquire>:
 8009bac:	4801      	ldr	r0, [pc, #4]	@ (8009bb4 <__sfp_lock_acquire+0x8>)
 8009bae:	f000 ba58 	b.w	800a062 <__retarget_lock_acquire_recursive>
 8009bb2:	bf00      	nop
 8009bb4:	20002269 	.word	0x20002269

08009bb8 <__sfp_lock_release>:
 8009bb8:	4801      	ldr	r0, [pc, #4]	@ (8009bc0 <__sfp_lock_release+0x8>)
 8009bba:	f000 ba53 	b.w	800a064 <__retarget_lock_release_recursive>
 8009bbe:	bf00      	nop
 8009bc0:	20002269 	.word	0x20002269

08009bc4 <__sinit>:
 8009bc4:	b510      	push	{r4, lr}
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	f7ff fff0 	bl	8009bac <__sfp_lock_acquire>
 8009bcc:	6a23      	ldr	r3, [r4, #32]
 8009bce:	b11b      	cbz	r3, 8009bd8 <__sinit+0x14>
 8009bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bd4:	f7ff bff0 	b.w	8009bb8 <__sfp_lock_release>
 8009bd8:	4b04      	ldr	r3, [pc, #16]	@ (8009bec <__sinit+0x28>)
 8009bda:	6223      	str	r3, [r4, #32]
 8009bdc:	4b04      	ldr	r3, [pc, #16]	@ (8009bf0 <__sinit+0x2c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1f5      	bne.n	8009bd0 <__sinit+0xc>
 8009be4:	f7ff ffc4 	bl	8009b70 <global_stdio_init.part.0>
 8009be8:	e7f2      	b.n	8009bd0 <__sinit+0xc>
 8009bea:	bf00      	nop
 8009bec:	08009b31 	.word	0x08009b31
 8009bf0:	20002260 	.word	0x20002260

08009bf4 <_fwalk_sglue>:
 8009bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	4688      	mov	r8, r1
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	2600      	movs	r6, #0
 8009c00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c04:	f1b9 0901 	subs.w	r9, r9, #1
 8009c08:	d505      	bpl.n	8009c16 <_fwalk_sglue+0x22>
 8009c0a:	6824      	ldr	r4, [r4, #0]
 8009c0c:	2c00      	cmp	r4, #0
 8009c0e:	d1f7      	bne.n	8009c00 <_fwalk_sglue+0xc>
 8009c10:	4630      	mov	r0, r6
 8009c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c16:	89ab      	ldrh	r3, [r5, #12]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d907      	bls.n	8009c2c <_fwalk_sglue+0x38>
 8009c1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c20:	3301      	adds	r3, #1
 8009c22:	d003      	beq.n	8009c2c <_fwalk_sglue+0x38>
 8009c24:	4629      	mov	r1, r5
 8009c26:	4638      	mov	r0, r7
 8009c28:	47c0      	blx	r8
 8009c2a:	4306      	orrs	r6, r0
 8009c2c:	3568      	adds	r5, #104	@ 0x68
 8009c2e:	e7e9      	b.n	8009c04 <_fwalk_sglue+0x10>

08009c30 <iprintf>:
 8009c30:	b40f      	push	{r0, r1, r2, r3}
 8009c32:	b507      	push	{r0, r1, r2, lr}
 8009c34:	4906      	ldr	r1, [pc, #24]	@ (8009c50 <iprintf+0x20>)
 8009c36:	ab04      	add	r3, sp, #16
 8009c38:	6808      	ldr	r0, [r1, #0]
 8009c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c3e:	6881      	ldr	r1, [r0, #8]
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	f001 fe71 	bl	800b928 <_vfiprintf_r>
 8009c46:	b003      	add	sp, #12
 8009c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c4c:	b004      	add	sp, #16
 8009c4e:	4770      	bx	lr
 8009c50:	2000001c 	.word	0x2000001c

08009c54 <_puts_r>:
 8009c54:	6a03      	ldr	r3, [r0, #32]
 8009c56:	b570      	push	{r4, r5, r6, lr}
 8009c58:	6884      	ldr	r4, [r0, #8]
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	460e      	mov	r6, r1
 8009c5e:	b90b      	cbnz	r3, 8009c64 <_puts_r+0x10>
 8009c60:	f7ff ffb0 	bl	8009bc4 <__sinit>
 8009c64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c66:	07db      	lsls	r3, r3, #31
 8009c68:	d405      	bmi.n	8009c76 <_puts_r+0x22>
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	0598      	lsls	r0, r3, #22
 8009c6e:	d402      	bmi.n	8009c76 <_puts_r+0x22>
 8009c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c72:	f000 f9f6 	bl	800a062 <__retarget_lock_acquire_recursive>
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	0719      	lsls	r1, r3, #28
 8009c7a:	d502      	bpl.n	8009c82 <_puts_r+0x2e>
 8009c7c:	6923      	ldr	r3, [r4, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d135      	bne.n	8009cee <_puts_r+0x9a>
 8009c82:	4621      	mov	r1, r4
 8009c84:	4628      	mov	r0, r5
 8009c86:	f000 f919 	bl	8009ebc <__swsetup_r>
 8009c8a:	b380      	cbz	r0, 8009cee <_puts_r+0x9a>
 8009c8c:	f04f 35ff 	mov.w	r5, #4294967295
 8009c90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c92:	07da      	lsls	r2, r3, #31
 8009c94:	d405      	bmi.n	8009ca2 <_puts_r+0x4e>
 8009c96:	89a3      	ldrh	r3, [r4, #12]
 8009c98:	059b      	lsls	r3, r3, #22
 8009c9a:	d402      	bmi.n	8009ca2 <_puts_r+0x4e>
 8009c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c9e:	f000 f9e1 	bl	800a064 <__retarget_lock_release_recursive>
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	bd70      	pop	{r4, r5, r6, pc}
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	da04      	bge.n	8009cb4 <_puts_r+0x60>
 8009caa:	69a2      	ldr	r2, [r4, #24]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	dc17      	bgt.n	8009ce0 <_puts_r+0x8c>
 8009cb0:	290a      	cmp	r1, #10
 8009cb2:	d015      	beq.n	8009ce0 <_puts_r+0x8c>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	6022      	str	r2, [r4, #0]
 8009cba:	7019      	strb	r1, [r3, #0]
 8009cbc:	68a3      	ldr	r3, [r4, #8]
 8009cbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	60a3      	str	r3, [r4, #8]
 8009cc6:	2900      	cmp	r1, #0
 8009cc8:	d1ed      	bne.n	8009ca6 <_puts_r+0x52>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	da11      	bge.n	8009cf2 <_puts_r+0x9e>
 8009cce:	4622      	mov	r2, r4
 8009cd0:	210a      	movs	r1, #10
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f000 f8b3 	bl	8009e3e <__swbuf_r>
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d0d7      	beq.n	8009c8c <_puts_r+0x38>
 8009cdc:	250a      	movs	r5, #10
 8009cde:	e7d7      	b.n	8009c90 <_puts_r+0x3c>
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	f000 f8ab 	bl	8009e3e <__swbuf_r>
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d1e7      	bne.n	8009cbc <_puts_r+0x68>
 8009cec:	e7ce      	b.n	8009c8c <_puts_r+0x38>
 8009cee:	3e01      	subs	r6, #1
 8009cf0:	e7e4      	b.n	8009cbc <_puts_r+0x68>
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	1c5a      	adds	r2, r3, #1
 8009cf6:	6022      	str	r2, [r4, #0]
 8009cf8:	220a      	movs	r2, #10
 8009cfa:	701a      	strb	r2, [r3, #0]
 8009cfc:	e7ee      	b.n	8009cdc <_puts_r+0x88>
	...

08009d00 <puts>:
 8009d00:	4b02      	ldr	r3, [pc, #8]	@ (8009d0c <puts+0xc>)
 8009d02:	4601      	mov	r1, r0
 8009d04:	6818      	ldr	r0, [r3, #0]
 8009d06:	f7ff bfa5 	b.w	8009c54 <_puts_r>
 8009d0a:	bf00      	nop
 8009d0c:	2000001c 	.word	0x2000001c

08009d10 <sniprintf>:
 8009d10:	b40c      	push	{r2, r3}
 8009d12:	b530      	push	{r4, r5, lr}
 8009d14:	4b17      	ldr	r3, [pc, #92]	@ (8009d74 <sniprintf+0x64>)
 8009d16:	1e0c      	subs	r4, r1, #0
 8009d18:	681d      	ldr	r5, [r3, #0]
 8009d1a:	b09d      	sub	sp, #116	@ 0x74
 8009d1c:	da08      	bge.n	8009d30 <sniprintf+0x20>
 8009d1e:	238b      	movs	r3, #139	@ 0x8b
 8009d20:	602b      	str	r3, [r5, #0]
 8009d22:	f04f 30ff 	mov.w	r0, #4294967295
 8009d26:	b01d      	add	sp, #116	@ 0x74
 8009d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d2c:	b002      	add	sp, #8
 8009d2e:	4770      	bx	lr
 8009d30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009d34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d38:	bf14      	ite	ne
 8009d3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d3e:	4623      	moveq	r3, r4
 8009d40:	9304      	str	r3, [sp, #16]
 8009d42:	9307      	str	r3, [sp, #28]
 8009d44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d48:	9002      	str	r0, [sp, #8]
 8009d4a:	9006      	str	r0, [sp, #24]
 8009d4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009d52:	ab21      	add	r3, sp, #132	@ 0x84
 8009d54:	a902      	add	r1, sp, #8
 8009d56:	4628      	mov	r0, r5
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	f001 fcbf 	bl	800b6dc <_svfiprintf_r>
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	bfbc      	itt	lt
 8009d62:	238b      	movlt	r3, #139	@ 0x8b
 8009d64:	602b      	strlt	r3, [r5, #0]
 8009d66:	2c00      	cmp	r4, #0
 8009d68:	d0dd      	beq.n	8009d26 <sniprintf+0x16>
 8009d6a:	9b02      	ldr	r3, [sp, #8]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	701a      	strb	r2, [r3, #0]
 8009d70:	e7d9      	b.n	8009d26 <sniprintf+0x16>
 8009d72:	bf00      	nop
 8009d74:	2000001c 	.word	0x2000001c

08009d78 <siprintf>:
 8009d78:	b40e      	push	{r1, r2, r3}
 8009d7a:	b500      	push	{lr}
 8009d7c:	b09c      	sub	sp, #112	@ 0x70
 8009d7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009d80:	9002      	str	r0, [sp, #8]
 8009d82:	9006      	str	r0, [sp, #24]
 8009d84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009d88:	4809      	ldr	r0, [pc, #36]	@ (8009db0 <siprintf+0x38>)
 8009d8a:	9107      	str	r1, [sp, #28]
 8009d8c:	9104      	str	r1, [sp, #16]
 8009d8e:	4909      	ldr	r1, [pc, #36]	@ (8009db4 <siprintf+0x3c>)
 8009d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d94:	9105      	str	r1, [sp, #20]
 8009d96:	6800      	ldr	r0, [r0, #0]
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	a902      	add	r1, sp, #8
 8009d9c:	f001 fc9e 	bl	800b6dc <_svfiprintf_r>
 8009da0:	9b02      	ldr	r3, [sp, #8]
 8009da2:	2200      	movs	r2, #0
 8009da4:	701a      	strb	r2, [r3, #0]
 8009da6:	b01c      	add	sp, #112	@ 0x70
 8009da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dac:	b003      	add	sp, #12
 8009dae:	4770      	bx	lr
 8009db0:	2000001c 	.word	0x2000001c
 8009db4:	ffff0208 	.word	0xffff0208

08009db8 <__sread>:
 8009db8:	b510      	push	{r4, lr}
 8009dba:	460c      	mov	r4, r1
 8009dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc0:	f000 f900 	bl	8009fc4 <_read_r>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	bfab      	itete	ge
 8009dc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009dca:	89a3      	ldrhlt	r3, [r4, #12]
 8009dcc:	181b      	addge	r3, r3, r0
 8009dce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009dd2:	bfac      	ite	ge
 8009dd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009dd6:	81a3      	strhlt	r3, [r4, #12]
 8009dd8:	bd10      	pop	{r4, pc}

08009dda <__swrite>:
 8009dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dde:	461f      	mov	r7, r3
 8009de0:	898b      	ldrh	r3, [r1, #12]
 8009de2:	05db      	lsls	r3, r3, #23
 8009de4:	4605      	mov	r5, r0
 8009de6:	460c      	mov	r4, r1
 8009de8:	4616      	mov	r6, r2
 8009dea:	d505      	bpl.n	8009df8 <__swrite+0x1e>
 8009dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df0:	2302      	movs	r3, #2
 8009df2:	2200      	movs	r2, #0
 8009df4:	f000 f8d4 	bl	8009fa0 <_lseek_r>
 8009df8:	89a3      	ldrh	r3, [r4, #12]
 8009dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e02:	81a3      	strh	r3, [r4, #12]
 8009e04:	4632      	mov	r2, r6
 8009e06:	463b      	mov	r3, r7
 8009e08:	4628      	mov	r0, r5
 8009e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0e:	f000 b8eb 	b.w	8009fe8 <_write_r>

08009e12 <__sseek>:
 8009e12:	b510      	push	{r4, lr}
 8009e14:	460c      	mov	r4, r1
 8009e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1a:	f000 f8c1 	bl	8009fa0 <_lseek_r>
 8009e1e:	1c43      	adds	r3, r0, #1
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	bf15      	itete	ne
 8009e24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e2e:	81a3      	strheq	r3, [r4, #12]
 8009e30:	bf18      	it	ne
 8009e32:	81a3      	strhne	r3, [r4, #12]
 8009e34:	bd10      	pop	{r4, pc}

08009e36 <__sclose>:
 8009e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e3a:	f000 b8a1 	b.w	8009f80 <_close_r>

08009e3e <__swbuf_r>:
 8009e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e40:	460e      	mov	r6, r1
 8009e42:	4614      	mov	r4, r2
 8009e44:	4605      	mov	r5, r0
 8009e46:	b118      	cbz	r0, 8009e50 <__swbuf_r+0x12>
 8009e48:	6a03      	ldr	r3, [r0, #32]
 8009e4a:	b90b      	cbnz	r3, 8009e50 <__swbuf_r+0x12>
 8009e4c:	f7ff feba 	bl	8009bc4 <__sinit>
 8009e50:	69a3      	ldr	r3, [r4, #24]
 8009e52:	60a3      	str	r3, [r4, #8]
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	071a      	lsls	r2, r3, #28
 8009e58:	d501      	bpl.n	8009e5e <__swbuf_r+0x20>
 8009e5a:	6923      	ldr	r3, [r4, #16]
 8009e5c:	b943      	cbnz	r3, 8009e70 <__swbuf_r+0x32>
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4628      	mov	r0, r5
 8009e62:	f000 f82b 	bl	8009ebc <__swsetup_r>
 8009e66:	b118      	cbz	r0, 8009e70 <__swbuf_r+0x32>
 8009e68:	f04f 37ff 	mov.w	r7, #4294967295
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	6922      	ldr	r2, [r4, #16]
 8009e74:	1a98      	subs	r0, r3, r2
 8009e76:	6963      	ldr	r3, [r4, #20]
 8009e78:	b2f6      	uxtb	r6, r6
 8009e7a:	4283      	cmp	r3, r0
 8009e7c:	4637      	mov	r7, r6
 8009e7e:	dc05      	bgt.n	8009e8c <__swbuf_r+0x4e>
 8009e80:	4621      	mov	r1, r4
 8009e82:	4628      	mov	r0, r5
 8009e84:	f001 feec 	bl	800bc60 <_fflush_r>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d1ed      	bne.n	8009e68 <__swbuf_r+0x2a>
 8009e8c:	68a3      	ldr	r3, [r4, #8]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	60a3      	str	r3, [r4, #8]
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	1c5a      	adds	r2, r3, #1
 8009e96:	6022      	str	r2, [r4, #0]
 8009e98:	701e      	strb	r6, [r3, #0]
 8009e9a:	6962      	ldr	r2, [r4, #20]
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d004      	beq.n	8009eac <__swbuf_r+0x6e>
 8009ea2:	89a3      	ldrh	r3, [r4, #12]
 8009ea4:	07db      	lsls	r3, r3, #31
 8009ea6:	d5e1      	bpl.n	8009e6c <__swbuf_r+0x2e>
 8009ea8:	2e0a      	cmp	r6, #10
 8009eaa:	d1df      	bne.n	8009e6c <__swbuf_r+0x2e>
 8009eac:	4621      	mov	r1, r4
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f001 fed6 	bl	800bc60 <_fflush_r>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d0d9      	beq.n	8009e6c <__swbuf_r+0x2e>
 8009eb8:	e7d6      	b.n	8009e68 <__swbuf_r+0x2a>
	...

08009ebc <__swsetup_r>:
 8009ebc:	b538      	push	{r3, r4, r5, lr}
 8009ebe:	4b29      	ldr	r3, [pc, #164]	@ (8009f64 <__swsetup_r+0xa8>)
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	6818      	ldr	r0, [r3, #0]
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	b118      	cbz	r0, 8009ed0 <__swsetup_r+0x14>
 8009ec8:	6a03      	ldr	r3, [r0, #32]
 8009eca:	b90b      	cbnz	r3, 8009ed0 <__swsetup_r+0x14>
 8009ecc:	f7ff fe7a 	bl	8009bc4 <__sinit>
 8009ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed4:	0719      	lsls	r1, r3, #28
 8009ed6:	d422      	bmi.n	8009f1e <__swsetup_r+0x62>
 8009ed8:	06da      	lsls	r2, r3, #27
 8009eda:	d407      	bmi.n	8009eec <__swsetup_r+0x30>
 8009edc:	2209      	movs	r2, #9
 8009ede:	602a      	str	r2, [r5, #0]
 8009ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ee4:	81a3      	strh	r3, [r4, #12]
 8009ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eea:	e033      	b.n	8009f54 <__swsetup_r+0x98>
 8009eec:	0758      	lsls	r0, r3, #29
 8009eee:	d512      	bpl.n	8009f16 <__swsetup_r+0x5a>
 8009ef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ef2:	b141      	cbz	r1, 8009f06 <__swsetup_r+0x4a>
 8009ef4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ef8:	4299      	cmp	r1, r3
 8009efa:	d002      	beq.n	8009f02 <__swsetup_r+0x46>
 8009efc:	4628      	mov	r0, r5
 8009efe:	f000 ff0f 	bl	800ad20 <_free_r>
 8009f02:	2300      	movs	r3, #0
 8009f04:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f06:	89a3      	ldrh	r3, [r4, #12]
 8009f08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f0c:	81a3      	strh	r3, [r4, #12]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	6063      	str	r3, [r4, #4]
 8009f12:	6923      	ldr	r3, [r4, #16]
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	f043 0308 	orr.w	r3, r3, #8
 8009f1c:	81a3      	strh	r3, [r4, #12]
 8009f1e:	6923      	ldr	r3, [r4, #16]
 8009f20:	b94b      	cbnz	r3, 8009f36 <__swsetup_r+0x7a>
 8009f22:	89a3      	ldrh	r3, [r4, #12]
 8009f24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f2c:	d003      	beq.n	8009f36 <__swsetup_r+0x7a>
 8009f2e:	4621      	mov	r1, r4
 8009f30:	4628      	mov	r0, r5
 8009f32:	f001 fee3 	bl	800bcfc <__smakebuf_r>
 8009f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f3a:	f013 0201 	ands.w	r2, r3, #1
 8009f3e:	d00a      	beq.n	8009f56 <__swsetup_r+0x9a>
 8009f40:	2200      	movs	r2, #0
 8009f42:	60a2      	str	r2, [r4, #8]
 8009f44:	6962      	ldr	r2, [r4, #20]
 8009f46:	4252      	negs	r2, r2
 8009f48:	61a2      	str	r2, [r4, #24]
 8009f4a:	6922      	ldr	r2, [r4, #16]
 8009f4c:	b942      	cbnz	r2, 8009f60 <__swsetup_r+0xa4>
 8009f4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f52:	d1c5      	bne.n	8009ee0 <__swsetup_r+0x24>
 8009f54:	bd38      	pop	{r3, r4, r5, pc}
 8009f56:	0799      	lsls	r1, r3, #30
 8009f58:	bf58      	it	pl
 8009f5a:	6962      	ldrpl	r2, [r4, #20]
 8009f5c:	60a2      	str	r2, [r4, #8]
 8009f5e:	e7f4      	b.n	8009f4a <__swsetup_r+0x8e>
 8009f60:	2000      	movs	r0, #0
 8009f62:	e7f7      	b.n	8009f54 <__swsetup_r+0x98>
 8009f64:	2000001c 	.word	0x2000001c

08009f68 <memset>:
 8009f68:	4402      	add	r2, r0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d100      	bne.n	8009f72 <memset+0xa>
 8009f70:	4770      	bx	lr
 8009f72:	f803 1b01 	strb.w	r1, [r3], #1
 8009f76:	e7f9      	b.n	8009f6c <memset+0x4>

08009f78 <_localeconv_r>:
 8009f78:	4800      	ldr	r0, [pc, #0]	@ (8009f7c <_localeconv_r+0x4>)
 8009f7a:	4770      	bx	lr
 8009f7c:	2000015c 	.word	0x2000015c

08009f80 <_close_r>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4d06      	ldr	r5, [pc, #24]	@ (8009f9c <_close_r+0x1c>)
 8009f84:	2300      	movs	r3, #0
 8009f86:	4604      	mov	r4, r0
 8009f88:	4608      	mov	r0, r1
 8009f8a:	602b      	str	r3, [r5, #0]
 8009f8c:	f7f7 fc10 	bl	80017b0 <_close>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d102      	bne.n	8009f9a <_close_r+0x1a>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	b103      	cbz	r3, 8009f9a <_close_r+0x1a>
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	20002264 	.word	0x20002264

08009fa0 <_lseek_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4d07      	ldr	r5, [pc, #28]	@ (8009fc0 <_lseek_r+0x20>)
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	4608      	mov	r0, r1
 8009fa8:	4611      	mov	r1, r2
 8009faa:	2200      	movs	r2, #0
 8009fac:	602a      	str	r2, [r5, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f7f7 fc25 	bl	80017fe <_lseek>
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	d102      	bne.n	8009fbe <_lseek_r+0x1e>
 8009fb8:	682b      	ldr	r3, [r5, #0]
 8009fba:	b103      	cbz	r3, 8009fbe <_lseek_r+0x1e>
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	20002264 	.word	0x20002264

08009fc4 <_read_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	4d07      	ldr	r5, [pc, #28]	@ (8009fe4 <_read_r+0x20>)
 8009fc8:	4604      	mov	r4, r0
 8009fca:	4608      	mov	r0, r1
 8009fcc:	4611      	mov	r1, r2
 8009fce:	2200      	movs	r2, #0
 8009fd0:	602a      	str	r2, [r5, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f7f7 fbb3 	bl	800173e <_read>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	d102      	bne.n	8009fe2 <_read_r+0x1e>
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	b103      	cbz	r3, 8009fe2 <_read_r+0x1e>
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	20002264 	.word	0x20002264

08009fe8 <_write_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	4d07      	ldr	r5, [pc, #28]	@ (800a008 <_write_r+0x20>)
 8009fec:	4604      	mov	r4, r0
 8009fee:	4608      	mov	r0, r1
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	602a      	str	r2, [r5, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f7f7 fbbe 	bl	8001778 <_write>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d102      	bne.n	800a006 <_write_r+0x1e>
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	b103      	cbz	r3, 800a006 <_write_r+0x1e>
 800a004:	6023      	str	r3, [r4, #0]
 800a006:	bd38      	pop	{r3, r4, r5, pc}
 800a008:	20002264 	.word	0x20002264

0800a00c <__errno>:
 800a00c:	4b01      	ldr	r3, [pc, #4]	@ (800a014 <__errno+0x8>)
 800a00e:	6818      	ldr	r0, [r3, #0]
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	2000001c 	.word	0x2000001c

0800a018 <__libc_init_array>:
 800a018:	b570      	push	{r4, r5, r6, lr}
 800a01a:	4d0d      	ldr	r5, [pc, #52]	@ (800a050 <__libc_init_array+0x38>)
 800a01c:	4c0d      	ldr	r4, [pc, #52]	@ (800a054 <__libc_init_array+0x3c>)
 800a01e:	1b64      	subs	r4, r4, r5
 800a020:	10a4      	asrs	r4, r4, #2
 800a022:	2600      	movs	r6, #0
 800a024:	42a6      	cmp	r6, r4
 800a026:	d109      	bne.n	800a03c <__libc_init_array+0x24>
 800a028:	4d0b      	ldr	r5, [pc, #44]	@ (800a058 <__libc_init_array+0x40>)
 800a02a:	4c0c      	ldr	r4, [pc, #48]	@ (800a05c <__libc_init_array+0x44>)
 800a02c:	f001 ffd4 	bl	800bfd8 <_init>
 800a030:	1b64      	subs	r4, r4, r5
 800a032:	10a4      	asrs	r4, r4, #2
 800a034:	2600      	movs	r6, #0
 800a036:	42a6      	cmp	r6, r4
 800a038:	d105      	bne.n	800a046 <__libc_init_array+0x2e>
 800a03a:	bd70      	pop	{r4, r5, r6, pc}
 800a03c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a040:	4798      	blx	r3
 800a042:	3601      	adds	r6, #1
 800a044:	e7ee      	b.n	800a024 <__libc_init_array+0xc>
 800a046:	f855 3b04 	ldr.w	r3, [r5], #4
 800a04a:	4798      	blx	r3
 800a04c:	3601      	adds	r6, #1
 800a04e:	e7f2      	b.n	800a036 <__libc_init_array+0x1e>
 800a050:	0800c4c0 	.word	0x0800c4c0
 800a054:	0800c4c0 	.word	0x0800c4c0
 800a058:	0800c4c0 	.word	0x0800c4c0
 800a05c:	0800c4c4 	.word	0x0800c4c4

0800a060 <__retarget_lock_init_recursive>:
 800a060:	4770      	bx	lr

0800a062 <__retarget_lock_acquire_recursive>:
 800a062:	4770      	bx	lr

0800a064 <__retarget_lock_release_recursive>:
 800a064:	4770      	bx	lr

0800a066 <memcpy>:
 800a066:	440a      	add	r2, r1
 800a068:	4291      	cmp	r1, r2
 800a06a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a06e:	d100      	bne.n	800a072 <memcpy+0xc>
 800a070:	4770      	bx	lr
 800a072:	b510      	push	{r4, lr}
 800a074:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a07c:	4291      	cmp	r1, r2
 800a07e:	d1f9      	bne.n	800a074 <memcpy+0xe>
 800a080:	bd10      	pop	{r4, pc}

0800a082 <quorem>:
 800a082:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a086:	6903      	ldr	r3, [r0, #16]
 800a088:	690c      	ldr	r4, [r1, #16]
 800a08a:	42a3      	cmp	r3, r4
 800a08c:	4607      	mov	r7, r0
 800a08e:	db7e      	blt.n	800a18e <quorem+0x10c>
 800a090:	3c01      	subs	r4, #1
 800a092:	f101 0814 	add.w	r8, r1, #20
 800a096:	00a3      	lsls	r3, r4, #2
 800a098:	f100 0514 	add.w	r5, r0, #20
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0a2:	9301      	str	r3, [sp, #4]
 800a0a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0b8:	d32e      	bcc.n	800a118 <quorem+0x96>
 800a0ba:	f04f 0a00 	mov.w	sl, #0
 800a0be:	46c4      	mov	ip, r8
 800a0c0:	46ae      	mov	lr, r5
 800a0c2:	46d3      	mov	fp, sl
 800a0c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a0c8:	b298      	uxth	r0, r3
 800a0ca:	fb06 a000 	mla	r0, r6, r0, sl
 800a0ce:	0c02      	lsrs	r2, r0, #16
 800a0d0:	0c1b      	lsrs	r3, r3, #16
 800a0d2:	fb06 2303 	mla	r3, r6, r3, r2
 800a0d6:	f8de 2000 	ldr.w	r2, [lr]
 800a0da:	b280      	uxth	r0, r0
 800a0dc:	b292      	uxth	r2, r2
 800a0de:	1a12      	subs	r2, r2, r0
 800a0e0:	445a      	add	r2, fp
 800a0e2:	f8de 0000 	ldr.w	r0, [lr]
 800a0e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a0f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a0f4:	b292      	uxth	r2, r2
 800a0f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a0fa:	45e1      	cmp	r9, ip
 800a0fc:	f84e 2b04 	str.w	r2, [lr], #4
 800a100:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a104:	d2de      	bcs.n	800a0c4 <quorem+0x42>
 800a106:	9b00      	ldr	r3, [sp, #0]
 800a108:	58eb      	ldr	r3, [r5, r3]
 800a10a:	b92b      	cbnz	r3, 800a118 <quorem+0x96>
 800a10c:	9b01      	ldr	r3, [sp, #4]
 800a10e:	3b04      	subs	r3, #4
 800a110:	429d      	cmp	r5, r3
 800a112:	461a      	mov	r2, r3
 800a114:	d32f      	bcc.n	800a176 <quorem+0xf4>
 800a116:	613c      	str	r4, [r7, #16]
 800a118:	4638      	mov	r0, r7
 800a11a:	f001 f97b 	bl	800b414 <__mcmp>
 800a11e:	2800      	cmp	r0, #0
 800a120:	db25      	blt.n	800a16e <quorem+0xec>
 800a122:	4629      	mov	r1, r5
 800a124:	2000      	movs	r0, #0
 800a126:	f858 2b04 	ldr.w	r2, [r8], #4
 800a12a:	f8d1 c000 	ldr.w	ip, [r1]
 800a12e:	fa1f fe82 	uxth.w	lr, r2
 800a132:	fa1f f38c 	uxth.w	r3, ip
 800a136:	eba3 030e 	sub.w	r3, r3, lr
 800a13a:	4403      	add	r3, r0
 800a13c:	0c12      	lsrs	r2, r2, #16
 800a13e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a142:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a146:	b29b      	uxth	r3, r3
 800a148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a14c:	45c1      	cmp	r9, r8
 800a14e:	f841 3b04 	str.w	r3, [r1], #4
 800a152:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a156:	d2e6      	bcs.n	800a126 <quorem+0xa4>
 800a158:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a15c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a160:	b922      	cbnz	r2, 800a16c <quorem+0xea>
 800a162:	3b04      	subs	r3, #4
 800a164:	429d      	cmp	r5, r3
 800a166:	461a      	mov	r2, r3
 800a168:	d30b      	bcc.n	800a182 <quorem+0x100>
 800a16a:	613c      	str	r4, [r7, #16]
 800a16c:	3601      	adds	r6, #1
 800a16e:	4630      	mov	r0, r6
 800a170:	b003      	add	sp, #12
 800a172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a176:	6812      	ldr	r2, [r2, #0]
 800a178:	3b04      	subs	r3, #4
 800a17a:	2a00      	cmp	r2, #0
 800a17c:	d1cb      	bne.n	800a116 <quorem+0x94>
 800a17e:	3c01      	subs	r4, #1
 800a180:	e7c6      	b.n	800a110 <quorem+0x8e>
 800a182:	6812      	ldr	r2, [r2, #0]
 800a184:	3b04      	subs	r3, #4
 800a186:	2a00      	cmp	r2, #0
 800a188:	d1ef      	bne.n	800a16a <quorem+0xe8>
 800a18a:	3c01      	subs	r4, #1
 800a18c:	e7ea      	b.n	800a164 <quorem+0xe2>
 800a18e:	2000      	movs	r0, #0
 800a190:	e7ee      	b.n	800a170 <quorem+0xee>
 800a192:	0000      	movs	r0, r0
 800a194:	0000      	movs	r0, r0
	...

0800a198 <_dtoa_r>:
 800a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19c:	69c7      	ldr	r7, [r0, #28]
 800a19e:	b099      	sub	sp, #100	@ 0x64
 800a1a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a1a4:	ec55 4b10 	vmov	r4, r5, d0
 800a1a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a1aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1ac:	4683      	mov	fp, r0
 800a1ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1b2:	b97f      	cbnz	r7, 800a1d4 <_dtoa_r+0x3c>
 800a1b4:	2010      	movs	r0, #16
 800a1b6:	f000 fdfd 	bl	800adb4 <malloc>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800a1c0:	b920      	cbnz	r0, 800a1cc <_dtoa_r+0x34>
 800a1c2:	4ba7      	ldr	r3, [pc, #668]	@ (800a460 <_dtoa_r+0x2c8>)
 800a1c4:	21ef      	movs	r1, #239	@ 0xef
 800a1c6:	48a7      	ldr	r0, [pc, #668]	@ (800a464 <_dtoa_r+0x2cc>)
 800a1c8:	f001 fe20 	bl	800be0c <__assert_func>
 800a1cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a1d0:	6007      	str	r7, [r0, #0]
 800a1d2:	60c7      	str	r7, [r0, #12]
 800a1d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1d8:	6819      	ldr	r1, [r3, #0]
 800a1da:	b159      	cbz	r1, 800a1f4 <_dtoa_r+0x5c>
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	604a      	str	r2, [r1, #4]
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	4093      	lsls	r3, r2
 800a1e4:	608b      	str	r3, [r1, #8]
 800a1e6:	4658      	mov	r0, fp
 800a1e8:	f000 feda 	bl	800afa0 <_Bfree>
 800a1ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	1e2b      	subs	r3, r5, #0
 800a1f6:	bfb9      	ittee	lt
 800a1f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a1fc:	9303      	strlt	r3, [sp, #12]
 800a1fe:	2300      	movge	r3, #0
 800a200:	6033      	strge	r3, [r6, #0]
 800a202:	9f03      	ldr	r7, [sp, #12]
 800a204:	4b98      	ldr	r3, [pc, #608]	@ (800a468 <_dtoa_r+0x2d0>)
 800a206:	bfbc      	itt	lt
 800a208:	2201      	movlt	r2, #1
 800a20a:	6032      	strlt	r2, [r6, #0]
 800a20c:	43bb      	bics	r3, r7
 800a20e:	d112      	bne.n	800a236 <_dtoa_r+0x9e>
 800a210:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a212:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a216:	6013      	str	r3, [r2, #0]
 800a218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a21c:	4323      	orrs	r3, r4
 800a21e:	f000 854d 	beq.w	800acbc <_dtoa_r+0xb24>
 800a222:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a224:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a47c <_dtoa_r+0x2e4>
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 854f 	beq.w	800accc <_dtoa_r+0xb34>
 800a22e:	f10a 0303 	add.w	r3, sl, #3
 800a232:	f000 bd49 	b.w	800acc8 <_dtoa_r+0xb30>
 800a236:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a23a:	2200      	movs	r2, #0
 800a23c:	ec51 0b17 	vmov	r0, r1, d7
 800a240:	2300      	movs	r3, #0
 800a242:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a246:	f7f6 fc3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a24a:	4680      	mov	r8, r0
 800a24c:	b158      	cbz	r0, 800a266 <_dtoa_r+0xce>
 800a24e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a250:	2301      	movs	r3, #1
 800a252:	6013      	str	r3, [r2, #0]
 800a254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a256:	b113      	cbz	r3, 800a25e <_dtoa_r+0xc6>
 800a258:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a25a:	4b84      	ldr	r3, [pc, #528]	@ (800a46c <_dtoa_r+0x2d4>)
 800a25c:	6013      	str	r3, [r2, #0]
 800a25e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a480 <_dtoa_r+0x2e8>
 800a262:	f000 bd33 	b.w	800accc <_dtoa_r+0xb34>
 800a266:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a26a:	aa16      	add	r2, sp, #88	@ 0x58
 800a26c:	a917      	add	r1, sp, #92	@ 0x5c
 800a26e:	4658      	mov	r0, fp
 800a270:	f001 f980 	bl	800b574 <__d2b>
 800a274:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a278:	4681      	mov	r9, r0
 800a27a:	2e00      	cmp	r6, #0
 800a27c:	d077      	beq.n	800a36e <_dtoa_r+0x1d6>
 800a27e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a280:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a28c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a290:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a294:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a298:	4619      	mov	r1, r3
 800a29a:	2200      	movs	r2, #0
 800a29c:	4b74      	ldr	r3, [pc, #464]	@ (800a470 <_dtoa_r+0x2d8>)
 800a29e:	f7f5 fff3 	bl	8000288 <__aeabi_dsub>
 800a2a2:	a369      	add	r3, pc, #420	@ (adr r3, 800a448 <_dtoa_r+0x2b0>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	f7f6 f9a6 	bl	80005f8 <__aeabi_dmul>
 800a2ac:	a368      	add	r3, pc, #416	@ (adr r3, 800a450 <_dtoa_r+0x2b8>)
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	f7f5 ffeb 	bl	800028c <__adddf3>
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	f7f6 f932 	bl	8000524 <__aeabi_i2d>
 800a2c0:	a365      	add	r3, pc, #404	@ (adr r3, 800a458 <_dtoa_r+0x2c0>)
 800a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c6:	f7f6 f997 	bl	80005f8 <__aeabi_dmul>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	f7f5 ffdb 	bl	800028c <__adddf3>
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	460d      	mov	r5, r1
 800a2da:	f7f6 fc3d 	bl	8000b58 <__aeabi_d2iz>
 800a2de:	2200      	movs	r2, #0
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	f7f6 fbf8 	bl	8000adc <__aeabi_dcmplt>
 800a2ec:	b140      	cbz	r0, 800a300 <_dtoa_r+0x168>
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	f7f6 f918 	bl	8000524 <__aeabi_i2d>
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	462b      	mov	r3, r5
 800a2f8:	f7f6 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2fc:	b900      	cbnz	r0, 800a300 <_dtoa_r+0x168>
 800a2fe:	3f01      	subs	r7, #1
 800a300:	2f16      	cmp	r7, #22
 800a302:	d851      	bhi.n	800a3a8 <_dtoa_r+0x210>
 800a304:	4b5b      	ldr	r3, [pc, #364]	@ (800a474 <_dtoa_r+0x2dc>)
 800a306:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a312:	f7f6 fbe3 	bl	8000adc <__aeabi_dcmplt>
 800a316:	2800      	cmp	r0, #0
 800a318:	d048      	beq.n	800a3ac <_dtoa_r+0x214>
 800a31a:	3f01      	subs	r7, #1
 800a31c:	2300      	movs	r3, #0
 800a31e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a320:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a322:	1b9b      	subs	r3, r3, r6
 800a324:	1e5a      	subs	r2, r3, #1
 800a326:	bf44      	itt	mi
 800a328:	f1c3 0801 	rsbmi	r8, r3, #1
 800a32c:	2300      	movmi	r3, #0
 800a32e:	9208      	str	r2, [sp, #32]
 800a330:	bf54      	ite	pl
 800a332:	f04f 0800 	movpl.w	r8, #0
 800a336:	9308      	strmi	r3, [sp, #32]
 800a338:	2f00      	cmp	r7, #0
 800a33a:	db39      	blt.n	800a3b0 <_dtoa_r+0x218>
 800a33c:	9b08      	ldr	r3, [sp, #32]
 800a33e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a340:	443b      	add	r3, r7
 800a342:	9308      	str	r3, [sp, #32]
 800a344:	2300      	movs	r3, #0
 800a346:	930a      	str	r3, [sp, #40]	@ 0x28
 800a348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a34a:	2b09      	cmp	r3, #9
 800a34c:	d864      	bhi.n	800a418 <_dtoa_r+0x280>
 800a34e:	2b05      	cmp	r3, #5
 800a350:	bfc4      	itt	gt
 800a352:	3b04      	subgt	r3, #4
 800a354:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a358:	f1a3 0302 	sub.w	r3, r3, #2
 800a35c:	bfcc      	ite	gt
 800a35e:	2400      	movgt	r4, #0
 800a360:	2401      	movle	r4, #1
 800a362:	2b03      	cmp	r3, #3
 800a364:	d863      	bhi.n	800a42e <_dtoa_r+0x296>
 800a366:	e8df f003 	tbb	[pc, r3]
 800a36a:	372a      	.short	0x372a
 800a36c:	5535      	.short	0x5535
 800a36e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a372:	441e      	add	r6, r3
 800a374:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a378:	2b20      	cmp	r3, #32
 800a37a:	bfc1      	itttt	gt
 800a37c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a380:	409f      	lslgt	r7, r3
 800a382:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a386:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a38a:	bfd6      	itet	le
 800a38c:	f1c3 0320 	rsble	r3, r3, #32
 800a390:	ea47 0003 	orrgt.w	r0, r7, r3
 800a394:	fa04 f003 	lslle.w	r0, r4, r3
 800a398:	f7f6 f8b4 	bl	8000504 <__aeabi_ui2d>
 800a39c:	2201      	movs	r2, #1
 800a39e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a3a2:	3e01      	subs	r6, #1
 800a3a4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a3a6:	e777      	b.n	800a298 <_dtoa_r+0x100>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e7b8      	b.n	800a31e <_dtoa_r+0x186>
 800a3ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800a3ae:	e7b7      	b.n	800a320 <_dtoa_r+0x188>
 800a3b0:	427b      	negs	r3, r7
 800a3b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	eba8 0807 	sub.w	r8, r8, r7
 800a3ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3bc:	e7c4      	b.n	800a348 <_dtoa_r+0x1b0>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	dc35      	bgt.n	800a434 <_dtoa_r+0x29c>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	9307      	str	r3, [sp, #28]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3d2:	e00b      	b.n	800a3ec <_dtoa_r+0x254>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e7f3      	b.n	800a3c0 <_dtoa_r+0x228>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3de:	18fb      	adds	r3, r7, r3
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	9307      	str	r3, [sp, #28]
 800a3e8:	bfb8      	it	lt
 800a3ea:	2301      	movlt	r3, #1
 800a3ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	2204      	movs	r2, #4
 800a3f4:	f102 0514 	add.w	r5, r2, #20
 800a3f8:	429d      	cmp	r5, r3
 800a3fa:	d91f      	bls.n	800a43c <_dtoa_r+0x2a4>
 800a3fc:	6041      	str	r1, [r0, #4]
 800a3fe:	4658      	mov	r0, fp
 800a400:	f000 fd8e 	bl	800af20 <_Balloc>
 800a404:	4682      	mov	sl, r0
 800a406:	2800      	cmp	r0, #0
 800a408:	d13c      	bne.n	800a484 <_dtoa_r+0x2ec>
 800a40a:	4b1b      	ldr	r3, [pc, #108]	@ (800a478 <_dtoa_r+0x2e0>)
 800a40c:	4602      	mov	r2, r0
 800a40e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a412:	e6d8      	b.n	800a1c6 <_dtoa_r+0x2e>
 800a414:	2301      	movs	r3, #1
 800a416:	e7e0      	b.n	800a3da <_dtoa_r+0x242>
 800a418:	2401      	movs	r4, #1
 800a41a:	2300      	movs	r3, #0
 800a41c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a41e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a420:	f04f 33ff 	mov.w	r3, #4294967295
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	9307      	str	r3, [sp, #28]
 800a428:	2200      	movs	r2, #0
 800a42a:	2312      	movs	r3, #18
 800a42c:	e7d0      	b.n	800a3d0 <_dtoa_r+0x238>
 800a42e:	2301      	movs	r3, #1
 800a430:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a432:	e7f5      	b.n	800a420 <_dtoa_r+0x288>
 800a434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	9307      	str	r3, [sp, #28]
 800a43a:	e7d7      	b.n	800a3ec <_dtoa_r+0x254>
 800a43c:	3101      	adds	r1, #1
 800a43e:	0052      	lsls	r2, r2, #1
 800a440:	e7d8      	b.n	800a3f4 <_dtoa_r+0x25c>
 800a442:	bf00      	nop
 800a444:	f3af 8000 	nop.w
 800a448:	636f4361 	.word	0x636f4361
 800a44c:	3fd287a7 	.word	0x3fd287a7
 800a450:	8b60c8b3 	.word	0x8b60c8b3
 800a454:	3fc68a28 	.word	0x3fc68a28
 800a458:	509f79fb 	.word	0x509f79fb
 800a45c:	3fd34413 	.word	0x3fd34413
 800a460:	0800c185 	.word	0x0800c185
 800a464:	0800c19c 	.word	0x0800c19c
 800a468:	7ff00000 	.word	0x7ff00000
 800a46c:	0800c155 	.word	0x0800c155
 800a470:	3ff80000 	.word	0x3ff80000
 800a474:	0800c298 	.word	0x0800c298
 800a478:	0800c1f4 	.word	0x0800c1f4
 800a47c:	0800c181 	.word	0x0800c181
 800a480:	0800c154 	.word	0x0800c154
 800a484:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a488:	6018      	str	r0, [r3, #0]
 800a48a:	9b07      	ldr	r3, [sp, #28]
 800a48c:	2b0e      	cmp	r3, #14
 800a48e:	f200 80a4 	bhi.w	800a5da <_dtoa_r+0x442>
 800a492:	2c00      	cmp	r4, #0
 800a494:	f000 80a1 	beq.w	800a5da <_dtoa_r+0x442>
 800a498:	2f00      	cmp	r7, #0
 800a49a:	dd33      	ble.n	800a504 <_dtoa_r+0x36c>
 800a49c:	4bad      	ldr	r3, [pc, #692]	@ (800a754 <_dtoa_r+0x5bc>)
 800a49e:	f007 020f 	and.w	r2, r7, #15
 800a4a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4a6:	ed93 7b00 	vldr	d7, [r3]
 800a4aa:	05f8      	lsls	r0, r7, #23
 800a4ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a4b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a4b4:	d516      	bpl.n	800a4e4 <_dtoa_r+0x34c>
 800a4b6:	4ba8      	ldr	r3, [pc, #672]	@ (800a758 <_dtoa_r+0x5c0>)
 800a4b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4c0:	f7f6 f9c4 	bl	800084c <__aeabi_ddiv>
 800a4c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4c8:	f004 040f 	and.w	r4, r4, #15
 800a4cc:	2603      	movs	r6, #3
 800a4ce:	4da2      	ldr	r5, [pc, #648]	@ (800a758 <_dtoa_r+0x5c0>)
 800a4d0:	b954      	cbnz	r4, 800a4e8 <_dtoa_r+0x350>
 800a4d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4da:	f7f6 f9b7 	bl	800084c <__aeabi_ddiv>
 800a4de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4e2:	e028      	b.n	800a536 <_dtoa_r+0x39e>
 800a4e4:	2602      	movs	r6, #2
 800a4e6:	e7f2      	b.n	800a4ce <_dtoa_r+0x336>
 800a4e8:	07e1      	lsls	r1, r4, #31
 800a4ea:	d508      	bpl.n	800a4fe <_dtoa_r+0x366>
 800a4ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4f4:	f7f6 f880 	bl	80005f8 <__aeabi_dmul>
 800a4f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4fc:	3601      	adds	r6, #1
 800a4fe:	1064      	asrs	r4, r4, #1
 800a500:	3508      	adds	r5, #8
 800a502:	e7e5      	b.n	800a4d0 <_dtoa_r+0x338>
 800a504:	f000 80d2 	beq.w	800a6ac <_dtoa_r+0x514>
 800a508:	427c      	negs	r4, r7
 800a50a:	4b92      	ldr	r3, [pc, #584]	@ (800a754 <_dtoa_r+0x5bc>)
 800a50c:	4d92      	ldr	r5, [pc, #584]	@ (800a758 <_dtoa_r+0x5c0>)
 800a50e:	f004 020f 	and.w	r2, r4, #15
 800a512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a51e:	f7f6 f86b 	bl	80005f8 <__aeabi_dmul>
 800a522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a526:	1124      	asrs	r4, r4, #4
 800a528:	2300      	movs	r3, #0
 800a52a:	2602      	movs	r6, #2
 800a52c:	2c00      	cmp	r4, #0
 800a52e:	f040 80b2 	bne.w	800a696 <_dtoa_r+0x4fe>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1d3      	bne.n	800a4de <_dtoa_r+0x346>
 800a536:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a538:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 80b7 	beq.w	800a6b0 <_dtoa_r+0x518>
 800a542:	4b86      	ldr	r3, [pc, #536]	@ (800a75c <_dtoa_r+0x5c4>)
 800a544:	2200      	movs	r2, #0
 800a546:	4620      	mov	r0, r4
 800a548:	4629      	mov	r1, r5
 800a54a:	f7f6 fac7 	bl	8000adc <__aeabi_dcmplt>
 800a54e:	2800      	cmp	r0, #0
 800a550:	f000 80ae 	beq.w	800a6b0 <_dtoa_r+0x518>
 800a554:	9b07      	ldr	r3, [sp, #28]
 800a556:	2b00      	cmp	r3, #0
 800a558:	f000 80aa 	beq.w	800a6b0 <_dtoa_r+0x518>
 800a55c:	9b00      	ldr	r3, [sp, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dd37      	ble.n	800a5d2 <_dtoa_r+0x43a>
 800a562:	1e7b      	subs	r3, r7, #1
 800a564:	9304      	str	r3, [sp, #16]
 800a566:	4620      	mov	r0, r4
 800a568:	4b7d      	ldr	r3, [pc, #500]	@ (800a760 <_dtoa_r+0x5c8>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	4629      	mov	r1, r5
 800a56e:	f7f6 f843 	bl	80005f8 <__aeabi_dmul>
 800a572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a576:	9c00      	ldr	r4, [sp, #0]
 800a578:	3601      	adds	r6, #1
 800a57a:	4630      	mov	r0, r6
 800a57c:	f7f5 ffd2 	bl	8000524 <__aeabi_i2d>
 800a580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a584:	f7f6 f838 	bl	80005f8 <__aeabi_dmul>
 800a588:	4b76      	ldr	r3, [pc, #472]	@ (800a764 <_dtoa_r+0x5cc>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	f7f5 fe7e 	bl	800028c <__adddf3>
 800a590:	4605      	mov	r5, r0
 800a592:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a596:	2c00      	cmp	r4, #0
 800a598:	f040 808d 	bne.w	800a6b6 <_dtoa_r+0x51e>
 800a59c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5a0:	4b71      	ldr	r3, [pc, #452]	@ (800a768 <_dtoa_r+0x5d0>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f7f5 fe70 	bl	8000288 <__aeabi_dsub>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5b0:	462a      	mov	r2, r5
 800a5b2:	4633      	mov	r3, r6
 800a5b4:	f7f6 fab0 	bl	8000b18 <__aeabi_dcmpgt>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	f040 828b 	bne.w	800aad4 <_dtoa_r+0x93c>
 800a5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5c2:	462a      	mov	r2, r5
 800a5c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a5c8:	f7f6 fa88 	bl	8000adc <__aeabi_dcmplt>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	f040 8128 	bne.w	800a822 <_dtoa_r+0x68a>
 800a5d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a5d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a5da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f2c0 815a 	blt.w	800a896 <_dtoa_r+0x6fe>
 800a5e2:	2f0e      	cmp	r7, #14
 800a5e4:	f300 8157 	bgt.w	800a896 <_dtoa_r+0x6fe>
 800a5e8:	4b5a      	ldr	r3, [pc, #360]	@ (800a754 <_dtoa_r+0x5bc>)
 800a5ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a5ee:	ed93 7b00 	vldr	d7, [r3]
 800a5f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	ed8d 7b00 	vstr	d7, [sp]
 800a5fa:	da03      	bge.n	800a604 <_dtoa_r+0x46c>
 800a5fc:	9b07      	ldr	r3, [sp, #28]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f340 8101 	ble.w	800a806 <_dtoa_r+0x66e>
 800a604:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a608:	4656      	mov	r6, sl
 800a60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f7f6 f91b 	bl	800084c <__aeabi_ddiv>
 800a616:	f7f6 fa9f 	bl	8000b58 <__aeabi_d2iz>
 800a61a:	4680      	mov	r8, r0
 800a61c:	f7f5 ff82 	bl	8000524 <__aeabi_i2d>
 800a620:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a624:	f7f5 ffe8 	bl	80005f8 <__aeabi_dmul>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	4620      	mov	r0, r4
 800a62e:	4629      	mov	r1, r5
 800a630:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a634:	f7f5 fe28 	bl	8000288 <__aeabi_dsub>
 800a638:	f806 4b01 	strb.w	r4, [r6], #1
 800a63c:	9d07      	ldr	r5, [sp, #28]
 800a63e:	eba6 040a 	sub.w	r4, r6, sl
 800a642:	42a5      	cmp	r5, r4
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	f040 8117 	bne.w	800a87a <_dtoa_r+0x6e2>
 800a64c:	f7f5 fe1e 	bl	800028c <__adddf3>
 800a650:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a654:	4604      	mov	r4, r0
 800a656:	460d      	mov	r5, r1
 800a658:	f7f6 fa5e 	bl	8000b18 <__aeabi_dcmpgt>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	f040 80f9 	bne.w	800a854 <_dtoa_r+0x6bc>
 800a662:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a666:	4620      	mov	r0, r4
 800a668:	4629      	mov	r1, r5
 800a66a:	f7f6 fa2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a66e:	b118      	cbz	r0, 800a678 <_dtoa_r+0x4e0>
 800a670:	f018 0f01 	tst.w	r8, #1
 800a674:	f040 80ee 	bne.w	800a854 <_dtoa_r+0x6bc>
 800a678:	4649      	mov	r1, r9
 800a67a:	4658      	mov	r0, fp
 800a67c:	f000 fc90 	bl	800afa0 <_Bfree>
 800a680:	2300      	movs	r3, #0
 800a682:	7033      	strb	r3, [r6, #0]
 800a684:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a686:	3701      	adds	r7, #1
 800a688:	601f      	str	r7, [r3, #0]
 800a68a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 831d 	beq.w	800accc <_dtoa_r+0xb34>
 800a692:	601e      	str	r6, [r3, #0]
 800a694:	e31a      	b.n	800accc <_dtoa_r+0xb34>
 800a696:	07e2      	lsls	r2, r4, #31
 800a698:	d505      	bpl.n	800a6a6 <_dtoa_r+0x50e>
 800a69a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a69e:	f7f5 ffab 	bl	80005f8 <__aeabi_dmul>
 800a6a2:	3601      	adds	r6, #1
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	1064      	asrs	r4, r4, #1
 800a6a8:	3508      	adds	r5, #8
 800a6aa:	e73f      	b.n	800a52c <_dtoa_r+0x394>
 800a6ac:	2602      	movs	r6, #2
 800a6ae:	e742      	b.n	800a536 <_dtoa_r+0x39e>
 800a6b0:	9c07      	ldr	r4, [sp, #28]
 800a6b2:	9704      	str	r7, [sp, #16]
 800a6b4:	e761      	b.n	800a57a <_dtoa_r+0x3e2>
 800a6b6:	4b27      	ldr	r3, [pc, #156]	@ (800a754 <_dtoa_r+0x5bc>)
 800a6b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6c2:	4454      	add	r4, sl
 800a6c4:	2900      	cmp	r1, #0
 800a6c6:	d053      	beq.n	800a770 <_dtoa_r+0x5d8>
 800a6c8:	4928      	ldr	r1, [pc, #160]	@ (800a76c <_dtoa_r+0x5d4>)
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	f7f6 f8be 	bl	800084c <__aeabi_ddiv>
 800a6d0:	4633      	mov	r3, r6
 800a6d2:	462a      	mov	r2, r5
 800a6d4:	f7f5 fdd8 	bl	8000288 <__aeabi_dsub>
 800a6d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6dc:	4656      	mov	r6, sl
 800a6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6e2:	f7f6 fa39 	bl	8000b58 <__aeabi_d2iz>
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	f7f5 ff1c 	bl	8000524 <__aeabi_i2d>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6f4:	f7f5 fdc8 	bl	8000288 <__aeabi_dsub>
 800a6f8:	3530      	adds	r5, #48	@ 0x30
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a702:	f806 5b01 	strb.w	r5, [r6], #1
 800a706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a70a:	f7f6 f9e7 	bl	8000adc <__aeabi_dcmplt>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d171      	bne.n	800a7f6 <_dtoa_r+0x65e>
 800a712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a716:	4911      	ldr	r1, [pc, #68]	@ (800a75c <_dtoa_r+0x5c4>)
 800a718:	2000      	movs	r0, #0
 800a71a:	f7f5 fdb5 	bl	8000288 <__aeabi_dsub>
 800a71e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a722:	f7f6 f9db 	bl	8000adc <__aeabi_dcmplt>
 800a726:	2800      	cmp	r0, #0
 800a728:	f040 8095 	bne.w	800a856 <_dtoa_r+0x6be>
 800a72c:	42a6      	cmp	r6, r4
 800a72e:	f43f af50 	beq.w	800a5d2 <_dtoa_r+0x43a>
 800a732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a736:	4b0a      	ldr	r3, [pc, #40]	@ (800a760 <_dtoa_r+0x5c8>)
 800a738:	2200      	movs	r2, #0
 800a73a:	f7f5 ff5d 	bl	80005f8 <__aeabi_dmul>
 800a73e:	4b08      	ldr	r3, [pc, #32]	@ (800a760 <_dtoa_r+0x5c8>)
 800a740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a744:	2200      	movs	r2, #0
 800a746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a74a:	f7f5 ff55 	bl	80005f8 <__aeabi_dmul>
 800a74e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a752:	e7c4      	b.n	800a6de <_dtoa_r+0x546>
 800a754:	0800c298 	.word	0x0800c298
 800a758:	0800c270 	.word	0x0800c270
 800a75c:	3ff00000 	.word	0x3ff00000
 800a760:	40240000 	.word	0x40240000
 800a764:	401c0000 	.word	0x401c0000
 800a768:	40140000 	.word	0x40140000
 800a76c:	3fe00000 	.word	0x3fe00000
 800a770:	4631      	mov	r1, r6
 800a772:	4628      	mov	r0, r5
 800a774:	f7f5 ff40 	bl	80005f8 <__aeabi_dmul>
 800a778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a77c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a77e:	4656      	mov	r6, sl
 800a780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a784:	f7f6 f9e8 	bl	8000b58 <__aeabi_d2iz>
 800a788:	4605      	mov	r5, r0
 800a78a:	f7f5 fecb 	bl	8000524 <__aeabi_i2d>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a796:	f7f5 fd77 	bl	8000288 <__aeabi_dsub>
 800a79a:	3530      	adds	r5, #48	@ 0x30
 800a79c:	f806 5b01 	strb.w	r5, [r6], #1
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	42a6      	cmp	r6, r4
 800a7a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7aa:	f04f 0200 	mov.w	r2, #0
 800a7ae:	d124      	bne.n	800a7fa <_dtoa_r+0x662>
 800a7b0:	4bac      	ldr	r3, [pc, #688]	@ (800aa64 <_dtoa_r+0x8cc>)
 800a7b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a7b6:	f7f5 fd69 	bl	800028c <__adddf3>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7c2:	f7f6 f9a9 	bl	8000b18 <__aeabi_dcmpgt>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d145      	bne.n	800a856 <_dtoa_r+0x6be>
 800a7ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7ce:	49a5      	ldr	r1, [pc, #660]	@ (800aa64 <_dtoa_r+0x8cc>)
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	f7f5 fd59 	bl	8000288 <__aeabi_dsub>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7de:	f7f6 f97d 	bl	8000adc <__aeabi_dcmplt>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	f43f aef5 	beq.w	800a5d2 <_dtoa_r+0x43a>
 800a7e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a7ea:	1e73      	subs	r3, r6, #1
 800a7ec:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7f2:	2b30      	cmp	r3, #48	@ 0x30
 800a7f4:	d0f8      	beq.n	800a7e8 <_dtoa_r+0x650>
 800a7f6:	9f04      	ldr	r7, [sp, #16]
 800a7f8:	e73e      	b.n	800a678 <_dtoa_r+0x4e0>
 800a7fa:	4b9b      	ldr	r3, [pc, #620]	@ (800aa68 <_dtoa_r+0x8d0>)
 800a7fc:	f7f5 fefc 	bl	80005f8 <__aeabi_dmul>
 800a800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a804:	e7bc      	b.n	800a780 <_dtoa_r+0x5e8>
 800a806:	d10c      	bne.n	800a822 <_dtoa_r+0x68a>
 800a808:	4b98      	ldr	r3, [pc, #608]	@ (800aa6c <_dtoa_r+0x8d4>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a810:	f7f5 fef2 	bl	80005f8 <__aeabi_dmul>
 800a814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a818:	f7f6 f974 	bl	8000b04 <__aeabi_dcmpge>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	f000 8157 	beq.w	800aad0 <_dtoa_r+0x938>
 800a822:	2400      	movs	r4, #0
 800a824:	4625      	mov	r5, r4
 800a826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a828:	43db      	mvns	r3, r3
 800a82a:	9304      	str	r3, [sp, #16]
 800a82c:	4656      	mov	r6, sl
 800a82e:	2700      	movs	r7, #0
 800a830:	4621      	mov	r1, r4
 800a832:	4658      	mov	r0, fp
 800a834:	f000 fbb4 	bl	800afa0 <_Bfree>
 800a838:	2d00      	cmp	r5, #0
 800a83a:	d0dc      	beq.n	800a7f6 <_dtoa_r+0x65e>
 800a83c:	b12f      	cbz	r7, 800a84a <_dtoa_r+0x6b2>
 800a83e:	42af      	cmp	r7, r5
 800a840:	d003      	beq.n	800a84a <_dtoa_r+0x6b2>
 800a842:	4639      	mov	r1, r7
 800a844:	4658      	mov	r0, fp
 800a846:	f000 fbab 	bl	800afa0 <_Bfree>
 800a84a:	4629      	mov	r1, r5
 800a84c:	4658      	mov	r0, fp
 800a84e:	f000 fba7 	bl	800afa0 <_Bfree>
 800a852:	e7d0      	b.n	800a7f6 <_dtoa_r+0x65e>
 800a854:	9704      	str	r7, [sp, #16]
 800a856:	4633      	mov	r3, r6
 800a858:	461e      	mov	r6, r3
 800a85a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a85e:	2a39      	cmp	r2, #57	@ 0x39
 800a860:	d107      	bne.n	800a872 <_dtoa_r+0x6da>
 800a862:	459a      	cmp	sl, r3
 800a864:	d1f8      	bne.n	800a858 <_dtoa_r+0x6c0>
 800a866:	9a04      	ldr	r2, [sp, #16]
 800a868:	3201      	adds	r2, #1
 800a86a:	9204      	str	r2, [sp, #16]
 800a86c:	2230      	movs	r2, #48	@ 0x30
 800a86e:	f88a 2000 	strb.w	r2, [sl]
 800a872:	781a      	ldrb	r2, [r3, #0]
 800a874:	3201      	adds	r2, #1
 800a876:	701a      	strb	r2, [r3, #0]
 800a878:	e7bd      	b.n	800a7f6 <_dtoa_r+0x65e>
 800a87a:	4b7b      	ldr	r3, [pc, #492]	@ (800aa68 <_dtoa_r+0x8d0>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	f7f5 febb 	bl	80005f8 <__aeabi_dmul>
 800a882:	2200      	movs	r2, #0
 800a884:	2300      	movs	r3, #0
 800a886:	4604      	mov	r4, r0
 800a888:	460d      	mov	r5, r1
 800a88a:	f7f6 f91d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a88e:	2800      	cmp	r0, #0
 800a890:	f43f aebb 	beq.w	800a60a <_dtoa_r+0x472>
 800a894:	e6f0      	b.n	800a678 <_dtoa_r+0x4e0>
 800a896:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a898:	2a00      	cmp	r2, #0
 800a89a:	f000 80db 	beq.w	800aa54 <_dtoa_r+0x8bc>
 800a89e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8a0:	2a01      	cmp	r2, #1
 800a8a2:	f300 80bf 	bgt.w	800aa24 <_dtoa_r+0x88c>
 800a8a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a8a8:	2a00      	cmp	r2, #0
 800a8aa:	f000 80b7 	beq.w	800aa1c <_dtoa_r+0x884>
 800a8ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a8b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a8b4:	4646      	mov	r6, r8
 800a8b6:	9a08      	ldr	r2, [sp, #32]
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	441a      	add	r2, r3
 800a8bc:	4658      	mov	r0, fp
 800a8be:	4498      	add	r8, r3
 800a8c0:	9208      	str	r2, [sp, #32]
 800a8c2:	f000 fc21 	bl	800b108 <__i2b>
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	b15e      	cbz	r6, 800a8e2 <_dtoa_r+0x74a>
 800a8ca:	9b08      	ldr	r3, [sp, #32]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	dd08      	ble.n	800a8e2 <_dtoa_r+0x74a>
 800a8d0:	42b3      	cmp	r3, r6
 800a8d2:	9a08      	ldr	r2, [sp, #32]
 800a8d4:	bfa8      	it	ge
 800a8d6:	4633      	movge	r3, r6
 800a8d8:	eba8 0803 	sub.w	r8, r8, r3
 800a8dc:	1af6      	subs	r6, r6, r3
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	9308      	str	r3, [sp, #32]
 800a8e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8e4:	b1f3      	cbz	r3, 800a924 <_dtoa_r+0x78c>
 800a8e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 80b7 	beq.w	800aa5c <_dtoa_r+0x8c4>
 800a8ee:	b18c      	cbz	r4, 800a914 <_dtoa_r+0x77c>
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	4622      	mov	r2, r4
 800a8f4:	4658      	mov	r0, fp
 800a8f6:	f000 fcc7 	bl	800b288 <__pow5mult>
 800a8fa:	464a      	mov	r2, r9
 800a8fc:	4601      	mov	r1, r0
 800a8fe:	4605      	mov	r5, r0
 800a900:	4658      	mov	r0, fp
 800a902:	f000 fc17 	bl	800b134 <__multiply>
 800a906:	4649      	mov	r1, r9
 800a908:	9004      	str	r0, [sp, #16]
 800a90a:	4658      	mov	r0, fp
 800a90c:	f000 fb48 	bl	800afa0 <_Bfree>
 800a910:	9b04      	ldr	r3, [sp, #16]
 800a912:	4699      	mov	r9, r3
 800a914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a916:	1b1a      	subs	r2, r3, r4
 800a918:	d004      	beq.n	800a924 <_dtoa_r+0x78c>
 800a91a:	4649      	mov	r1, r9
 800a91c:	4658      	mov	r0, fp
 800a91e:	f000 fcb3 	bl	800b288 <__pow5mult>
 800a922:	4681      	mov	r9, r0
 800a924:	2101      	movs	r1, #1
 800a926:	4658      	mov	r0, fp
 800a928:	f000 fbee 	bl	800b108 <__i2b>
 800a92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a92e:	4604      	mov	r4, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 81cf 	beq.w	800acd4 <_dtoa_r+0xb3c>
 800a936:	461a      	mov	r2, r3
 800a938:	4601      	mov	r1, r0
 800a93a:	4658      	mov	r0, fp
 800a93c:	f000 fca4 	bl	800b288 <__pow5mult>
 800a940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a942:	2b01      	cmp	r3, #1
 800a944:	4604      	mov	r4, r0
 800a946:	f300 8095 	bgt.w	800aa74 <_dtoa_r+0x8dc>
 800a94a:	9b02      	ldr	r3, [sp, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f040 8087 	bne.w	800aa60 <_dtoa_r+0x8c8>
 800a952:	9b03      	ldr	r3, [sp, #12]
 800a954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f040 8089 	bne.w	800aa70 <_dtoa_r+0x8d8>
 800a95e:	9b03      	ldr	r3, [sp, #12]
 800a960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a964:	0d1b      	lsrs	r3, r3, #20
 800a966:	051b      	lsls	r3, r3, #20
 800a968:	b12b      	cbz	r3, 800a976 <_dtoa_r+0x7de>
 800a96a:	9b08      	ldr	r3, [sp, #32]
 800a96c:	3301      	adds	r3, #1
 800a96e:	9308      	str	r3, [sp, #32]
 800a970:	f108 0801 	add.w	r8, r8, #1
 800a974:	2301      	movs	r3, #1
 800a976:	930a      	str	r3, [sp, #40]	@ 0x28
 800a978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 81b0 	beq.w	800ace0 <_dtoa_r+0xb48>
 800a980:	6923      	ldr	r3, [r4, #16]
 800a982:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a986:	6918      	ldr	r0, [r3, #16]
 800a988:	f000 fb72 	bl	800b070 <__hi0bits>
 800a98c:	f1c0 0020 	rsb	r0, r0, #32
 800a990:	9b08      	ldr	r3, [sp, #32]
 800a992:	4418      	add	r0, r3
 800a994:	f010 001f 	ands.w	r0, r0, #31
 800a998:	d077      	beq.n	800aa8a <_dtoa_r+0x8f2>
 800a99a:	f1c0 0320 	rsb	r3, r0, #32
 800a99e:	2b04      	cmp	r3, #4
 800a9a0:	dd6b      	ble.n	800aa7a <_dtoa_r+0x8e2>
 800a9a2:	9b08      	ldr	r3, [sp, #32]
 800a9a4:	f1c0 001c 	rsb	r0, r0, #28
 800a9a8:	4403      	add	r3, r0
 800a9aa:	4480      	add	r8, r0
 800a9ac:	4406      	add	r6, r0
 800a9ae:	9308      	str	r3, [sp, #32]
 800a9b0:	f1b8 0f00 	cmp.w	r8, #0
 800a9b4:	dd05      	ble.n	800a9c2 <_dtoa_r+0x82a>
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	4642      	mov	r2, r8
 800a9ba:	4658      	mov	r0, fp
 800a9bc:	f000 fcbe 	bl	800b33c <__lshift>
 800a9c0:	4681      	mov	r9, r0
 800a9c2:	9b08      	ldr	r3, [sp, #32]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	dd05      	ble.n	800a9d4 <_dtoa_r+0x83c>
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4658      	mov	r0, fp
 800a9ce:	f000 fcb5 	bl	800b33c <__lshift>
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d059      	beq.n	800aa8e <_dtoa_r+0x8f6>
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4648      	mov	r0, r9
 800a9de:	f000 fd19 	bl	800b414 <__mcmp>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	da53      	bge.n	800aa8e <_dtoa_r+0x8f6>
 800a9e6:	1e7b      	subs	r3, r7, #1
 800a9e8:	9304      	str	r3, [sp, #16]
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	220a      	movs	r2, #10
 800a9f0:	4658      	mov	r0, fp
 800a9f2:	f000 faf7 	bl	800afe4 <__multadd>
 800a9f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9f8:	4681      	mov	r9, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f000 8172 	beq.w	800ace4 <_dtoa_r+0xb4c>
 800aa00:	2300      	movs	r3, #0
 800aa02:	4629      	mov	r1, r5
 800aa04:	220a      	movs	r2, #10
 800aa06:	4658      	mov	r0, fp
 800aa08:	f000 faec 	bl	800afe4 <__multadd>
 800aa0c:	9b00      	ldr	r3, [sp, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	4605      	mov	r5, r0
 800aa12:	dc67      	bgt.n	800aae4 <_dtoa_r+0x94c>
 800aa14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	dc41      	bgt.n	800aa9e <_dtoa_r+0x906>
 800aa1a:	e063      	b.n	800aae4 <_dtoa_r+0x94c>
 800aa1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aa22:	e746      	b.n	800a8b2 <_dtoa_r+0x71a>
 800aa24:	9b07      	ldr	r3, [sp, #28]
 800aa26:	1e5c      	subs	r4, r3, #1
 800aa28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa2a:	42a3      	cmp	r3, r4
 800aa2c:	bfbf      	itttt	lt
 800aa2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aa30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aa32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aa34:	1ae3      	sublt	r3, r4, r3
 800aa36:	bfb4      	ite	lt
 800aa38:	18d2      	addlt	r2, r2, r3
 800aa3a:	1b1c      	subge	r4, r3, r4
 800aa3c:	9b07      	ldr	r3, [sp, #28]
 800aa3e:	bfbc      	itt	lt
 800aa40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aa42:	2400      	movlt	r4, #0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	bfb5      	itete	lt
 800aa48:	eba8 0603 	sublt.w	r6, r8, r3
 800aa4c:	9b07      	ldrge	r3, [sp, #28]
 800aa4e:	2300      	movlt	r3, #0
 800aa50:	4646      	movge	r6, r8
 800aa52:	e730      	b.n	800a8b6 <_dtoa_r+0x71e>
 800aa54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aa58:	4646      	mov	r6, r8
 800aa5a:	e735      	b.n	800a8c8 <_dtoa_r+0x730>
 800aa5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa5e:	e75c      	b.n	800a91a <_dtoa_r+0x782>
 800aa60:	2300      	movs	r3, #0
 800aa62:	e788      	b.n	800a976 <_dtoa_r+0x7de>
 800aa64:	3fe00000 	.word	0x3fe00000
 800aa68:	40240000 	.word	0x40240000
 800aa6c:	40140000 	.word	0x40140000
 800aa70:	9b02      	ldr	r3, [sp, #8]
 800aa72:	e780      	b.n	800a976 <_dtoa_r+0x7de>
 800aa74:	2300      	movs	r3, #0
 800aa76:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa78:	e782      	b.n	800a980 <_dtoa_r+0x7e8>
 800aa7a:	d099      	beq.n	800a9b0 <_dtoa_r+0x818>
 800aa7c:	9a08      	ldr	r2, [sp, #32]
 800aa7e:	331c      	adds	r3, #28
 800aa80:	441a      	add	r2, r3
 800aa82:	4498      	add	r8, r3
 800aa84:	441e      	add	r6, r3
 800aa86:	9208      	str	r2, [sp, #32]
 800aa88:	e792      	b.n	800a9b0 <_dtoa_r+0x818>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	e7f6      	b.n	800aa7c <_dtoa_r+0x8e4>
 800aa8e:	9b07      	ldr	r3, [sp, #28]
 800aa90:	9704      	str	r7, [sp, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	dc20      	bgt.n	800aad8 <_dtoa_r+0x940>
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	dd1e      	ble.n	800aadc <_dtoa_r+0x944>
 800aa9e:	9b00      	ldr	r3, [sp, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f47f aec0 	bne.w	800a826 <_dtoa_r+0x68e>
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	2205      	movs	r2, #5
 800aaaa:	4658      	mov	r0, fp
 800aaac:	f000 fa9a 	bl	800afe4 <__multadd>
 800aab0:	4601      	mov	r1, r0
 800aab2:	4604      	mov	r4, r0
 800aab4:	4648      	mov	r0, r9
 800aab6:	f000 fcad 	bl	800b414 <__mcmp>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	f77f aeb3 	ble.w	800a826 <_dtoa_r+0x68e>
 800aac0:	4656      	mov	r6, sl
 800aac2:	2331      	movs	r3, #49	@ 0x31
 800aac4:	f806 3b01 	strb.w	r3, [r6], #1
 800aac8:	9b04      	ldr	r3, [sp, #16]
 800aaca:	3301      	adds	r3, #1
 800aacc:	9304      	str	r3, [sp, #16]
 800aace:	e6ae      	b.n	800a82e <_dtoa_r+0x696>
 800aad0:	9c07      	ldr	r4, [sp, #28]
 800aad2:	9704      	str	r7, [sp, #16]
 800aad4:	4625      	mov	r5, r4
 800aad6:	e7f3      	b.n	800aac0 <_dtoa_r+0x928>
 800aad8:	9b07      	ldr	r3, [sp, #28]
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 8104 	beq.w	800acec <_dtoa_r+0xb54>
 800aae4:	2e00      	cmp	r6, #0
 800aae6:	dd05      	ble.n	800aaf4 <_dtoa_r+0x95c>
 800aae8:	4629      	mov	r1, r5
 800aaea:	4632      	mov	r2, r6
 800aaec:	4658      	mov	r0, fp
 800aaee:	f000 fc25 	bl	800b33c <__lshift>
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d05a      	beq.n	800abb0 <_dtoa_r+0xa18>
 800aafa:	6869      	ldr	r1, [r5, #4]
 800aafc:	4658      	mov	r0, fp
 800aafe:	f000 fa0f 	bl	800af20 <_Balloc>
 800ab02:	4606      	mov	r6, r0
 800ab04:	b928      	cbnz	r0, 800ab12 <_dtoa_r+0x97a>
 800ab06:	4b84      	ldr	r3, [pc, #528]	@ (800ad18 <_dtoa_r+0xb80>)
 800ab08:	4602      	mov	r2, r0
 800ab0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ab0e:	f7ff bb5a 	b.w	800a1c6 <_dtoa_r+0x2e>
 800ab12:	692a      	ldr	r2, [r5, #16]
 800ab14:	3202      	adds	r2, #2
 800ab16:	0092      	lsls	r2, r2, #2
 800ab18:	f105 010c 	add.w	r1, r5, #12
 800ab1c:	300c      	adds	r0, #12
 800ab1e:	f7ff faa2 	bl	800a066 <memcpy>
 800ab22:	2201      	movs	r2, #1
 800ab24:	4631      	mov	r1, r6
 800ab26:	4658      	mov	r0, fp
 800ab28:	f000 fc08 	bl	800b33c <__lshift>
 800ab2c:	f10a 0301 	add.w	r3, sl, #1
 800ab30:	9307      	str	r3, [sp, #28]
 800ab32:	9b00      	ldr	r3, [sp, #0]
 800ab34:	4453      	add	r3, sl
 800ab36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab38:	9b02      	ldr	r3, [sp, #8]
 800ab3a:	f003 0301 	and.w	r3, r3, #1
 800ab3e:	462f      	mov	r7, r5
 800ab40:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab42:	4605      	mov	r5, r0
 800ab44:	9b07      	ldr	r3, [sp, #28]
 800ab46:	4621      	mov	r1, r4
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	4648      	mov	r0, r9
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	f7ff fa98 	bl	800a082 <quorem>
 800ab52:	4639      	mov	r1, r7
 800ab54:	9002      	str	r0, [sp, #8]
 800ab56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab5a:	4648      	mov	r0, r9
 800ab5c:	f000 fc5a 	bl	800b414 <__mcmp>
 800ab60:	462a      	mov	r2, r5
 800ab62:	9008      	str	r0, [sp, #32]
 800ab64:	4621      	mov	r1, r4
 800ab66:	4658      	mov	r0, fp
 800ab68:	f000 fc70 	bl	800b44c <__mdiff>
 800ab6c:	68c2      	ldr	r2, [r0, #12]
 800ab6e:	4606      	mov	r6, r0
 800ab70:	bb02      	cbnz	r2, 800abb4 <_dtoa_r+0xa1c>
 800ab72:	4601      	mov	r1, r0
 800ab74:	4648      	mov	r0, r9
 800ab76:	f000 fc4d 	bl	800b414 <__mcmp>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	4631      	mov	r1, r6
 800ab7e:	4658      	mov	r0, fp
 800ab80:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab82:	f000 fa0d 	bl	800afa0 <_Bfree>
 800ab86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab8a:	9e07      	ldr	r6, [sp, #28]
 800ab8c:	ea43 0102 	orr.w	r1, r3, r2
 800ab90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab92:	4319      	orrs	r1, r3
 800ab94:	d110      	bne.n	800abb8 <_dtoa_r+0xa20>
 800ab96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab9a:	d029      	beq.n	800abf0 <_dtoa_r+0xa58>
 800ab9c:	9b08      	ldr	r3, [sp, #32]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	dd02      	ble.n	800aba8 <_dtoa_r+0xa10>
 800aba2:	9b02      	ldr	r3, [sp, #8]
 800aba4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aba8:	9b00      	ldr	r3, [sp, #0]
 800abaa:	f883 8000 	strb.w	r8, [r3]
 800abae:	e63f      	b.n	800a830 <_dtoa_r+0x698>
 800abb0:	4628      	mov	r0, r5
 800abb2:	e7bb      	b.n	800ab2c <_dtoa_r+0x994>
 800abb4:	2201      	movs	r2, #1
 800abb6:	e7e1      	b.n	800ab7c <_dtoa_r+0x9e4>
 800abb8:	9b08      	ldr	r3, [sp, #32]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	db04      	blt.n	800abc8 <_dtoa_r+0xa30>
 800abbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abc0:	430b      	orrs	r3, r1
 800abc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abc4:	430b      	orrs	r3, r1
 800abc6:	d120      	bne.n	800ac0a <_dtoa_r+0xa72>
 800abc8:	2a00      	cmp	r2, #0
 800abca:	dded      	ble.n	800aba8 <_dtoa_r+0xa10>
 800abcc:	4649      	mov	r1, r9
 800abce:	2201      	movs	r2, #1
 800abd0:	4658      	mov	r0, fp
 800abd2:	f000 fbb3 	bl	800b33c <__lshift>
 800abd6:	4621      	mov	r1, r4
 800abd8:	4681      	mov	r9, r0
 800abda:	f000 fc1b 	bl	800b414 <__mcmp>
 800abde:	2800      	cmp	r0, #0
 800abe0:	dc03      	bgt.n	800abea <_dtoa_r+0xa52>
 800abe2:	d1e1      	bne.n	800aba8 <_dtoa_r+0xa10>
 800abe4:	f018 0f01 	tst.w	r8, #1
 800abe8:	d0de      	beq.n	800aba8 <_dtoa_r+0xa10>
 800abea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abee:	d1d8      	bne.n	800aba2 <_dtoa_r+0xa0a>
 800abf0:	9a00      	ldr	r2, [sp, #0]
 800abf2:	2339      	movs	r3, #57	@ 0x39
 800abf4:	7013      	strb	r3, [r2, #0]
 800abf6:	4633      	mov	r3, r6
 800abf8:	461e      	mov	r6, r3
 800abfa:	3b01      	subs	r3, #1
 800abfc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ac00:	2a39      	cmp	r2, #57	@ 0x39
 800ac02:	d052      	beq.n	800acaa <_dtoa_r+0xb12>
 800ac04:	3201      	adds	r2, #1
 800ac06:	701a      	strb	r2, [r3, #0]
 800ac08:	e612      	b.n	800a830 <_dtoa_r+0x698>
 800ac0a:	2a00      	cmp	r2, #0
 800ac0c:	dd07      	ble.n	800ac1e <_dtoa_r+0xa86>
 800ac0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac12:	d0ed      	beq.n	800abf0 <_dtoa_r+0xa58>
 800ac14:	9a00      	ldr	r2, [sp, #0]
 800ac16:	f108 0301 	add.w	r3, r8, #1
 800ac1a:	7013      	strb	r3, [r2, #0]
 800ac1c:	e608      	b.n	800a830 <_dtoa_r+0x698>
 800ac1e:	9b07      	ldr	r3, [sp, #28]
 800ac20:	9a07      	ldr	r2, [sp, #28]
 800ac22:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ac26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d028      	beq.n	800ac7e <_dtoa_r+0xae6>
 800ac2c:	4649      	mov	r1, r9
 800ac2e:	2300      	movs	r3, #0
 800ac30:	220a      	movs	r2, #10
 800ac32:	4658      	mov	r0, fp
 800ac34:	f000 f9d6 	bl	800afe4 <__multadd>
 800ac38:	42af      	cmp	r7, r5
 800ac3a:	4681      	mov	r9, r0
 800ac3c:	f04f 0300 	mov.w	r3, #0
 800ac40:	f04f 020a 	mov.w	r2, #10
 800ac44:	4639      	mov	r1, r7
 800ac46:	4658      	mov	r0, fp
 800ac48:	d107      	bne.n	800ac5a <_dtoa_r+0xac2>
 800ac4a:	f000 f9cb 	bl	800afe4 <__multadd>
 800ac4e:	4607      	mov	r7, r0
 800ac50:	4605      	mov	r5, r0
 800ac52:	9b07      	ldr	r3, [sp, #28]
 800ac54:	3301      	adds	r3, #1
 800ac56:	9307      	str	r3, [sp, #28]
 800ac58:	e774      	b.n	800ab44 <_dtoa_r+0x9ac>
 800ac5a:	f000 f9c3 	bl	800afe4 <__multadd>
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4607      	mov	r7, r0
 800ac62:	2300      	movs	r3, #0
 800ac64:	220a      	movs	r2, #10
 800ac66:	4658      	mov	r0, fp
 800ac68:	f000 f9bc 	bl	800afe4 <__multadd>
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	e7f0      	b.n	800ac52 <_dtoa_r+0xaba>
 800ac70:	9b00      	ldr	r3, [sp, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	bfcc      	ite	gt
 800ac76:	461e      	movgt	r6, r3
 800ac78:	2601      	movle	r6, #1
 800ac7a:	4456      	add	r6, sl
 800ac7c:	2700      	movs	r7, #0
 800ac7e:	4649      	mov	r1, r9
 800ac80:	2201      	movs	r2, #1
 800ac82:	4658      	mov	r0, fp
 800ac84:	f000 fb5a 	bl	800b33c <__lshift>
 800ac88:	4621      	mov	r1, r4
 800ac8a:	4681      	mov	r9, r0
 800ac8c:	f000 fbc2 	bl	800b414 <__mcmp>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	dcb0      	bgt.n	800abf6 <_dtoa_r+0xa5e>
 800ac94:	d102      	bne.n	800ac9c <_dtoa_r+0xb04>
 800ac96:	f018 0f01 	tst.w	r8, #1
 800ac9a:	d1ac      	bne.n	800abf6 <_dtoa_r+0xa5e>
 800ac9c:	4633      	mov	r3, r6
 800ac9e:	461e      	mov	r6, r3
 800aca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aca4:	2a30      	cmp	r2, #48	@ 0x30
 800aca6:	d0fa      	beq.n	800ac9e <_dtoa_r+0xb06>
 800aca8:	e5c2      	b.n	800a830 <_dtoa_r+0x698>
 800acaa:	459a      	cmp	sl, r3
 800acac:	d1a4      	bne.n	800abf8 <_dtoa_r+0xa60>
 800acae:	9b04      	ldr	r3, [sp, #16]
 800acb0:	3301      	adds	r3, #1
 800acb2:	9304      	str	r3, [sp, #16]
 800acb4:	2331      	movs	r3, #49	@ 0x31
 800acb6:	f88a 3000 	strb.w	r3, [sl]
 800acba:	e5b9      	b.n	800a830 <_dtoa_r+0x698>
 800acbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ad1c <_dtoa_r+0xb84>
 800acc2:	b11b      	cbz	r3, 800accc <_dtoa_r+0xb34>
 800acc4:	f10a 0308 	add.w	r3, sl, #8
 800acc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800acca:	6013      	str	r3, [r2, #0]
 800accc:	4650      	mov	r0, sl
 800acce:	b019      	add	sp, #100	@ 0x64
 800acd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	f77f ae37 	ble.w	800a94a <_dtoa_r+0x7b2>
 800acdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acde:	930a      	str	r3, [sp, #40]	@ 0x28
 800ace0:	2001      	movs	r0, #1
 800ace2:	e655      	b.n	800a990 <_dtoa_r+0x7f8>
 800ace4:	9b00      	ldr	r3, [sp, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f77f aed6 	ble.w	800aa98 <_dtoa_r+0x900>
 800acec:	4656      	mov	r6, sl
 800acee:	4621      	mov	r1, r4
 800acf0:	4648      	mov	r0, r9
 800acf2:	f7ff f9c6 	bl	800a082 <quorem>
 800acf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800acfa:	f806 8b01 	strb.w	r8, [r6], #1
 800acfe:	9b00      	ldr	r3, [sp, #0]
 800ad00:	eba6 020a 	sub.w	r2, r6, sl
 800ad04:	4293      	cmp	r3, r2
 800ad06:	ddb3      	ble.n	800ac70 <_dtoa_r+0xad8>
 800ad08:	4649      	mov	r1, r9
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	220a      	movs	r2, #10
 800ad0e:	4658      	mov	r0, fp
 800ad10:	f000 f968 	bl	800afe4 <__multadd>
 800ad14:	4681      	mov	r9, r0
 800ad16:	e7ea      	b.n	800acee <_dtoa_r+0xb56>
 800ad18:	0800c1f4 	.word	0x0800c1f4
 800ad1c:	0800c178 	.word	0x0800c178

0800ad20 <_free_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4605      	mov	r5, r0
 800ad24:	2900      	cmp	r1, #0
 800ad26:	d041      	beq.n	800adac <_free_r+0x8c>
 800ad28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad2c:	1f0c      	subs	r4, r1, #4
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	bfb8      	it	lt
 800ad32:	18e4      	addlt	r4, r4, r3
 800ad34:	f000 f8e8 	bl	800af08 <__malloc_lock>
 800ad38:	4a1d      	ldr	r2, [pc, #116]	@ (800adb0 <_free_r+0x90>)
 800ad3a:	6813      	ldr	r3, [r2, #0]
 800ad3c:	b933      	cbnz	r3, 800ad4c <_free_r+0x2c>
 800ad3e:	6063      	str	r3, [r4, #4]
 800ad40:	6014      	str	r4, [r2, #0]
 800ad42:	4628      	mov	r0, r5
 800ad44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad48:	f000 b8e4 	b.w	800af14 <__malloc_unlock>
 800ad4c:	42a3      	cmp	r3, r4
 800ad4e:	d908      	bls.n	800ad62 <_free_r+0x42>
 800ad50:	6820      	ldr	r0, [r4, #0]
 800ad52:	1821      	adds	r1, r4, r0
 800ad54:	428b      	cmp	r3, r1
 800ad56:	bf01      	itttt	eq
 800ad58:	6819      	ldreq	r1, [r3, #0]
 800ad5a:	685b      	ldreq	r3, [r3, #4]
 800ad5c:	1809      	addeq	r1, r1, r0
 800ad5e:	6021      	streq	r1, [r4, #0]
 800ad60:	e7ed      	b.n	800ad3e <_free_r+0x1e>
 800ad62:	461a      	mov	r2, r3
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	b10b      	cbz	r3, 800ad6c <_free_r+0x4c>
 800ad68:	42a3      	cmp	r3, r4
 800ad6a:	d9fa      	bls.n	800ad62 <_free_r+0x42>
 800ad6c:	6811      	ldr	r1, [r2, #0]
 800ad6e:	1850      	adds	r0, r2, r1
 800ad70:	42a0      	cmp	r0, r4
 800ad72:	d10b      	bne.n	800ad8c <_free_r+0x6c>
 800ad74:	6820      	ldr	r0, [r4, #0]
 800ad76:	4401      	add	r1, r0
 800ad78:	1850      	adds	r0, r2, r1
 800ad7a:	4283      	cmp	r3, r0
 800ad7c:	6011      	str	r1, [r2, #0]
 800ad7e:	d1e0      	bne.n	800ad42 <_free_r+0x22>
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	6053      	str	r3, [r2, #4]
 800ad86:	4408      	add	r0, r1
 800ad88:	6010      	str	r0, [r2, #0]
 800ad8a:	e7da      	b.n	800ad42 <_free_r+0x22>
 800ad8c:	d902      	bls.n	800ad94 <_free_r+0x74>
 800ad8e:	230c      	movs	r3, #12
 800ad90:	602b      	str	r3, [r5, #0]
 800ad92:	e7d6      	b.n	800ad42 <_free_r+0x22>
 800ad94:	6820      	ldr	r0, [r4, #0]
 800ad96:	1821      	adds	r1, r4, r0
 800ad98:	428b      	cmp	r3, r1
 800ad9a:	bf04      	itt	eq
 800ad9c:	6819      	ldreq	r1, [r3, #0]
 800ad9e:	685b      	ldreq	r3, [r3, #4]
 800ada0:	6063      	str	r3, [r4, #4]
 800ada2:	bf04      	itt	eq
 800ada4:	1809      	addeq	r1, r1, r0
 800ada6:	6021      	streq	r1, [r4, #0]
 800ada8:	6054      	str	r4, [r2, #4]
 800adaa:	e7ca      	b.n	800ad42 <_free_r+0x22>
 800adac:	bd38      	pop	{r3, r4, r5, pc}
 800adae:	bf00      	nop
 800adb0:	20002270 	.word	0x20002270

0800adb4 <malloc>:
 800adb4:	4b02      	ldr	r3, [pc, #8]	@ (800adc0 <malloc+0xc>)
 800adb6:	4601      	mov	r1, r0
 800adb8:	6818      	ldr	r0, [r3, #0]
 800adba:	f000 b825 	b.w	800ae08 <_malloc_r>
 800adbe:	bf00      	nop
 800adc0:	2000001c 	.word	0x2000001c

0800adc4 <sbrk_aligned>:
 800adc4:	b570      	push	{r4, r5, r6, lr}
 800adc6:	4e0f      	ldr	r6, [pc, #60]	@ (800ae04 <sbrk_aligned+0x40>)
 800adc8:	460c      	mov	r4, r1
 800adca:	6831      	ldr	r1, [r6, #0]
 800adcc:	4605      	mov	r5, r0
 800adce:	b911      	cbnz	r1, 800add6 <sbrk_aligned+0x12>
 800add0:	f001 f80c 	bl	800bdec <_sbrk_r>
 800add4:	6030      	str	r0, [r6, #0]
 800add6:	4621      	mov	r1, r4
 800add8:	4628      	mov	r0, r5
 800adda:	f001 f807 	bl	800bdec <_sbrk_r>
 800adde:	1c43      	adds	r3, r0, #1
 800ade0:	d103      	bne.n	800adea <sbrk_aligned+0x26>
 800ade2:	f04f 34ff 	mov.w	r4, #4294967295
 800ade6:	4620      	mov	r0, r4
 800ade8:	bd70      	pop	{r4, r5, r6, pc}
 800adea:	1cc4      	adds	r4, r0, #3
 800adec:	f024 0403 	bic.w	r4, r4, #3
 800adf0:	42a0      	cmp	r0, r4
 800adf2:	d0f8      	beq.n	800ade6 <sbrk_aligned+0x22>
 800adf4:	1a21      	subs	r1, r4, r0
 800adf6:	4628      	mov	r0, r5
 800adf8:	f000 fff8 	bl	800bdec <_sbrk_r>
 800adfc:	3001      	adds	r0, #1
 800adfe:	d1f2      	bne.n	800ade6 <sbrk_aligned+0x22>
 800ae00:	e7ef      	b.n	800ade2 <sbrk_aligned+0x1e>
 800ae02:	bf00      	nop
 800ae04:	2000226c 	.word	0x2000226c

0800ae08 <_malloc_r>:
 800ae08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae0c:	1ccd      	adds	r5, r1, #3
 800ae0e:	f025 0503 	bic.w	r5, r5, #3
 800ae12:	3508      	adds	r5, #8
 800ae14:	2d0c      	cmp	r5, #12
 800ae16:	bf38      	it	cc
 800ae18:	250c      	movcc	r5, #12
 800ae1a:	2d00      	cmp	r5, #0
 800ae1c:	4606      	mov	r6, r0
 800ae1e:	db01      	blt.n	800ae24 <_malloc_r+0x1c>
 800ae20:	42a9      	cmp	r1, r5
 800ae22:	d904      	bls.n	800ae2e <_malloc_r+0x26>
 800ae24:	230c      	movs	r3, #12
 800ae26:	6033      	str	r3, [r6, #0]
 800ae28:	2000      	movs	r0, #0
 800ae2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af04 <_malloc_r+0xfc>
 800ae32:	f000 f869 	bl	800af08 <__malloc_lock>
 800ae36:	f8d8 3000 	ldr.w	r3, [r8]
 800ae3a:	461c      	mov	r4, r3
 800ae3c:	bb44      	cbnz	r4, 800ae90 <_malloc_r+0x88>
 800ae3e:	4629      	mov	r1, r5
 800ae40:	4630      	mov	r0, r6
 800ae42:	f7ff ffbf 	bl	800adc4 <sbrk_aligned>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	4604      	mov	r4, r0
 800ae4a:	d158      	bne.n	800aefe <_malloc_r+0xf6>
 800ae4c:	f8d8 4000 	ldr.w	r4, [r8]
 800ae50:	4627      	mov	r7, r4
 800ae52:	2f00      	cmp	r7, #0
 800ae54:	d143      	bne.n	800aede <_malloc_r+0xd6>
 800ae56:	2c00      	cmp	r4, #0
 800ae58:	d04b      	beq.n	800aef2 <_malloc_r+0xea>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	4630      	mov	r0, r6
 800ae60:	eb04 0903 	add.w	r9, r4, r3
 800ae64:	f000 ffc2 	bl	800bdec <_sbrk_r>
 800ae68:	4581      	cmp	r9, r0
 800ae6a:	d142      	bne.n	800aef2 <_malloc_r+0xea>
 800ae6c:	6821      	ldr	r1, [r4, #0]
 800ae6e:	1a6d      	subs	r5, r5, r1
 800ae70:	4629      	mov	r1, r5
 800ae72:	4630      	mov	r0, r6
 800ae74:	f7ff ffa6 	bl	800adc4 <sbrk_aligned>
 800ae78:	3001      	adds	r0, #1
 800ae7a:	d03a      	beq.n	800aef2 <_malloc_r+0xea>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	442b      	add	r3, r5
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	f8d8 3000 	ldr.w	r3, [r8]
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	bb62      	cbnz	r2, 800aee4 <_malloc_r+0xdc>
 800ae8a:	f8c8 7000 	str.w	r7, [r8]
 800ae8e:	e00f      	b.n	800aeb0 <_malloc_r+0xa8>
 800ae90:	6822      	ldr	r2, [r4, #0]
 800ae92:	1b52      	subs	r2, r2, r5
 800ae94:	d420      	bmi.n	800aed8 <_malloc_r+0xd0>
 800ae96:	2a0b      	cmp	r2, #11
 800ae98:	d917      	bls.n	800aeca <_malloc_r+0xc2>
 800ae9a:	1961      	adds	r1, r4, r5
 800ae9c:	42a3      	cmp	r3, r4
 800ae9e:	6025      	str	r5, [r4, #0]
 800aea0:	bf18      	it	ne
 800aea2:	6059      	strne	r1, [r3, #4]
 800aea4:	6863      	ldr	r3, [r4, #4]
 800aea6:	bf08      	it	eq
 800aea8:	f8c8 1000 	streq.w	r1, [r8]
 800aeac:	5162      	str	r2, [r4, r5]
 800aeae:	604b      	str	r3, [r1, #4]
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	f000 f82f 	bl	800af14 <__malloc_unlock>
 800aeb6:	f104 000b 	add.w	r0, r4, #11
 800aeba:	1d23      	adds	r3, r4, #4
 800aebc:	f020 0007 	bic.w	r0, r0, #7
 800aec0:	1ac2      	subs	r2, r0, r3
 800aec2:	bf1c      	itt	ne
 800aec4:	1a1b      	subne	r3, r3, r0
 800aec6:	50a3      	strne	r3, [r4, r2]
 800aec8:	e7af      	b.n	800ae2a <_malloc_r+0x22>
 800aeca:	6862      	ldr	r2, [r4, #4]
 800aecc:	42a3      	cmp	r3, r4
 800aece:	bf0c      	ite	eq
 800aed0:	f8c8 2000 	streq.w	r2, [r8]
 800aed4:	605a      	strne	r2, [r3, #4]
 800aed6:	e7eb      	b.n	800aeb0 <_malloc_r+0xa8>
 800aed8:	4623      	mov	r3, r4
 800aeda:	6864      	ldr	r4, [r4, #4]
 800aedc:	e7ae      	b.n	800ae3c <_malloc_r+0x34>
 800aede:	463c      	mov	r4, r7
 800aee0:	687f      	ldr	r7, [r7, #4]
 800aee2:	e7b6      	b.n	800ae52 <_malloc_r+0x4a>
 800aee4:	461a      	mov	r2, r3
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	42a3      	cmp	r3, r4
 800aeea:	d1fb      	bne.n	800aee4 <_malloc_r+0xdc>
 800aeec:	2300      	movs	r3, #0
 800aeee:	6053      	str	r3, [r2, #4]
 800aef0:	e7de      	b.n	800aeb0 <_malloc_r+0xa8>
 800aef2:	230c      	movs	r3, #12
 800aef4:	6033      	str	r3, [r6, #0]
 800aef6:	4630      	mov	r0, r6
 800aef8:	f000 f80c 	bl	800af14 <__malloc_unlock>
 800aefc:	e794      	b.n	800ae28 <_malloc_r+0x20>
 800aefe:	6005      	str	r5, [r0, #0]
 800af00:	e7d6      	b.n	800aeb0 <_malloc_r+0xa8>
 800af02:	bf00      	nop
 800af04:	20002270 	.word	0x20002270

0800af08 <__malloc_lock>:
 800af08:	4801      	ldr	r0, [pc, #4]	@ (800af10 <__malloc_lock+0x8>)
 800af0a:	f7ff b8aa 	b.w	800a062 <__retarget_lock_acquire_recursive>
 800af0e:	bf00      	nop
 800af10:	20002268 	.word	0x20002268

0800af14 <__malloc_unlock>:
 800af14:	4801      	ldr	r0, [pc, #4]	@ (800af1c <__malloc_unlock+0x8>)
 800af16:	f7ff b8a5 	b.w	800a064 <__retarget_lock_release_recursive>
 800af1a:	bf00      	nop
 800af1c:	20002268 	.word	0x20002268

0800af20 <_Balloc>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	69c6      	ldr	r6, [r0, #28]
 800af24:	4604      	mov	r4, r0
 800af26:	460d      	mov	r5, r1
 800af28:	b976      	cbnz	r6, 800af48 <_Balloc+0x28>
 800af2a:	2010      	movs	r0, #16
 800af2c:	f7ff ff42 	bl	800adb4 <malloc>
 800af30:	4602      	mov	r2, r0
 800af32:	61e0      	str	r0, [r4, #28]
 800af34:	b920      	cbnz	r0, 800af40 <_Balloc+0x20>
 800af36:	4b18      	ldr	r3, [pc, #96]	@ (800af98 <_Balloc+0x78>)
 800af38:	4818      	ldr	r0, [pc, #96]	@ (800af9c <_Balloc+0x7c>)
 800af3a:	216b      	movs	r1, #107	@ 0x6b
 800af3c:	f000 ff66 	bl	800be0c <__assert_func>
 800af40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af44:	6006      	str	r6, [r0, #0]
 800af46:	60c6      	str	r6, [r0, #12]
 800af48:	69e6      	ldr	r6, [r4, #28]
 800af4a:	68f3      	ldr	r3, [r6, #12]
 800af4c:	b183      	cbz	r3, 800af70 <_Balloc+0x50>
 800af4e:	69e3      	ldr	r3, [r4, #28]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af56:	b9b8      	cbnz	r0, 800af88 <_Balloc+0x68>
 800af58:	2101      	movs	r1, #1
 800af5a:	fa01 f605 	lsl.w	r6, r1, r5
 800af5e:	1d72      	adds	r2, r6, #5
 800af60:	0092      	lsls	r2, r2, #2
 800af62:	4620      	mov	r0, r4
 800af64:	f000 ff70 	bl	800be48 <_calloc_r>
 800af68:	b160      	cbz	r0, 800af84 <_Balloc+0x64>
 800af6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af6e:	e00e      	b.n	800af8e <_Balloc+0x6e>
 800af70:	2221      	movs	r2, #33	@ 0x21
 800af72:	2104      	movs	r1, #4
 800af74:	4620      	mov	r0, r4
 800af76:	f000 ff67 	bl	800be48 <_calloc_r>
 800af7a:	69e3      	ldr	r3, [r4, #28]
 800af7c:	60f0      	str	r0, [r6, #12]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1e4      	bne.n	800af4e <_Balloc+0x2e>
 800af84:	2000      	movs	r0, #0
 800af86:	bd70      	pop	{r4, r5, r6, pc}
 800af88:	6802      	ldr	r2, [r0, #0]
 800af8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af8e:	2300      	movs	r3, #0
 800af90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af94:	e7f7      	b.n	800af86 <_Balloc+0x66>
 800af96:	bf00      	nop
 800af98:	0800c185 	.word	0x0800c185
 800af9c:	0800c205 	.word	0x0800c205

0800afa0 <_Bfree>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	69c6      	ldr	r6, [r0, #28]
 800afa4:	4605      	mov	r5, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	b976      	cbnz	r6, 800afc8 <_Bfree+0x28>
 800afaa:	2010      	movs	r0, #16
 800afac:	f7ff ff02 	bl	800adb4 <malloc>
 800afb0:	4602      	mov	r2, r0
 800afb2:	61e8      	str	r0, [r5, #28]
 800afb4:	b920      	cbnz	r0, 800afc0 <_Bfree+0x20>
 800afb6:	4b09      	ldr	r3, [pc, #36]	@ (800afdc <_Bfree+0x3c>)
 800afb8:	4809      	ldr	r0, [pc, #36]	@ (800afe0 <_Bfree+0x40>)
 800afba:	218f      	movs	r1, #143	@ 0x8f
 800afbc:	f000 ff26 	bl	800be0c <__assert_func>
 800afc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afc4:	6006      	str	r6, [r0, #0]
 800afc6:	60c6      	str	r6, [r0, #12]
 800afc8:	b13c      	cbz	r4, 800afda <_Bfree+0x3a>
 800afca:	69eb      	ldr	r3, [r5, #28]
 800afcc:	6862      	ldr	r2, [r4, #4]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afd4:	6021      	str	r1, [r4, #0]
 800afd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afda:	bd70      	pop	{r4, r5, r6, pc}
 800afdc:	0800c185 	.word	0x0800c185
 800afe0:	0800c205 	.word	0x0800c205

0800afe4 <__multadd>:
 800afe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe8:	690d      	ldr	r5, [r1, #16]
 800afea:	4607      	mov	r7, r0
 800afec:	460c      	mov	r4, r1
 800afee:	461e      	mov	r6, r3
 800aff0:	f101 0c14 	add.w	ip, r1, #20
 800aff4:	2000      	movs	r0, #0
 800aff6:	f8dc 3000 	ldr.w	r3, [ip]
 800affa:	b299      	uxth	r1, r3
 800affc:	fb02 6101 	mla	r1, r2, r1, r6
 800b000:	0c1e      	lsrs	r6, r3, #16
 800b002:	0c0b      	lsrs	r3, r1, #16
 800b004:	fb02 3306 	mla	r3, r2, r6, r3
 800b008:	b289      	uxth	r1, r1
 800b00a:	3001      	adds	r0, #1
 800b00c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b010:	4285      	cmp	r5, r0
 800b012:	f84c 1b04 	str.w	r1, [ip], #4
 800b016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b01a:	dcec      	bgt.n	800aff6 <__multadd+0x12>
 800b01c:	b30e      	cbz	r6, 800b062 <__multadd+0x7e>
 800b01e:	68a3      	ldr	r3, [r4, #8]
 800b020:	42ab      	cmp	r3, r5
 800b022:	dc19      	bgt.n	800b058 <__multadd+0x74>
 800b024:	6861      	ldr	r1, [r4, #4]
 800b026:	4638      	mov	r0, r7
 800b028:	3101      	adds	r1, #1
 800b02a:	f7ff ff79 	bl	800af20 <_Balloc>
 800b02e:	4680      	mov	r8, r0
 800b030:	b928      	cbnz	r0, 800b03e <__multadd+0x5a>
 800b032:	4602      	mov	r2, r0
 800b034:	4b0c      	ldr	r3, [pc, #48]	@ (800b068 <__multadd+0x84>)
 800b036:	480d      	ldr	r0, [pc, #52]	@ (800b06c <__multadd+0x88>)
 800b038:	21ba      	movs	r1, #186	@ 0xba
 800b03a:	f000 fee7 	bl	800be0c <__assert_func>
 800b03e:	6922      	ldr	r2, [r4, #16]
 800b040:	3202      	adds	r2, #2
 800b042:	f104 010c 	add.w	r1, r4, #12
 800b046:	0092      	lsls	r2, r2, #2
 800b048:	300c      	adds	r0, #12
 800b04a:	f7ff f80c 	bl	800a066 <memcpy>
 800b04e:	4621      	mov	r1, r4
 800b050:	4638      	mov	r0, r7
 800b052:	f7ff ffa5 	bl	800afa0 <_Bfree>
 800b056:	4644      	mov	r4, r8
 800b058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b05c:	3501      	adds	r5, #1
 800b05e:	615e      	str	r6, [r3, #20]
 800b060:	6125      	str	r5, [r4, #16]
 800b062:	4620      	mov	r0, r4
 800b064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b068:	0800c1f4 	.word	0x0800c1f4
 800b06c:	0800c205 	.word	0x0800c205

0800b070 <__hi0bits>:
 800b070:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b074:	4603      	mov	r3, r0
 800b076:	bf36      	itet	cc
 800b078:	0403      	lslcc	r3, r0, #16
 800b07a:	2000      	movcs	r0, #0
 800b07c:	2010      	movcc	r0, #16
 800b07e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b082:	bf3c      	itt	cc
 800b084:	021b      	lslcc	r3, r3, #8
 800b086:	3008      	addcc	r0, #8
 800b088:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b08c:	bf3c      	itt	cc
 800b08e:	011b      	lslcc	r3, r3, #4
 800b090:	3004      	addcc	r0, #4
 800b092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b096:	bf3c      	itt	cc
 800b098:	009b      	lslcc	r3, r3, #2
 800b09a:	3002      	addcc	r0, #2
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	db05      	blt.n	800b0ac <__hi0bits+0x3c>
 800b0a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b0a4:	f100 0001 	add.w	r0, r0, #1
 800b0a8:	bf08      	it	eq
 800b0aa:	2020      	moveq	r0, #32
 800b0ac:	4770      	bx	lr

0800b0ae <__lo0bits>:
 800b0ae:	6803      	ldr	r3, [r0, #0]
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	f013 0007 	ands.w	r0, r3, #7
 800b0b6:	d00b      	beq.n	800b0d0 <__lo0bits+0x22>
 800b0b8:	07d9      	lsls	r1, r3, #31
 800b0ba:	d421      	bmi.n	800b100 <__lo0bits+0x52>
 800b0bc:	0798      	lsls	r0, r3, #30
 800b0be:	bf49      	itett	mi
 800b0c0:	085b      	lsrmi	r3, r3, #1
 800b0c2:	089b      	lsrpl	r3, r3, #2
 800b0c4:	2001      	movmi	r0, #1
 800b0c6:	6013      	strmi	r3, [r2, #0]
 800b0c8:	bf5c      	itt	pl
 800b0ca:	6013      	strpl	r3, [r2, #0]
 800b0cc:	2002      	movpl	r0, #2
 800b0ce:	4770      	bx	lr
 800b0d0:	b299      	uxth	r1, r3
 800b0d2:	b909      	cbnz	r1, 800b0d8 <__lo0bits+0x2a>
 800b0d4:	0c1b      	lsrs	r3, r3, #16
 800b0d6:	2010      	movs	r0, #16
 800b0d8:	b2d9      	uxtb	r1, r3
 800b0da:	b909      	cbnz	r1, 800b0e0 <__lo0bits+0x32>
 800b0dc:	3008      	adds	r0, #8
 800b0de:	0a1b      	lsrs	r3, r3, #8
 800b0e0:	0719      	lsls	r1, r3, #28
 800b0e2:	bf04      	itt	eq
 800b0e4:	091b      	lsreq	r3, r3, #4
 800b0e6:	3004      	addeq	r0, #4
 800b0e8:	0799      	lsls	r1, r3, #30
 800b0ea:	bf04      	itt	eq
 800b0ec:	089b      	lsreq	r3, r3, #2
 800b0ee:	3002      	addeq	r0, #2
 800b0f0:	07d9      	lsls	r1, r3, #31
 800b0f2:	d403      	bmi.n	800b0fc <__lo0bits+0x4e>
 800b0f4:	085b      	lsrs	r3, r3, #1
 800b0f6:	f100 0001 	add.w	r0, r0, #1
 800b0fa:	d003      	beq.n	800b104 <__lo0bits+0x56>
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	4770      	bx	lr
 800b100:	2000      	movs	r0, #0
 800b102:	4770      	bx	lr
 800b104:	2020      	movs	r0, #32
 800b106:	4770      	bx	lr

0800b108 <__i2b>:
 800b108:	b510      	push	{r4, lr}
 800b10a:	460c      	mov	r4, r1
 800b10c:	2101      	movs	r1, #1
 800b10e:	f7ff ff07 	bl	800af20 <_Balloc>
 800b112:	4602      	mov	r2, r0
 800b114:	b928      	cbnz	r0, 800b122 <__i2b+0x1a>
 800b116:	4b05      	ldr	r3, [pc, #20]	@ (800b12c <__i2b+0x24>)
 800b118:	4805      	ldr	r0, [pc, #20]	@ (800b130 <__i2b+0x28>)
 800b11a:	f240 1145 	movw	r1, #325	@ 0x145
 800b11e:	f000 fe75 	bl	800be0c <__assert_func>
 800b122:	2301      	movs	r3, #1
 800b124:	6144      	str	r4, [r0, #20]
 800b126:	6103      	str	r3, [r0, #16]
 800b128:	bd10      	pop	{r4, pc}
 800b12a:	bf00      	nop
 800b12c:	0800c1f4 	.word	0x0800c1f4
 800b130:	0800c205 	.word	0x0800c205

0800b134 <__multiply>:
 800b134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b138:	4614      	mov	r4, r2
 800b13a:	690a      	ldr	r2, [r1, #16]
 800b13c:	6923      	ldr	r3, [r4, #16]
 800b13e:	429a      	cmp	r2, r3
 800b140:	bfa8      	it	ge
 800b142:	4623      	movge	r3, r4
 800b144:	460f      	mov	r7, r1
 800b146:	bfa4      	itt	ge
 800b148:	460c      	movge	r4, r1
 800b14a:	461f      	movge	r7, r3
 800b14c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b150:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b154:	68a3      	ldr	r3, [r4, #8]
 800b156:	6861      	ldr	r1, [r4, #4]
 800b158:	eb0a 0609 	add.w	r6, sl, r9
 800b15c:	42b3      	cmp	r3, r6
 800b15e:	b085      	sub	sp, #20
 800b160:	bfb8      	it	lt
 800b162:	3101      	addlt	r1, #1
 800b164:	f7ff fedc 	bl	800af20 <_Balloc>
 800b168:	b930      	cbnz	r0, 800b178 <__multiply+0x44>
 800b16a:	4602      	mov	r2, r0
 800b16c:	4b44      	ldr	r3, [pc, #272]	@ (800b280 <__multiply+0x14c>)
 800b16e:	4845      	ldr	r0, [pc, #276]	@ (800b284 <__multiply+0x150>)
 800b170:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b174:	f000 fe4a 	bl	800be0c <__assert_func>
 800b178:	f100 0514 	add.w	r5, r0, #20
 800b17c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b180:	462b      	mov	r3, r5
 800b182:	2200      	movs	r2, #0
 800b184:	4543      	cmp	r3, r8
 800b186:	d321      	bcc.n	800b1cc <__multiply+0x98>
 800b188:	f107 0114 	add.w	r1, r7, #20
 800b18c:	f104 0214 	add.w	r2, r4, #20
 800b190:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b194:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b198:	9302      	str	r3, [sp, #8]
 800b19a:	1b13      	subs	r3, r2, r4
 800b19c:	3b15      	subs	r3, #21
 800b19e:	f023 0303 	bic.w	r3, r3, #3
 800b1a2:	3304      	adds	r3, #4
 800b1a4:	f104 0715 	add.w	r7, r4, #21
 800b1a8:	42ba      	cmp	r2, r7
 800b1aa:	bf38      	it	cc
 800b1ac:	2304      	movcc	r3, #4
 800b1ae:	9301      	str	r3, [sp, #4]
 800b1b0:	9b02      	ldr	r3, [sp, #8]
 800b1b2:	9103      	str	r1, [sp, #12]
 800b1b4:	428b      	cmp	r3, r1
 800b1b6:	d80c      	bhi.n	800b1d2 <__multiply+0x9e>
 800b1b8:	2e00      	cmp	r6, #0
 800b1ba:	dd03      	ble.n	800b1c4 <__multiply+0x90>
 800b1bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d05b      	beq.n	800b27c <__multiply+0x148>
 800b1c4:	6106      	str	r6, [r0, #16]
 800b1c6:	b005      	add	sp, #20
 800b1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1cc:	f843 2b04 	str.w	r2, [r3], #4
 800b1d0:	e7d8      	b.n	800b184 <__multiply+0x50>
 800b1d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800b1d6:	f1ba 0f00 	cmp.w	sl, #0
 800b1da:	d024      	beq.n	800b226 <__multiply+0xf2>
 800b1dc:	f104 0e14 	add.w	lr, r4, #20
 800b1e0:	46a9      	mov	r9, r5
 800b1e2:	f04f 0c00 	mov.w	ip, #0
 800b1e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1ea:	f8d9 3000 	ldr.w	r3, [r9]
 800b1ee:	fa1f fb87 	uxth.w	fp, r7
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b1f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b1fc:	f8d9 7000 	ldr.w	r7, [r9]
 800b200:	4463      	add	r3, ip
 800b202:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b206:	fb0a c70b 	mla	r7, sl, fp, ip
 800b20a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b20e:	b29b      	uxth	r3, r3
 800b210:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b214:	4572      	cmp	r2, lr
 800b216:	f849 3b04 	str.w	r3, [r9], #4
 800b21a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b21e:	d8e2      	bhi.n	800b1e6 <__multiply+0xb2>
 800b220:	9b01      	ldr	r3, [sp, #4]
 800b222:	f845 c003 	str.w	ip, [r5, r3]
 800b226:	9b03      	ldr	r3, [sp, #12]
 800b228:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b22c:	3104      	adds	r1, #4
 800b22e:	f1b9 0f00 	cmp.w	r9, #0
 800b232:	d021      	beq.n	800b278 <__multiply+0x144>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	f104 0c14 	add.w	ip, r4, #20
 800b23a:	46ae      	mov	lr, r5
 800b23c:	f04f 0a00 	mov.w	sl, #0
 800b240:	f8bc b000 	ldrh.w	fp, [ip]
 800b244:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b248:	fb09 770b 	mla	r7, r9, fp, r7
 800b24c:	4457      	add	r7, sl
 800b24e:	b29b      	uxth	r3, r3
 800b250:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b254:	f84e 3b04 	str.w	r3, [lr], #4
 800b258:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b25c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b260:	f8be 3000 	ldrh.w	r3, [lr]
 800b264:	fb09 330a 	mla	r3, r9, sl, r3
 800b268:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b26c:	4562      	cmp	r2, ip
 800b26e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b272:	d8e5      	bhi.n	800b240 <__multiply+0x10c>
 800b274:	9f01      	ldr	r7, [sp, #4]
 800b276:	51eb      	str	r3, [r5, r7]
 800b278:	3504      	adds	r5, #4
 800b27a:	e799      	b.n	800b1b0 <__multiply+0x7c>
 800b27c:	3e01      	subs	r6, #1
 800b27e:	e79b      	b.n	800b1b8 <__multiply+0x84>
 800b280:	0800c1f4 	.word	0x0800c1f4
 800b284:	0800c205 	.word	0x0800c205

0800b288 <__pow5mult>:
 800b288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b28c:	4615      	mov	r5, r2
 800b28e:	f012 0203 	ands.w	r2, r2, #3
 800b292:	4607      	mov	r7, r0
 800b294:	460e      	mov	r6, r1
 800b296:	d007      	beq.n	800b2a8 <__pow5mult+0x20>
 800b298:	4c25      	ldr	r4, [pc, #148]	@ (800b330 <__pow5mult+0xa8>)
 800b29a:	3a01      	subs	r2, #1
 800b29c:	2300      	movs	r3, #0
 800b29e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2a2:	f7ff fe9f 	bl	800afe4 <__multadd>
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	10ad      	asrs	r5, r5, #2
 800b2aa:	d03d      	beq.n	800b328 <__pow5mult+0xa0>
 800b2ac:	69fc      	ldr	r4, [r7, #28]
 800b2ae:	b97c      	cbnz	r4, 800b2d0 <__pow5mult+0x48>
 800b2b0:	2010      	movs	r0, #16
 800b2b2:	f7ff fd7f 	bl	800adb4 <malloc>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	61f8      	str	r0, [r7, #28]
 800b2ba:	b928      	cbnz	r0, 800b2c8 <__pow5mult+0x40>
 800b2bc:	4b1d      	ldr	r3, [pc, #116]	@ (800b334 <__pow5mult+0xac>)
 800b2be:	481e      	ldr	r0, [pc, #120]	@ (800b338 <__pow5mult+0xb0>)
 800b2c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b2c4:	f000 fda2 	bl	800be0c <__assert_func>
 800b2c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2cc:	6004      	str	r4, [r0, #0]
 800b2ce:	60c4      	str	r4, [r0, #12]
 800b2d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b2d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2d8:	b94c      	cbnz	r4, 800b2ee <__pow5mult+0x66>
 800b2da:	f240 2171 	movw	r1, #625	@ 0x271
 800b2de:	4638      	mov	r0, r7
 800b2e0:	f7ff ff12 	bl	800b108 <__i2b>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	6003      	str	r3, [r0, #0]
 800b2ee:	f04f 0900 	mov.w	r9, #0
 800b2f2:	07eb      	lsls	r3, r5, #31
 800b2f4:	d50a      	bpl.n	800b30c <__pow5mult+0x84>
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	f7ff ff1a 	bl	800b134 <__multiply>
 800b300:	4631      	mov	r1, r6
 800b302:	4680      	mov	r8, r0
 800b304:	4638      	mov	r0, r7
 800b306:	f7ff fe4b 	bl	800afa0 <_Bfree>
 800b30a:	4646      	mov	r6, r8
 800b30c:	106d      	asrs	r5, r5, #1
 800b30e:	d00b      	beq.n	800b328 <__pow5mult+0xa0>
 800b310:	6820      	ldr	r0, [r4, #0]
 800b312:	b938      	cbnz	r0, 800b324 <__pow5mult+0x9c>
 800b314:	4622      	mov	r2, r4
 800b316:	4621      	mov	r1, r4
 800b318:	4638      	mov	r0, r7
 800b31a:	f7ff ff0b 	bl	800b134 <__multiply>
 800b31e:	6020      	str	r0, [r4, #0]
 800b320:	f8c0 9000 	str.w	r9, [r0]
 800b324:	4604      	mov	r4, r0
 800b326:	e7e4      	b.n	800b2f2 <__pow5mult+0x6a>
 800b328:	4630      	mov	r0, r6
 800b32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b32e:	bf00      	nop
 800b330:	0800c260 	.word	0x0800c260
 800b334:	0800c185 	.word	0x0800c185
 800b338:	0800c205 	.word	0x0800c205

0800b33c <__lshift>:
 800b33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b340:	460c      	mov	r4, r1
 800b342:	6849      	ldr	r1, [r1, #4]
 800b344:	6923      	ldr	r3, [r4, #16]
 800b346:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	4607      	mov	r7, r0
 800b34e:	4691      	mov	r9, r2
 800b350:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b354:	f108 0601 	add.w	r6, r8, #1
 800b358:	42b3      	cmp	r3, r6
 800b35a:	db0b      	blt.n	800b374 <__lshift+0x38>
 800b35c:	4638      	mov	r0, r7
 800b35e:	f7ff fddf 	bl	800af20 <_Balloc>
 800b362:	4605      	mov	r5, r0
 800b364:	b948      	cbnz	r0, 800b37a <__lshift+0x3e>
 800b366:	4602      	mov	r2, r0
 800b368:	4b28      	ldr	r3, [pc, #160]	@ (800b40c <__lshift+0xd0>)
 800b36a:	4829      	ldr	r0, [pc, #164]	@ (800b410 <__lshift+0xd4>)
 800b36c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b370:	f000 fd4c 	bl	800be0c <__assert_func>
 800b374:	3101      	adds	r1, #1
 800b376:	005b      	lsls	r3, r3, #1
 800b378:	e7ee      	b.n	800b358 <__lshift+0x1c>
 800b37a:	2300      	movs	r3, #0
 800b37c:	f100 0114 	add.w	r1, r0, #20
 800b380:	f100 0210 	add.w	r2, r0, #16
 800b384:	4618      	mov	r0, r3
 800b386:	4553      	cmp	r3, sl
 800b388:	db33      	blt.n	800b3f2 <__lshift+0xb6>
 800b38a:	6920      	ldr	r0, [r4, #16]
 800b38c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b390:	f104 0314 	add.w	r3, r4, #20
 800b394:	f019 091f 	ands.w	r9, r9, #31
 800b398:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b39c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3a0:	d02b      	beq.n	800b3fa <__lshift+0xbe>
 800b3a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b3a6:	468a      	mov	sl, r1
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	fa00 f009 	lsl.w	r0, r0, r9
 800b3b0:	4310      	orrs	r0, r2
 800b3b2:	f84a 0b04 	str.w	r0, [sl], #4
 800b3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ba:	459c      	cmp	ip, r3
 800b3bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3c0:	d8f3      	bhi.n	800b3aa <__lshift+0x6e>
 800b3c2:	ebac 0304 	sub.w	r3, ip, r4
 800b3c6:	3b15      	subs	r3, #21
 800b3c8:	f023 0303 	bic.w	r3, r3, #3
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	f104 0015 	add.w	r0, r4, #21
 800b3d2:	4584      	cmp	ip, r0
 800b3d4:	bf38      	it	cc
 800b3d6:	2304      	movcc	r3, #4
 800b3d8:	50ca      	str	r2, [r1, r3]
 800b3da:	b10a      	cbz	r2, 800b3e0 <__lshift+0xa4>
 800b3dc:	f108 0602 	add.w	r6, r8, #2
 800b3e0:	3e01      	subs	r6, #1
 800b3e2:	4638      	mov	r0, r7
 800b3e4:	612e      	str	r6, [r5, #16]
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	f7ff fdda 	bl	800afa0 <_Bfree>
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	e7c5      	b.n	800b386 <__lshift+0x4a>
 800b3fa:	3904      	subs	r1, #4
 800b3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b400:	f841 2f04 	str.w	r2, [r1, #4]!
 800b404:	459c      	cmp	ip, r3
 800b406:	d8f9      	bhi.n	800b3fc <__lshift+0xc0>
 800b408:	e7ea      	b.n	800b3e0 <__lshift+0xa4>
 800b40a:	bf00      	nop
 800b40c:	0800c1f4 	.word	0x0800c1f4
 800b410:	0800c205 	.word	0x0800c205

0800b414 <__mcmp>:
 800b414:	690a      	ldr	r2, [r1, #16]
 800b416:	4603      	mov	r3, r0
 800b418:	6900      	ldr	r0, [r0, #16]
 800b41a:	1a80      	subs	r0, r0, r2
 800b41c:	b530      	push	{r4, r5, lr}
 800b41e:	d10e      	bne.n	800b43e <__mcmp+0x2a>
 800b420:	3314      	adds	r3, #20
 800b422:	3114      	adds	r1, #20
 800b424:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b428:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b42c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b430:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b434:	4295      	cmp	r5, r2
 800b436:	d003      	beq.n	800b440 <__mcmp+0x2c>
 800b438:	d205      	bcs.n	800b446 <__mcmp+0x32>
 800b43a:	f04f 30ff 	mov.w	r0, #4294967295
 800b43e:	bd30      	pop	{r4, r5, pc}
 800b440:	42a3      	cmp	r3, r4
 800b442:	d3f3      	bcc.n	800b42c <__mcmp+0x18>
 800b444:	e7fb      	b.n	800b43e <__mcmp+0x2a>
 800b446:	2001      	movs	r0, #1
 800b448:	e7f9      	b.n	800b43e <__mcmp+0x2a>
	...

0800b44c <__mdiff>:
 800b44c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b450:	4689      	mov	r9, r1
 800b452:	4606      	mov	r6, r0
 800b454:	4611      	mov	r1, r2
 800b456:	4648      	mov	r0, r9
 800b458:	4614      	mov	r4, r2
 800b45a:	f7ff ffdb 	bl	800b414 <__mcmp>
 800b45e:	1e05      	subs	r5, r0, #0
 800b460:	d112      	bne.n	800b488 <__mdiff+0x3c>
 800b462:	4629      	mov	r1, r5
 800b464:	4630      	mov	r0, r6
 800b466:	f7ff fd5b 	bl	800af20 <_Balloc>
 800b46a:	4602      	mov	r2, r0
 800b46c:	b928      	cbnz	r0, 800b47a <__mdiff+0x2e>
 800b46e:	4b3f      	ldr	r3, [pc, #252]	@ (800b56c <__mdiff+0x120>)
 800b470:	f240 2137 	movw	r1, #567	@ 0x237
 800b474:	483e      	ldr	r0, [pc, #248]	@ (800b570 <__mdiff+0x124>)
 800b476:	f000 fcc9 	bl	800be0c <__assert_func>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b480:	4610      	mov	r0, r2
 800b482:	b003      	add	sp, #12
 800b484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b488:	bfbc      	itt	lt
 800b48a:	464b      	movlt	r3, r9
 800b48c:	46a1      	movlt	r9, r4
 800b48e:	4630      	mov	r0, r6
 800b490:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b494:	bfba      	itte	lt
 800b496:	461c      	movlt	r4, r3
 800b498:	2501      	movlt	r5, #1
 800b49a:	2500      	movge	r5, #0
 800b49c:	f7ff fd40 	bl	800af20 <_Balloc>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	b918      	cbnz	r0, 800b4ac <__mdiff+0x60>
 800b4a4:	4b31      	ldr	r3, [pc, #196]	@ (800b56c <__mdiff+0x120>)
 800b4a6:	f240 2145 	movw	r1, #581	@ 0x245
 800b4aa:	e7e3      	b.n	800b474 <__mdiff+0x28>
 800b4ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b4b0:	6926      	ldr	r6, [r4, #16]
 800b4b2:	60c5      	str	r5, [r0, #12]
 800b4b4:	f109 0310 	add.w	r3, r9, #16
 800b4b8:	f109 0514 	add.w	r5, r9, #20
 800b4bc:	f104 0e14 	add.w	lr, r4, #20
 800b4c0:	f100 0b14 	add.w	fp, r0, #20
 800b4c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b4c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b4cc:	9301      	str	r3, [sp, #4]
 800b4ce:	46d9      	mov	r9, fp
 800b4d0:	f04f 0c00 	mov.w	ip, #0
 800b4d4:	9b01      	ldr	r3, [sp, #4]
 800b4d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b4da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	fa1f f38a 	uxth.w	r3, sl
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	b283      	uxth	r3, r0
 800b4e8:	1acb      	subs	r3, r1, r3
 800b4ea:	0c00      	lsrs	r0, r0, #16
 800b4ec:	4463      	add	r3, ip
 800b4ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b4f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b4fc:	4576      	cmp	r6, lr
 800b4fe:	f849 3b04 	str.w	r3, [r9], #4
 800b502:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b506:	d8e5      	bhi.n	800b4d4 <__mdiff+0x88>
 800b508:	1b33      	subs	r3, r6, r4
 800b50a:	3b15      	subs	r3, #21
 800b50c:	f023 0303 	bic.w	r3, r3, #3
 800b510:	3415      	adds	r4, #21
 800b512:	3304      	adds	r3, #4
 800b514:	42a6      	cmp	r6, r4
 800b516:	bf38      	it	cc
 800b518:	2304      	movcc	r3, #4
 800b51a:	441d      	add	r5, r3
 800b51c:	445b      	add	r3, fp
 800b51e:	461e      	mov	r6, r3
 800b520:	462c      	mov	r4, r5
 800b522:	4544      	cmp	r4, r8
 800b524:	d30e      	bcc.n	800b544 <__mdiff+0xf8>
 800b526:	f108 0103 	add.w	r1, r8, #3
 800b52a:	1b49      	subs	r1, r1, r5
 800b52c:	f021 0103 	bic.w	r1, r1, #3
 800b530:	3d03      	subs	r5, #3
 800b532:	45a8      	cmp	r8, r5
 800b534:	bf38      	it	cc
 800b536:	2100      	movcc	r1, #0
 800b538:	440b      	add	r3, r1
 800b53a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b53e:	b191      	cbz	r1, 800b566 <__mdiff+0x11a>
 800b540:	6117      	str	r7, [r2, #16]
 800b542:	e79d      	b.n	800b480 <__mdiff+0x34>
 800b544:	f854 1b04 	ldr.w	r1, [r4], #4
 800b548:	46e6      	mov	lr, ip
 800b54a:	0c08      	lsrs	r0, r1, #16
 800b54c:	fa1c fc81 	uxtah	ip, ip, r1
 800b550:	4471      	add	r1, lr
 800b552:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b556:	b289      	uxth	r1, r1
 800b558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b55c:	f846 1b04 	str.w	r1, [r6], #4
 800b560:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b564:	e7dd      	b.n	800b522 <__mdiff+0xd6>
 800b566:	3f01      	subs	r7, #1
 800b568:	e7e7      	b.n	800b53a <__mdiff+0xee>
 800b56a:	bf00      	nop
 800b56c:	0800c1f4 	.word	0x0800c1f4
 800b570:	0800c205 	.word	0x0800c205

0800b574 <__d2b>:
 800b574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b578:	460f      	mov	r7, r1
 800b57a:	2101      	movs	r1, #1
 800b57c:	ec59 8b10 	vmov	r8, r9, d0
 800b580:	4616      	mov	r6, r2
 800b582:	f7ff fccd 	bl	800af20 <_Balloc>
 800b586:	4604      	mov	r4, r0
 800b588:	b930      	cbnz	r0, 800b598 <__d2b+0x24>
 800b58a:	4602      	mov	r2, r0
 800b58c:	4b23      	ldr	r3, [pc, #140]	@ (800b61c <__d2b+0xa8>)
 800b58e:	4824      	ldr	r0, [pc, #144]	@ (800b620 <__d2b+0xac>)
 800b590:	f240 310f 	movw	r1, #783	@ 0x30f
 800b594:	f000 fc3a 	bl	800be0c <__assert_func>
 800b598:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b59c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5a0:	b10d      	cbz	r5, 800b5a6 <__d2b+0x32>
 800b5a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5a6:	9301      	str	r3, [sp, #4]
 800b5a8:	f1b8 0300 	subs.w	r3, r8, #0
 800b5ac:	d023      	beq.n	800b5f6 <__d2b+0x82>
 800b5ae:	4668      	mov	r0, sp
 800b5b0:	9300      	str	r3, [sp, #0]
 800b5b2:	f7ff fd7c 	bl	800b0ae <__lo0bits>
 800b5b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5ba:	b1d0      	cbz	r0, 800b5f2 <__d2b+0x7e>
 800b5bc:	f1c0 0320 	rsb	r3, r0, #32
 800b5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c4:	430b      	orrs	r3, r1
 800b5c6:	40c2      	lsrs	r2, r0
 800b5c8:	6163      	str	r3, [r4, #20]
 800b5ca:	9201      	str	r2, [sp, #4]
 800b5cc:	9b01      	ldr	r3, [sp, #4]
 800b5ce:	61a3      	str	r3, [r4, #24]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	bf0c      	ite	eq
 800b5d4:	2201      	moveq	r2, #1
 800b5d6:	2202      	movne	r2, #2
 800b5d8:	6122      	str	r2, [r4, #16]
 800b5da:	b1a5      	cbz	r5, 800b606 <__d2b+0x92>
 800b5dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b5e0:	4405      	add	r5, r0
 800b5e2:	603d      	str	r5, [r7, #0]
 800b5e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b5e8:	6030      	str	r0, [r6, #0]
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	b003      	add	sp, #12
 800b5ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5f2:	6161      	str	r1, [r4, #20]
 800b5f4:	e7ea      	b.n	800b5cc <__d2b+0x58>
 800b5f6:	a801      	add	r0, sp, #4
 800b5f8:	f7ff fd59 	bl	800b0ae <__lo0bits>
 800b5fc:	9b01      	ldr	r3, [sp, #4]
 800b5fe:	6163      	str	r3, [r4, #20]
 800b600:	3020      	adds	r0, #32
 800b602:	2201      	movs	r2, #1
 800b604:	e7e8      	b.n	800b5d8 <__d2b+0x64>
 800b606:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b60a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b60e:	6038      	str	r0, [r7, #0]
 800b610:	6918      	ldr	r0, [r3, #16]
 800b612:	f7ff fd2d 	bl	800b070 <__hi0bits>
 800b616:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b61a:	e7e5      	b.n	800b5e8 <__d2b+0x74>
 800b61c:	0800c1f4 	.word	0x0800c1f4
 800b620:	0800c205 	.word	0x0800c205

0800b624 <__ssputs_r>:
 800b624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b628:	688e      	ldr	r6, [r1, #8]
 800b62a:	461f      	mov	r7, r3
 800b62c:	42be      	cmp	r6, r7
 800b62e:	680b      	ldr	r3, [r1, #0]
 800b630:	4682      	mov	sl, r0
 800b632:	460c      	mov	r4, r1
 800b634:	4690      	mov	r8, r2
 800b636:	d82d      	bhi.n	800b694 <__ssputs_r+0x70>
 800b638:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b63c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b640:	d026      	beq.n	800b690 <__ssputs_r+0x6c>
 800b642:	6965      	ldr	r5, [r4, #20]
 800b644:	6909      	ldr	r1, [r1, #16]
 800b646:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b64a:	eba3 0901 	sub.w	r9, r3, r1
 800b64e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b652:	1c7b      	adds	r3, r7, #1
 800b654:	444b      	add	r3, r9
 800b656:	106d      	asrs	r5, r5, #1
 800b658:	429d      	cmp	r5, r3
 800b65a:	bf38      	it	cc
 800b65c:	461d      	movcc	r5, r3
 800b65e:	0553      	lsls	r3, r2, #21
 800b660:	d527      	bpl.n	800b6b2 <__ssputs_r+0x8e>
 800b662:	4629      	mov	r1, r5
 800b664:	f7ff fbd0 	bl	800ae08 <_malloc_r>
 800b668:	4606      	mov	r6, r0
 800b66a:	b360      	cbz	r0, 800b6c6 <__ssputs_r+0xa2>
 800b66c:	6921      	ldr	r1, [r4, #16]
 800b66e:	464a      	mov	r2, r9
 800b670:	f7fe fcf9 	bl	800a066 <memcpy>
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b67a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b67e:	81a3      	strh	r3, [r4, #12]
 800b680:	6126      	str	r6, [r4, #16]
 800b682:	6165      	str	r5, [r4, #20]
 800b684:	444e      	add	r6, r9
 800b686:	eba5 0509 	sub.w	r5, r5, r9
 800b68a:	6026      	str	r6, [r4, #0]
 800b68c:	60a5      	str	r5, [r4, #8]
 800b68e:	463e      	mov	r6, r7
 800b690:	42be      	cmp	r6, r7
 800b692:	d900      	bls.n	800b696 <__ssputs_r+0x72>
 800b694:	463e      	mov	r6, r7
 800b696:	6820      	ldr	r0, [r4, #0]
 800b698:	4632      	mov	r2, r6
 800b69a:	4641      	mov	r1, r8
 800b69c:	f000 fb6a 	bl	800bd74 <memmove>
 800b6a0:	68a3      	ldr	r3, [r4, #8]
 800b6a2:	1b9b      	subs	r3, r3, r6
 800b6a4:	60a3      	str	r3, [r4, #8]
 800b6a6:	6823      	ldr	r3, [r4, #0]
 800b6a8:	4433      	add	r3, r6
 800b6aa:	6023      	str	r3, [r4, #0]
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b2:	462a      	mov	r2, r5
 800b6b4:	f000 fbee 	bl	800be94 <_realloc_r>
 800b6b8:	4606      	mov	r6, r0
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d1e0      	bne.n	800b680 <__ssputs_r+0x5c>
 800b6be:	6921      	ldr	r1, [r4, #16]
 800b6c0:	4650      	mov	r0, sl
 800b6c2:	f7ff fb2d 	bl	800ad20 <_free_r>
 800b6c6:	230c      	movs	r3, #12
 800b6c8:	f8ca 3000 	str.w	r3, [sl]
 800b6cc:	89a3      	ldrh	r3, [r4, #12]
 800b6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6d2:	81a3      	strh	r3, [r4, #12]
 800b6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d8:	e7e9      	b.n	800b6ae <__ssputs_r+0x8a>
	...

0800b6dc <_svfiprintf_r>:
 800b6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	4698      	mov	r8, r3
 800b6e2:	898b      	ldrh	r3, [r1, #12]
 800b6e4:	061b      	lsls	r3, r3, #24
 800b6e6:	b09d      	sub	sp, #116	@ 0x74
 800b6e8:	4607      	mov	r7, r0
 800b6ea:	460d      	mov	r5, r1
 800b6ec:	4614      	mov	r4, r2
 800b6ee:	d510      	bpl.n	800b712 <_svfiprintf_r+0x36>
 800b6f0:	690b      	ldr	r3, [r1, #16]
 800b6f2:	b973      	cbnz	r3, 800b712 <_svfiprintf_r+0x36>
 800b6f4:	2140      	movs	r1, #64	@ 0x40
 800b6f6:	f7ff fb87 	bl	800ae08 <_malloc_r>
 800b6fa:	6028      	str	r0, [r5, #0]
 800b6fc:	6128      	str	r0, [r5, #16]
 800b6fe:	b930      	cbnz	r0, 800b70e <_svfiprintf_r+0x32>
 800b700:	230c      	movs	r3, #12
 800b702:	603b      	str	r3, [r7, #0]
 800b704:	f04f 30ff 	mov.w	r0, #4294967295
 800b708:	b01d      	add	sp, #116	@ 0x74
 800b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70e:	2340      	movs	r3, #64	@ 0x40
 800b710:	616b      	str	r3, [r5, #20]
 800b712:	2300      	movs	r3, #0
 800b714:	9309      	str	r3, [sp, #36]	@ 0x24
 800b716:	2320      	movs	r3, #32
 800b718:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b71c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b720:	2330      	movs	r3, #48	@ 0x30
 800b722:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b8c0 <_svfiprintf_r+0x1e4>
 800b726:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b72a:	f04f 0901 	mov.w	r9, #1
 800b72e:	4623      	mov	r3, r4
 800b730:	469a      	mov	sl, r3
 800b732:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b736:	b10a      	cbz	r2, 800b73c <_svfiprintf_r+0x60>
 800b738:	2a25      	cmp	r2, #37	@ 0x25
 800b73a:	d1f9      	bne.n	800b730 <_svfiprintf_r+0x54>
 800b73c:	ebba 0b04 	subs.w	fp, sl, r4
 800b740:	d00b      	beq.n	800b75a <_svfiprintf_r+0x7e>
 800b742:	465b      	mov	r3, fp
 800b744:	4622      	mov	r2, r4
 800b746:	4629      	mov	r1, r5
 800b748:	4638      	mov	r0, r7
 800b74a:	f7ff ff6b 	bl	800b624 <__ssputs_r>
 800b74e:	3001      	adds	r0, #1
 800b750:	f000 80a7 	beq.w	800b8a2 <_svfiprintf_r+0x1c6>
 800b754:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b756:	445a      	add	r2, fp
 800b758:	9209      	str	r2, [sp, #36]	@ 0x24
 800b75a:	f89a 3000 	ldrb.w	r3, [sl]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f000 809f 	beq.w	800b8a2 <_svfiprintf_r+0x1c6>
 800b764:	2300      	movs	r3, #0
 800b766:	f04f 32ff 	mov.w	r2, #4294967295
 800b76a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b76e:	f10a 0a01 	add.w	sl, sl, #1
 800b772:	9304      	str	r3, [sp, #16]
 800b774:	9307      	str	r3, [sp, #28]
 800b776:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b77a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b77c:	4654      	mov	r4, sl
 800b77e:	2205      	movs	r2, #5
 800b780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b784:	484e      	ldr	r0, [pc, #312]	@ (800b8c0 <_svfiprintf_r+0x1e4>)
 800b786:	f7f4 fd23 	bl	80001d0 <memchr>
 800b78a:	9a04      	ldr	r2, [sp, #16]
 800b78c:	b9d8      	cbnz	r0, 800b7c6 <_svfiprintf_r+0xea>
 800b78e:	06d0      	lsls	r0, r2, #27
 800b790:	bf44      	itt	mi
 800b792:	2320      	movmi	r3, #32
 800b794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b798:	0711      	lsls	r1, r2, #28
 800b79a:	bf44      	itt	mi
 800b79c:	232b      	movmi	r3, #43	@ 0x2b
 800b79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7a8:	d015      	beq.n	800b7d6 <_svfiprintf_r+0xfa>
 800b7aa:	9a07      	ldr	r2, [sp, #28]
 800b7ac:	4654      	mov	r4, sl
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	f04f 0c0a 	mov.w	ip, #10
 800b7b4:	4621      	mov	r1, r4
 800b7b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7ba:	3b30      	subs	r3, #48	@ 0x30
 800b7bc:	2b09      	cmp	r3, #9
 800b7be:	d94b      	bls.n	800b858 <_svfiprintf_r+0x17c>
 800b7c0:	b1b0      	cbz	r0, 800b7f0 <_svfiprintf_r+0x114>
 800b7c2:	9207      	str	r2, [sp, #28]
 800b7c4:	e014      	b.n	800b7f0 <_svfiprintf_r+0x114>
 800b7c6:	eba0 0308 	sub.w	r3, r0, r8
 800b7ca:	fa09 f303 	lsl.w	r3, r9, r3
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	9304      	str	r3, [sp, #16]
 800b7d2:	46a2      	mov	sl, r4
 800b7d4:	e7d2      	b.n	800b77c <_svfiprintf_r+0xa0>
 800b7d6:	9b03      	ldr	r3, [sp, #12]
 800b7d8:	1d19      	adds	r1, r3, #4
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	9103      	str	r1, [sp, #12]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	bfbb      	ittet	lt
 800b7e2:	425b      	neglt	r3, r3
 800b7e4:	f042 0202 	orrlt.w	r2, r2, #2
 800b7e8:	9307      	strge	r3, [sp, #28]
 800b7ea:	9307      	strlt	r3, [sp, #28]
 800b7ec:	bfb8      	it	lt
 800b7ee:	9204      	strlt	r2, [sp, #16]
 800b7f0:	7823      	ldrb	r3, [r4, #0]
 800b7f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7f4:	d10a      	bne.n	800b80c <_svfiprintf_r+0x130>
 800b7f6:	7863      	ldrb	r3, [r4, #1]
 800b7f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7fa:	d132      	bne.n	800b862 <_svfiprintf_r+0x186>
 800b7fc:	9b03      	ldr	r3, [sp, #12]
 800b7fe:	1d1a      	adds	r2, r3, #4
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	9203      	str	r2, [sp, #12]
 800b804:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b808:	3402      	adds	r4, #2
 800b80a:	9305      	str	r3, [sp, #20]
 800b80c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b8d0 <_svfiprintf_r+0x1f4>
 800b810:	7821      	ldrb	r1, [r4, #0]
 800b812:	2203      	movs	r2, #3
 800b814:	4650      	mov	r0, sl
 800b816:	f7f4 fcdb 	bl	80001d0 <memchr>
 800b81a:	b138      	cbz	r0, 800b82c <_svfiprintf_r+0x150>
 800b81c:	9b04      	ldr	r3, [sp, #16]
 800b81e:	eba0 000a 	sub.w	r0, r0, sl
 800b822:	2240      	movs	r2, #64	@ 0x40
 800b824:	4082      	lsls	r2, r0
 800b826:	4313      	orrs	r3, r2
 800b828:	3401      	adds	r4, #1
 800b82a:	9304      	str	r3, [sp, #16]
 800b82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b830:	4824      	ldr	r0, [pc, #144]	@ (800b8c4 <_svfiprintf_r+0x1e8>)
 800b832:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b836:	2206      	movs	r2, #6
 800b838:	f7f4 fcca 	bl	80001d0 <memchr>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d036      	beq.n	800b8ae <_svfiprintf_r+0x1d2>
 800b840:	4b21      	ldr	r3, [pc, #132]	@ (800b8c8 <_svfiprintf_r+0x1ec>)
 800b842:	bb1b      	cbnz	r3, 800b88c <_svfiprintf_r+0x1b0>
 800b844:	9b03      	ldr	r3, [sp, #12]
 800b846:	3307      	adds	r3, #7
 800b848:	f023 0307 	bic.w	r3, r3, #7
 800b84c:	3308      	adds	r3, #8
 800b84e:	9303      	str	r3, [sp, #12]
 800b850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b852:	4433      	add	r3, r6
 800b854:	9309      	str	r3, [sp, #36]	@ 0x24
 800b856:	e76a      	b.n	800b72e <_svfiprintf_r+0x52>
 800b858:	fb0c 3202 	mla	r2, ip, r2, r3
 800b85c:	460c      	mov	r4, r1
 800b85e:	2001      	movs	r0, #1
 800b860:	e7a8      	b.n	800b7b4 <_svfiprintf_r+0xd8>
 800b862:	2300      	movs	r3, #0
 800b864:	3401      	adds	r4, #1
 800b866:	9305      	str	r3, [sp, #20]
 800b868:	4619      	mov	r1, r3
 800b86a:	f04f 0c0a 	mov.w	ip, #10
 800b86e:	4620      	mov	r0, r4
 800b870:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b874:	3a30      	subs	r2, #48	@ 0x30
 800b876:	2a09      	cmp	r2, #9
 800b878:	d903      	bls.n	800b882 <_svfiprintf_r+0x1a6>
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d0c6      	beq.n	800b80c <_svfiprintf_r+0x130>
 800b87e:	9105      	str	r1, [sp, #20]
 800b880:	e7c4      	b.n	800b80c <_svfiprintf_r+0x130>
 800b882:	fb0c 2101 	mla	r1, ip, r1, r2
 800b886:	4604      	mov	r4, r0
 800b888:	2301      	movs	r3, #1
 800b88a:	e7f0      	b.n	800b86e <_svfiprintf_r+0x192>
 800b88c:	ab03      	add	r3, sp, #12
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	462a      	mov	r2, r5
 800b892:	4b0e      	ldr	r3, [pc, #56]	@ (800b8cc <_svfiprintf_r+0x1f0>)
 800b894:	a904      	add	r1, sp, #16
 800b896:	4638      	mov	r0, r7
 800b898:	f7fd fd50 	bl	800933c <_printf_float>
 800b89c:	1c42      	adds	r2, r0, #1
 800b89e:	4606      	mov	r6, r0
 800b8a0:	d1d6      	bne.n	800b850 <_svfiprintf_r+0x174>
 800b8a2:	89ab      	ldrh	r3, [r5, #12]
 800b8a4:	065b      	lsls	r3, r3, #25
 800b8a6:	f53f af2d 	bmi.w	800b704 <_svfiprintf_r+0x28>
 800b8aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8ac:	e72c      	b.n	800b708 <_svfiprintf_r+0x2c>
 800b8ae:	ab03      	add	r3, sp, #12
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	462a      	mov	r2, r5
 800b8b4:	4b05      	ldr	r3, [pc, #20]	@ (800b8cc <_svfiprintf_r+0x1f0>)
 800b8b6:	a904      	add	r1, sp, #16
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f7fd ffd7 	bl	800986c <_printf_i>
 800b8be:	e7ed      	b.n	800b89c <_svfiprintf_r+0x1c0>
 800b8c0:	0800c360 	.word	0x0800c360
 800b8c4:	0800c36a 	.word	0x0800c36a
 800b8c8:	0800933d 	.word	0x0800933d
 800b8cc:	0800b625 	.word	0x0800b625
 800b8d0:	0800c366 	.word	0x0800c366

0800b8d4 <__sfputc_r>:
 800b8d4:	6893      	ldr	r3, [r2, #8]
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	b410      	push	{r4}
 800b8dc:	6093      	str	r3, [r2, #8]
 800b8de:	da08      	bge.n	800b8f2 <__sfputc_r+0x1e>
 800b8e0:	6994      	ldr	r4, [r2, #24]
 800b8e2:	42a3      	cmp	r3, r4
 800b8e4:	db01      	blt.n	800b8ea <__sfputc_r+0x16>
 800b8e6:	290a      	cmp	r1, #10
 800b8e8:	d103      	bne.n	800b8f2 <__sfputc_r+0x1e>
 800b8ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8ee:	f7fe baa6 	b.w	8009e3e <__swbuf_r>
 800b8f2:	6813      	ldr	r3, [r2, #0]
 800b8f4:	1c58      	adds	r0, r3, #1
 800b8f6:	6010      	str	r0, [r2, #0]
 800b8f8:	7019      	strb	r1, [r3, #0]
 800b8fa:	4608      	mov	r0, r1
 800b8fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <__sfputs_r>:
 800b902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b904:	4606      	mov	r6, r0
 800b906:	460f      	mov	r7, r1
 800b908:	4614      	mov	r4, r2
 800b90a:	18d5      	adds	r5, r2, r3
 800b90c:	42ac      	cmp	r4, r5
 800b90e:	d101      	bne.n	800b914 <__sfputs_r+0x12>
 800b910:	2000      	movs	r0, #0
 800b912:	e007      	b.n	800b924 <__sfputs_r+0x22>
 800b914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b918:	463a      	mov	r2, r7
 800b91a:	4630      	mov	r0, r6
 800b91c:	f7ff ffda 	bl	800b8d4 <__sfputc_r>
 800b920:	1c43      	adds	r3, r0, #1
 800b922:	d1f3      	bne.n	800b90c <__sfputs_r+0xa>
 800b924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b928 <_vfiprintf_r>:
 800b928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b92c:	460d      	mov	r5, r1
 800b92e:	b09d      	sub	sp, #116	@ 0x74
 800b930:	4614      	mov	r4, r2
 800b932:	4698      	mov	r8, r3
 800b934:	4606      	mov	r6, r0
 800b936:	b118      	cbz	r0, 800b940 <_vfiprintf_r+0x18>
 800b938:	6a03      	ldr	r3, [r0, #32]
 800b93a:	b90b      	cbnz	r3, 800b940 <_vfiprintf_r+0x18>
 800b93c:	f7fe f942 	bl	8009bc4 <__sinit>
 800b940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b942:	07d9      	lsls	r1, r3, #31
 800b944:	d405      	bmi.n	800b952 <_vfiprintf_r+0x2a>
 800b946:	89ab      	ldrh	r3, [r5, #12]
 800b948:	059a      	lsls	r2, r3, #22
 800b94a:	d402      	bmi.n	800b952 <_vfiprintf_r+0x2a>
 800b94c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b94e:	f7fe fb88 	bl	800a062 <__retarget_lock_acquire_recursive>
 800b952:	89ab      	ldrh	r3, [r5, #12]
 800b954:	071b      	lsls	r3, r3, #28
 800b956:	d501      	bpl.n	800b95c <_vfiprintf_r+0x34>
 800b958:	692b      	ldr	r3, [r5, #16]
 800b95a:	b99b      	cbnz	r3, 800b984 <_vfiprintf_r+0x5c>
 800b95c:	4629      	mov	r1, r5
 800b95e:	4630      	mov	r0, r6
 800b960:	f7fe faac 	bl	8009ebc <__swsetup_r>
 800b964:	b170      	cbz	r0, 800b984 <_vfiprintf_r+0x5c>
 800b966:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b968:	07dc      	lsls	r4, r3, #31
 800b96a:	d504      	bpl.n	800b976 <_vfiprintf_r+0x4e>
 800b96c:	f04f 30ff 	mov.w	r0, #4294967295
 800b970:	b01d      	add	sp, #116	@ 0x74
 800b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b976:	89ab      	ldrh	r3, [r5, #12]
 800b978:	0598      	lsls	r0, r3, #22
 800b97a:	d4f7      	bmi.n	800b96c <_vfiprintf_r+0x44>
 800b97c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b97e:	f7fe fb71 	bl	800a064 <__retarget_lock_release_recursive>
 800b982:	e7f3      	b.n	800b96c <_vfiprintf_r+0x44>
 800b984:	2300      	movs	r3, #0
 800b986:	9309      	str	r3, [sp, #36]	@ 0x24
 800b988:	2320      	movs	r3, #32
 800b98a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b98e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b992:	2330      	movs	r3, #48	@ 0x30
 800b994:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb44 <_vfiprintf_r+0x21c>
 800b998:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b99c:	f04f 0901 	mov.w	r9, #1
 800b9a0:	4623      	mov	r3, r4
 800b9a2:	469a      	mov	sl, r3
 800b9a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9a8:	b10a      	cbz	r2, 800b9ae <_vfiprintf_r+0x86>
 800b9aa:	2a25      	cmp	r2, #37	@ 0x25
 800b9ac:	d1f9      	bne.n	800b9a2 <_vfiprintf_r+0x7a>
 800b9ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b9b2:	d00b      	beq.n	800b9cc <_vfiprintf_r+0xa4>
 800b9b4:	465b      	mov	r3, fp
 800b9b6:	4622      	mov	r2, r4
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	f7ff ffa1 	bl	800b902 <__sfputs_r>
 800b9c0:	3001      	adds	r0, #1
 800b9c2:	f000 80a7 	beq.w	800bb14 <_vfiprintf_r+0x1ec>
 800b9c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9c8:	445a      	add	r2, fp
 800b9ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f000 809f 	beq.w	800bb14 <_vfiprintf_r+0x1ec>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9e0:	f10a 0a01 	add.w	sl, sl, #1
 800b9e4:	9304      	str	r3, [sp, #16]
 800b9e6:	9307      	str	r3, [sp, #28]
 800b9e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9ee:	4654      	mov	r4, sl
 800b9f0:	2205      	movs	r2, #5
 800b9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f6:	4853      	ldr	r0, [pc, #332]	@ (800bb44 <_vfiprintf_r+0x21c>)
 800b9f8:	f7f4 fbea 	bl	80001d0 <memchr>
 800b9fc:	9a04      	ldr	r2, [sp, #16]
 800b9fe:	b9d8      	cbnz	r0, 800ba38 <_vfiprintf_r+0x110>
 800ba00:	06d1      	lsls	r1, r2, #27
 800ba02:	bf44      	itt	mi
 800ba04:	2320      	movmi	r3, #32
 800ba06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba0a:	0713      	lsls	r3, r2, #28
 800ba0c:	bf44      	itt	mi
 800ba0e:	232b      	movmi	r3, #43	@ 0x2b
 800ba10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba14:	f89a 3000 	ldrb.w	r3, [sl]
 800ba18:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba1a:	d015      	beq.n	800ba48 <_vfiprintf_r+0x120>
 800ba1c:	9a07      	ldr	r2, [sp, #28]
 800ba1e:	4654      	mov	r4, sl
 800ba20:	2000      	movs	r0, #0
 800ba22:	f04f 0c0a 	mov.w	ip, #10
 800ba26:	4621      	mov	r1, r4
 800ba28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba2c:	3b30      	subs	r3, #48	@ 0x30
 800ba2e:	2b09      	cmp	r3, #9
 800ba30:	d94b      	bls.n	800baca <_vfiprintf_r+0x1a2>
 800ba32:	b1b0      	cbz	r0, 800ba62 <_vfiprintf_r+0x13a>
 800ba34:	9207      	str	r2, [sp, #28]
 800ba36:	e014      	b.n	800ba62 <_vfiprintf_r+0x13a>
 800ba38:	eba0 0308 	sub.w	r3, r0, r8
 800ba3c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba40:	4313      	orrs	r3, r2
 800ba42:	9304      	str	r3, [sp, #16]
 800ba44:	46a2      	mov	sl, r4
 800ba46:	e7d2      	b.n	800b9ee <_vfiprintf_r+0xc6>
 800ba48:	9b03      	ldr	r3, [sp, #12]
 800ba4a:	1d19      	adds	r1, r3, #4
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	9103      	str	r1, [sp, #12]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	bfbb      	ittet	lt
 800ba54:	425b      	neglt	r3, r3
 800ba56:	f042 0202 	orrlt.w	r2, r2, #2
 800ba5a:	9307      	strge	r3, [sp, #28]
 800ba5c:	9307      	strlt	r3, [sp, #28]
 800ba5e:	bfb8      	it	lt
 800ba60:	9204      	strlt	r2, [sp, #16]
 800ba62:	7823      	ldrb	r3, [r4, #0]
 800ba64:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba66:	d10a      	bne.n	800ba7e <_vfiprintf_r+0x156>
 800ba68:	7863      	ldrb	r3, [r4, #1]
 800ba6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba6c:	d132      	bne.n	800bad4 <_vfiprintf_r+0x1ac>
 800ba6e:	9b03      	ldr	r3, [sp, #12]
 800ba70:	1d1a      	adds	r2, r3, #4
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	9203      	str	r2, [sp, #12]
 800ba76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba7a:	3402      	adds	r4, #2
 800ba7c:	9305      	str	r3, [sp, #20]
 800ba7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb54 <_vfiprintf_r+0x22c>
 800ba82:	7821      	ldrb	r1, [r4, #0]
 800ba84:	2203      	movs	r2, #3
 800ba86:	4650      	mov	r0, sl
 800ba88:	f7f4 fba2 	bl	80001d0 <memchr>
 800ba8c:	b138      	cbz	r0, 800ba9e <_vfiprintf_r+0x176>
 800ba8e:	9b04      	ldr	r3, [sp, #16]
 800ba90:	eba0 000a 	sub.w	r0, r0, sl
 800ba94:	2240      	movs	r2, #64	@ 0x40
 800ba96:	4082      	lsls	r2, r0
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	3401      	adds	r4, #1
 800ba9c:	9304      	str	r3, [sp, #16]
 800ba9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa2:	4829      	ldr	r0, [pc, #164]	@ (800bb48 <_vfiprintf_r+0x220>)
 800baa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800baa8:	2206      	movs	r2, #6
 800baaa:	f7f4 fb91 	bl	80001d0 <memchr>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d03f      	beq.n	800bb32 <_vfiprintf_r+0x20a>
 800bab2:	4b26      	ldr	r3, [pc, #152]	@ (800bb4c <_vfiprintf_r+0x224>)
 800bab4:	bb1b      	cbnz	r3, 800bafe <_vfiprintf_r+0x1d6>
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	3307      	adds	r3, #7
 800baba:	f023 0307 	bic.w	r3, r3, #7
 800babe:	3308      	adds	r3, #8
 800bac0:	9303      	str	r3, [sp, #12]
 800bac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bac4:	443b      	add	r3, r7
 800bac6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bac8:	e76a      	b.n	800b9a0 <_vfiprintf_r+0x78>
 800baca:	fb0c 3202 	mla	r2, ip, r2, r3
 800bace:	460c      	mov	r4, r1
 800bad0:	2001      	movs	r0, #1
 800bad2:	e7a8      	b.n	800ba26 <_vfiprintf_r+0xfe>
 800bad4:	2300      	movs	r3, #0
 800bad6:	3401      	adds	r4, #1
 800bad8:	9305      	str	r3, [sp, #20]
 800bada:	4619      	mov	r1, r3
 800badc:	f04f 0c0a 	mov.w	ip, #10
 800bae0:	4620      	mov	r0, r4
 800bae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bae6:	3a30      	subs	r2, #48	@ 0x30
 800bae8:	2a09      	cmp	r2, #9
 800baea:	d903      	bls.n	800baf4 <_vfiprintf_r+0x1cc>
 800baec:	2b00      	cmp	r3, #0
 800baee:	d0c6      	beq.n	800ba7e <_vfiprintf_r+0x156>
 800baf0:	9105      	str	r1, [sp, #20]
 800baf2:	e7c4      	b.n	800ba7e <_vfiprintf_r+0x156>
 800baf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800baf8:	4604      	mov	r4, r0
 800bafa:	2301      	movs	r3, #1
 800bafc:	e7f0      	b.n	800bae0 <_vfiprintf_r+0x1b8>
 800bafe:	ab03      	add	r3, sp, #12
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	462a      	mov	r2, r5
 800bb04:	4b12      	ldr	r3, [pc, #72]	@ (800bb50 <_vfiprintf_r+0x228>)
 800bb06:	a904      	add	r1, sp, #16
 800bb08:	4630      	mov	r0, r6
 800bb0a:	f7fd fc17 	bl	800933c <_printf_float>
 800bb0e:	4607      	mov	r7, r0
 800bb10:	1c78      	adds	r0, r7, #1
 800bb12:	d1d6      	bne.n	800bac2 <_vfiprintf_r+0x19a>
 800bb14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb16:	07d9      	lsls	r1, r3, #31
 800bb18:	d405      	bmi.n	800bb26 <_vfiprintf_r+0x1fe>
 800bb1a:	89ab      	ldrh	r3, [r5, #12]
 800bb1c:	059a      	lsls	r2, r3, #22
 800bb1e:	d402      	bmi.n	800bb26 <_vfiprintf_r+0x1fe>
 800bb20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb22:	f7fe fa9f 	bl	800a064 <__retarget_lock_release_recursive>
 800bb26:	89ab      	ldrh	r3, [r5, #12]
 800bb28:	065b      	lsls	r3, r3, #25
 800bb2a:	f53f af1f 	bmi.w	800b96c <_vfiprintf_r+0x44>
 800bb2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb30:	e71e      	b.n	800b970 <_vfiprintf_r+0x48>
 800bb32:	ab03      	add	r3, sp, #12
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	462a      	mov	r2, r5
 800bb38:	4b05      	ldr	r3, [pc, #20]	@ (800bb50 <_vfiprintf_r+0x228>)
 800bb3a:	a904      	add	r1, sp, #16
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	f7fd fe95 	bl	800986c <_printf_i>
 800bb42:	e7e4      	b.n	800bb0e <_vfiprintf_r+0x1e6>
 800bb44:	0800c360 	.word	0x0800c360
 800bb48:	0800c36a 	.word	0x0800c36a
 800bb4c:	0800933d 	.word	0x0800933d
 800bb50:	0800b903 	.word	0x0800b903
 800bb54:	0800c366 	.word	0x0800c366

0800bb58 <__sflush_r>:
 800bb58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb60:	0716      	lsls	r6, r2, #28
 800bb62:	4605      	mov	r5, r0
 800bb64:	460c      	mov	r4, r1
 800bb66:	d454      	bmi.n	800bc12 <__sflush_r+0xba>
 800bb68:	684b      	ldr	r3, [r1, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	dc02      	bgt.n	800bb74 <__sflush_r+0x1c>
 800bb6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	dd48      	ble.n	800bc06 <__sflush_r+0xae>
 800bb74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb76:	2e00      	cmp	r6, #0
 800bb78:	d045      	beq.n	800bc06 <__sflush_r+0xae>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb80:	682f      	ldr	r7, [r5, #0]
 800bb82:	6a21      	ldr	r1, [r4, #32]
 800bb84:	602b      	str	r3, [r5, #0]
 800bb86:	d030      	beq.n	800bbea <__sflush_r+0x92>
 800bb88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb8a:	89a3      	ldrh	r3, [r4, #12]
 800bb8c:	0759      	lsls	r1, r3, #29
 800bb8e:	d505      	bpl.n	800bb9c <__sflush_r+0x44>
 800bb90:	6863      	ldr	r3, [r4, #4]
 800bb92:	1ad2      	subs	r2, r2, r3
 800bb94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb96:	b10b      	cbz	r3, 800bb9c <__sflush_r+0x44>
 800bb98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb9a:	1ad2      	subs	r2, r2, r3
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bba0:	6a21      	ldr	r1, [r4, #32]
 800bba2:	4628      	mov	r0, r5
 800bba4:	47b0      	blx	r6
 800bba6:	1c43      	adds	r3, r0, #1
 800bba8:	89a3      	ldrh	r3, [r4, #12]
 800bbaa:	d106      	bne.n	800bbba <__sflush_r+0x62>
 800bbac:	6829      	ldr	r1, [r5, #0]
 800bbae:	291d      	cmp	r1, #29
 800bbb0:	d82b      	bhi.n	800bc0a <__sflush_r+0xb2>
 800bbb2:	4a2a      	ldr	r2, [pc, #168]	@ (800bc5c <__sflush_r+0x104>)
 800bbb4:	410a      	asrs	r2, r1
 800bbb6:	07d6      	lsls	r6, r2, #31
 800bbb8:	d427      	bmi.n	800bc0a <__sflush_r+0xb2>
 800bbba:	2200      	movs	r2, #0
 800bbbc:	6062      	str	r2, [r4, #4]
 800bbbe:	04d9      	lsls	r1, r3, #19
 800bbc0:	6922      	ldr	r2, [r4, #16]
 800bbc2:	6022      	str	r2, [r4, #0]
 800bbc4:	d504      	bpl.n	800bbd0 <__sflush_r+0x78>
 800bbc6:	1c42      	adds	r2, r0, #1
 800bbc8:	d101      	bne.n	800bbce <__sflush_r+0x76>
 800bbca:	682b      	ldr	r3, [r5, #0]
 800bbcc:	b903      	cbnz	r3, 800bbd0 <__sflush_r+0x78>
 800bbce:	6560      	str	r0, [r4, #84]	@ 0x54
 800bbd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbd2:	602f      	str	r7, [r5, #0]
 800bbd4:	b1b9      	cbz	r1, 800bc06 <__sflush_r+0xae>
 800bbd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbda:	4299      	cmp	r1, r3
 800bbdc:	d002      	beq.n	800bbe4 <__sflush_r+0x8c>
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f7ff f89e 	bl	800ad20 <_free_r>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbe8:	e00d      	b.n	800bc06 <__sflush_r+0xae>
 800bbea:	2301      	movs	r3, #1
 800bbec:	4628      	mov	r0, r5
 800bbee:	47b0      	blx	r6
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	1c50      	adds	r0, r2, #1
 800bbf4:	d1c9      	bne.n	800bb8a <__sflush_r+0x32>
 800bbf6:	682b      	ldr	r3, [r5, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d0c6      	beq.n	800bb8a <__sflush_r+0x32>
 800bbfc:	2b1d      	cmp	r3, #29
 800bbfe:	d001      	beq.n	800bc04 <__sflush_r+0xac>
 800bc00:	2b16      	cmp	r3, #22
 800bc02:	d11e      	bne.n	800bc42 <__sflush_r+0xea>
 800bc04:	602f      	str	r7, [r5, #0]
 800bc06:	2000      	movs	r0, #0
 800bc08:	e022      	b.n	800bc50 <__sflush_r+0xf8>
 800bc0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc0e:	b21b      	sxth	r3, r3
 800bc10:	e01b      	b.n	800bc4a <__sflush_r+0xf2>
 800bc12:	690f      	ldr	r7, [r1, #16]
 800bc14:	2f00      	cmp	r7, #0
 800bc16:	d0f6      	beq.n	800bc06 <__sflush_r+0xae>
 800bc18:	0793      	lsls	r3, r2, #30
 800bc1a:	680e      	ldr	r6, [r1, #0]
 800bc1c:	bf08      	it	eq
 800bc1e:	694b      	ldreq	r3, [r1, #20]
 800bc20:	600f      	str	r7, [r1, #0]
 800bc22:	bf18      	it	ne
 800bc24:	2300      	movne	r3, #0
 800bc26:	eba6 0807 	sub.w	r8, r6, r7
 800bc2a:	608b      	str	r3, [r1, #8]
 800bc2c:	f1b8 0f00 	cmp.w	r8, #0
 800bc30:	dde9      	ble.n	800bc06 <__sflush_r+0xae>
 800bc32:	6a21      	ldr	r1, [r4, #32]
 800bc34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc36:	4643      	mov	r3, r8
 800bc38:	463a      	mov	r2, r7
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	47b0      	blx	r6
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	dc08      	bgt.n	800bc54 <__sflush_r+0xfc>
 800bc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc4a:	81a3      	strh	r3, [r4, #12]
 800bc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc54:	4407      	add	r7, r0
 800bc56:	eba8 0800 	sub.w	r8, r8, r0
 800bc5a:	e7e7      	b.n	800bc2c <__sflush_r+0xd4>
 800bc5c:	dfbffffe 	.word	0xdfbffffe

0800bc60 <_fflush_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	690b      	ldr	r3, [r1, #16]
 800bc64:	4605      	mov	r5, r0
 800bc66:	460c      	mov	r4, r1
 800bc68:	b913      	cbnz	r3, 800bc70 <_fflush_r+0x10>
 800bc6a:	2500      	movs	r5, #0
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	b118      	cbz	r0, 800bc7a <_fflush_r+0x1a>
 800bc72:	6a03      	ldr	r3, [r0, #32]
 800bc74:	b90b      	cbnz	r3, 800bc7a <_fflush_r+0x1a>
 800bc76:	f7fd ffa5 	bl	8009bc4 <__sinit>
 800bc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d0f3      	beq.n	800bc6a <_fflush_r+0xa>
 800bc82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc84:	07d0      	lsls	r0, r2, #31
 800bc86:	d404      	bmi.n	800bc92 <_fflush_r+0x32>
 800bc88:	0599      	lsls	r1, r3, #22
 800bc8a:	d402      	bmi.n	800bc92 <_fflush_r+0x32>
 800bc8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc8e:	f7fe f9e8 	bl	800a062 <__retarget_lock_acquire_recursive>
 800bc92:	4628      	mov	r0, r5
 800bc94:	4621      	mov	r1, r4
 800bc96:	f7ff ff5f 	bl	800bb58 <__sflush_r>
 800bc9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc9c:	07da      	lsls	r2, r3, #31
 800bc9e:	4605      	mov	r5, r0
 800bca0:	d4e4      	bmi.n	800bc6c <_fflush_r+0xc>
 800bca2:	89a3      	ldrh	r3, [r4, #12]
 800bca4:	059b      	lsls	r3, r3, #22
 800bca6:	d4e1      	bmi.n	800bc6c <_fflush_r+0xc>
 800bca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcaa:	f7fe f9db 	bl	800a064 <__retarget_lock_release_recursive>
 800bcae:	e7dd      	b.n	800bc6c <_fflush_r+0xc>

0800bcb0 <__swhatbuf_r>:
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb8:	2900      	cmp	r1, #0
 800bcba:	b096      	sub	sp, #88	@ 0x58
 800bcbc:	4615      	mov	r5, r2
 800bcbe:	461e      	mov	r6, r3
 800bcc0:	da0d      	bge.n	800bcde <__swhatbuf_r+0x2e>
 800bcc2:	89a3      	ldrh	r3, [r4, #12]
 800bcc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bcc8:	f04f 0100 	mov.w	r1, #0
 800bccc:	bf14      	ite	ne
 800bcce:	2340      	movne	r3, #64	@ 0x40
 800bcd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	6031      	str	r1, [r6, #0]
 800bcd8:	602b      	str	r3, [r5, #0]
 800bcda:	b016      	add	sp, #88	@ 0x58
 800bcdc:	bd70      	pop	{r4, r5, r6, pc}
 800bcde:	466a      	mov	r2, sp
 800bce0:	f000 f862 	bl	800bda8 <_fstat_r>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	dbec      	blt.n	800bcc2 <__swhatbuf_r+0x12>
 800bce8:	9901      	ldr	r1, [sp, #4]
 800bcea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcf2:	4259      	negs	r1, r3
 800bcf4:	4159      	adcs	r1, r3
 800bcf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcfa:	e7eb      	b.n	800bcd4 <__swhatbuf_r+0x24>

0800bcfc <__smakebuf_r>:
 800bcfc:	898b      	ldrh	r3, [r1, #12]
 800bcfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd00:	079d      	lsls	r5, r3, #30
 800bd02:	4606      	mov	r6, r0
 800bd04:	460c      	mov	r4, r1
 800bd06:	d507      	bpl.n	800bd18 <__smakebuf_r+0x1c>
 800bd08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	6123      	str	r3, [r4, #16]
 800bd10:	2301      	movs	r3, #1
 800bd12:	6163      	str	r3, [r4, #20]
 800bd14:	b003      	add	sp, #12
 800bd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd18:	ab01      	add	r3, sp, #4
 800bd1a:	466a      	mov	r2, sp
 800bd1c:	f7ff ffc8 	bl	800bcb0 <__swhatbuf_r>
 800bd20:	9f00      	ldr	r7, [sp, #0]
 800bd22:	4605      	mov	r5, r0
 800bd24:	4639      	mov	r1, r7
 800bd26:	4630      	mov	r0, r6
 800bd28:	f7ff f86e 	bl	800ae08 <_malloc_r>
 800bd2c:	b948      	cbnz	r0, 800bd42 <__smakebuf_r+0x46>
 800bd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd32:	059a      	lsls	r2, r3, #22
 800bd34:	d4ee      	bmi.n	800bd14 <__smakebuf_r+0x18>
 800bd36:	f023 0303 	bic.w	r3, r3, #3
 800bd3a:	f043 0302 	orr.w	r3, r3, #2
 800bd3e:	81a3      	strh	r3, [r4, #12]
 800bd40:	e7e2      	b.n	800bd08 <__smakebuf_r+0xc>
 800bd42:	89a3      	ldrh	r3, [r4, #12]
 800bd44:	6020      	str	r0, [r4, #0]
 800bd46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd4a:	81a3      	strh	r3, [r4, #12]
 800bd4c:	9b01      	ldr	r3, [sp, #4]
 800bd4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd52:	b15b      	cbz	r3, 800bd6c <__smakebuf_r+0x70>
 800bd54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f000 f837 	bl	800bdcc <_isatty_r>
 800bd5e:	b128      	cbz	r0, 800bd6c <__smakebuf_r+0x70>
 800bd60:	89a3      	ldrh	r3, [r4, #12]
 800bd62:	f023 0303 	bic.w	r3, r3, #3
 800bd66:	f043 0301 	orr.w	r3, r3, #1
 800bd6a:	81a3      	strh	r3, [r4, #12]
 800bd6c:	89a3      	ldrh	r3, [r4, #12]
 800bd6e:	431d      	orrs	r5, r3
 800bd70:	81a5      	strh	r5, [r4, #12]
 800bd72:	e7cf      	b.n	800bd14 <__smakebuf_r+0x18>

0800bd74 <memmove>:
 800bd74:	4288      	cmp	r0, r1
 800bd76:	b510      	push	{r4, lr}
 800bd78:	eb01 0402 	add.w	r4, r1, r2
 800bd7c:	d902      	bls.n	800bd84 <memmove+0x10>
 800bd7e:	4284      	cmp	r4, r0
 800bd80:	4623      	mov	r3, r4
 800bd82:	d807      	bhi.n	800bd94 <memmove+0x20>
 800bd84:	1e43      	subs	r3, r0, #1
 800bd86:	42a1      	cmp	r1, r4
 800bd88:	d008      	beq.n	800bd9c <memmove+0x28>
 800bd8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd92:	e7f8      	b.n	800bd86 <memmove+0x12>
 800bd94:	4402      	add	r2, r0
 800bd96:	4601      	mov	r1, r0
 800bd98:	428a      	cmp	r2, r1
 800bd9a:	d100      	bne.n	800bd9e <memmove+0x2a>
 800bd9c:	bd10      	pop	{r4, pc}
 800bd9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bda2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bda6:	e7f7      	b.n	800bd98 <memmove+0x24>

0800bda8 <_fstat_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4d07      	ldr	r5, [pc, #28]	@ (800bdc8 <_fstat_r+0x20>)
 800bdac:	2300      	movs	r3, #0
 800bdae:	4604      	mov	r4, r0
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	602b      	str	r3, [r5, #0]
 800bdb6:	f7f5 fd07 	bl	80017c8 <_fstat>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	d102      	bne.n	800bdc4 <_fstat_r+0x1c>
 800bdbe:	682b      	ldr	r3, [r5, #0]
 800bdc0:	b103      	cbz	r3, 800bdc4 <_fstat_r+0x1c>
 800bdc2:	6023      	str	r3, [r4, #0]
 800bdc4:	bd38      	pop	{r3, r4, r5, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20002264 	.word	0x20002264

0800bdcc <_isatty_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4d06      	ldr	r5, [pc, #24]	@ (800bde8 <_isatty_r+0x1c>)
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	4608      	mov	r0, r1
 800bdd6:	602b      	str	r3, [r5, #0]
 800bdd8:	f7f5 fd06 	bl	80017e8 <_isatty>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_isatty_r+0x1a>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_isatty_r+0x1a>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	20002264 	.word	0x20002264

0800bdec <_sbrk_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	4d06      	ldr	r5, [pc, #24]	@ (800be08 <_sbrk_r+0x1c>)
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	4608      	mov	r0, r1
 800bdf6:	602b      	str	r3, [r5, #0]
 800bdf8:	f7f5 fd0e 	bl	8001818 <_sbrk>
 800bdfc:	1c43      	adds	r3, r0, #1
 800bdfe:	d102      	bne.n	800be06 <_sbrk_r+0x1a>
 800be00:	682b      	ldr	r3, [r5, #0]
 800be02:	b103      	cbz	r3, 800be06 <_sbrk_r+0x1a>
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	bd38      	pop	{r3, r4, r5, pc}
 800be08:	20002264 	.word	0x20002264

0800be0c <__assert_func>:
 800be0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be0e:	4614      	mov	r4, r2
 800be10:	461a      	mov	r2, r3
 800be12:	4b09      	ldr	r3, [pc, #36]	@ (800be38 <__assert_func+0x2c>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4605      	mov	r5, r0
 800be18:	68d8      	ldr	r0, [r3, #12]
 800be1a:	b954      	cbnz	r4, 800be32 <__assert_func+0x26>
 800be1c:	4b07      	ldr	r3, [pc, #28]	@ (800be3c <__assert_func+0x30>)
 800be1e:	461c      	mov	r4, r3
 800be20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be24:	9100      	str	r1, [sp, #0]
 800be26:	462b      	mov	r3, r5
 800be28:	4905      	ldr	r1, [pc, #20]	@ (800be40 <__assert_func+0x34>)
 800be2a:	f000 f86f 	bl	800bf0c <fiprintf>
 800be2e:	f000 f87f 	bl	800bf30 <abort>
 800be32:	4b04      	ldr	r3, [pc, #16]	@ (800be44 <__assert_func+0x38>)
 800be34:	e7f4      	b.n	800be20 <__assert_func+0x14>
 800be36:	bf00      	nop
 800be38:	2000001c 	.word	0x2000001c
 800be3c:	0800c3b6 	.word	0x0800c3b6
 800be40:	0800c388 	.word	0x0800c388
 800be44:	0800c37b 	.word	0x0800c37b

0800be48 <_calloc_r>:
 800be48:	b570      	push	{r4, r5, r6, lr}
 800be4a:	fba1 5402 	umull	r5, r4, r1, r2
 800be4e:	b93c      	cbnz	r4, 800be60 <_calloc_r+0x18>
 800be50:	4629      	mov	r1, r5
 800be52:	f7fe ffd9 	bl	800ae08 <_malloc_r>
 800be56:	4606      	mov	r6, r0
 800be58:	b928      	cbnz	r0, 800be66 <_calloc_r+0x1e>
 800be5a:	2600      	movs	r6, #0
 800be5c:	4630      	mov	r0, r6
 800be5e:	bd70      	pop	{r4, r5, r6, pc}
 800be60:	220c      	movs	r2, #12
 800be62:	6002      	str	r2, [r0, #0]
 800be64:	e7f9      	b.n	800be5a <_calloc_r+0x12>
 800be66:	462a      	mov	r2, r5
 800be68:	4621      	mov	r1, r4
 800be6a:	f7fe f87d 	bl	8009f68 <memset>
 800be6e:	e7f5      	b.n	800be5c <_calloc_r+0x14>

0800be70 <__ascii_mbtowc>:
 800be70:	b082      	sub	sp, #8
 800be72:	b901      	cbnz	r1, 800be76 <__ascii_mbtowc+0x6>
 800be74:	a901      	add	r1, sp, #4
 800be76:	b142      	cbz	r2, 800be8a <__ascii_mbtowc+0x1a>
 800be78:	b14b      	cbz	r3, 800be8e <__ascii_mbtowc+0x1e>
 800be7a:	7813      	ldrb	r3, [r2, #0]
 800be7c:	600b      	str	r3, [r1, #0]
 800be7e:	7812      	ldrb	r2, [r2, #0]
 800be80:	1e10      	subs	r0, r2, #0
 800be82:	bf18      	it	ne
 800be84:	2001      	movne	r0, #1
 800be86:	b002      	add	sp, #8
 800be88:	4770      	bx	lr
 800be8a:	4610      	mov	r0, r2
 800be8c:	e7fb      	b.n	800be86 <__ascii_mbtowc+0x16>
 800be8e:	f06f 0001 	mvn.w	r0, #1
 800be92:	e7f8      	b.n	800be86 <__ascii_mbtowc+0x16>

0800be94 <_realloc_r>:
 800be94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be98:	4680      	mov	r8, r0
 800be9a:	4615      	mov	r5, r2
 800be9c:	460c      	mov	r4, r1
 800be9e:	b921      	cbnz	r1, 800beaa <_realloc_r+0x16>
 800bea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bea4:	4611      	mov	r1, r2
 800bea6:	f7fe bfaf 	b.w	800ae08 <_malloc_r>
 800beaa:	b92a      	cbnz	r2, 800beb8 <_realloc_r+0x24>
 800beac:	f7fe ff38 	bl	800ad20 <_free_r>
 800beb0:	2400      	movs	r4, #0
 800beb2:	4620      	mov	r0, r4
 800beb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb8:	f000 f841 	bl	800bf3e <_malloc_usable_size_r>
 800bebc:	4285      	cmp	r5, r0
 800bebe:	4606      	mov	r6, r0
 800bec0:	d802      	bhi.n	800bec8 <_realloc_r+0x34>
 800bec2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bec6:	d8f4      	bhi.n	800beb2 <_realloc_r+0x1e>
 800bec8:	4629      	mov	r1, r5
 800beca:	4640      	mov	r0, r8
 800becc:	f7fe ff9c 	bl	800ae08 <_malloc_r>
 800bed0:	4607      	mov	r7, r0
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d0ec      	beq.n	800beb0 <_realloc_r+0x1c>
 800bed6:	42b5      	cmp	r5, r6
 800bed8:	462a      	mov	r2, r5
 800beda:	4621      	mov	r1, r4
 800bedc:	bf28      	it	cs
 800bede:	4632      	movcs	r2, r6
 800bee0:	f7fe f8c1 	bl	800a066 <memcpy>
 800bee4:	4621      	mov	r1, r4
 800bee6:	4640      	mov	r0, r8
 800bee8:	f7fe ff1a 	bl	800ad20 <_free_r>
 800beec:	463c      	mov	r4, r7
 800beee:	e7e0      	b.n	800beb2 <_realloc_r+0x1e>

0800bef0 <__ascii_wctomb>:
 800bef0:	4603      	mov	r3, r0
 800bef2:	4608      	mov	r0, r1
 800bef4:	b141      	cbz	r1, 800bf08 <__ascii_wctomb+0x18>
 800bef6:	2aff      	cmp	r2, #255	@ 0xff
 800bef8:	d904      	bls.n	800bf04 <__ascii_wctomb+0x14>
 800befa:	228a      	movs	r2, #138	@ 0x8a
 800befc:	601a      	str	r2, [r3, #0]
 800befe:	f04f 30ff 	mov.w	r0, #4294967295
 800bf02:	4770      	bx	lr
 800bf04:	700a      	strb	r2, [r1, #0]
 800bf06:	2001      	movs	r0, #1
 800bf08:	4770      	bx	lr
	...

0800bf0c <fiprintf>:
 800bf0c:	b40e      	push	{r1, r2, r3}
 800bf0e:	b503      	push	{r0, r1, lr}
 800bf10:	4601      	mov	r1, r0
 800bf12:	ab03      	add	r3, sp, #12
 800bf14:	4805      	ldr	r0, [pc, #20]	@ (800bf2c <fiprintf+0x20>)
 800bf16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf1a:	6800      	ldr	r0, [r0, #0]
 800bf1c:	9301      	str	r3, [sp, #4]
 800bf1e:	f7ff fd03 	bl	800b928 <_vfiprintf_r>
 800bf22:	b002      	add	sp, #8
 800bf24:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf28:	b003      	add	sp, #12
 800bf2a:	4770      	bx	lr
 800bf2c:	2000001c 	.word	0x2000001c

0800bf30 <abort>:
 800bf30:	b508      	push	{r3, lr}
 800bf32:	2006      	movs	r0, #6
 800bf34:	f000 f834 	bl	800bfa0 <raise>
 800bf38:	2001      	movs	r0, #1
 800bf3a:	f7f5 fbf5 	bl	8001728 <_exit>

0800bf3e <_malloc_usable_size_r>:
 800bf3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf42:	1f18      	subs	r0, r3, #4
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	bfbc      	itt	lt
 800bf48:	580b      	ldrlt	r3, [r1, r0]
 800bf4a:	18c0      	addlt	r0, r0, r3
 800bf4c:	4770      	bx	lr

0800bf4e <_raise_r>:
 800bf4e:	291f      	cmp	r1, #31
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4605      	mov	r5, r0
 800bf54:	460c      	mov	r4, r1
 800bf56:	d904      	bls.n	800bf62 <_raise_r+0x14>
 800bf58:	2316      	movs	r3, #22
 800bf5a:	6003      	str	r3, [r0, #0]
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf60:	bd38      	pop	{r3, r4, r5, pc}
 800bf62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bf64:	b112      	cbz	r2, 800bf6c <_raise_r+0x1e>
 800bf66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf6a:	b94b      	cbnz	r3, 800bf80 <_raise_r+0x32>
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	f000 f831 	bl	800bfd4 <_getpid_r>
 800bf72:	4622      	mov	r2, r4
 800bf74:	4601      	mov	r1, r0
 800bf76:	4628      	mov	r0, r5
 800bf78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf7c:	f000 b818 	b.w	800bfb0 <_kill_r>
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d00a      	beq.n	800bf9a <_raise_r+0x4c>
 800bf84:	1c59      	adds	r1, r3, #1
 800bf86:	d103      	bne.n	800bf90 <_raise_r+0x42>
 800bf88:	2316      	movs	r3, #22
 800bf8a:	6003      	str	r3, [r0, #0]
 800bf8c:	2001      	movs	r0, #1
 800bf8e:	e7e7      	b.n	800bf60 <_raise_r+0x12>
 800bf90:	2100      	movs	r1, #0
 800bf92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bf96:	4620      	mov	r0, r4
 800bf98:	4798      	blx	r3
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	e7e0      	b.n	800bf60 <_raise_r+0x12>
	...

0800bfa0 <raise>:
 800bfa0:	4b02      	ldr	r3, [pc, #8]	@ (800bfac <raise+0xc>)
 800bfa2:	4601      	mov	r1, r0
 800bfa4:	6818      	ldr	r0, [r3, #0]
 800bfa6:	f7ff bfd2 	b.w	800bf4e <_raise_r>
 800bfaa:	bf00      	nop
 800bfac:	2000001c 	.word	0x2000001c

0800bfb0 <_kill_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	4d07      	ldr	r5, [pc, #28]	@ (800bfd0 <_kill_r+0x20>)
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	4608      	mov	r0, r1
 800bfba:	4611      	mov	r1, r2
 800bfbc:	602b      	str	r3, [r5, #0]
 800bfbe:	f7f5 fba3 	bl	8001708 <_kill>
 800bfc2:	1c43      	adds	r3, r0, #1
 800bfc4:	d102      	bne.n	800bfcc <_kill_r+0x1c>
 800bfc6:	682b      	ldr	r3, [r5, #0]
 800bfc8:	b103      	cbz	r3, 800bfcc <_kill_r+0x1c>
 800bfca:	6023      	str	r3, [r4, #0]
 800bfcc:	bd38      	pop	{r3, r4, r5, pc}
 800bfce:	bf00      	nop
 800bfd0:	20002264 	.word	0x20002264

0800bfd4 <_getpid_r>:
 800bfd4:	f7f5 bb90 	b.w	80016f8 <_getpid>

0800bfd8 <_init>:
 800bfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfda:	bf00      	nop
 800bfdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfde:	bc08      	pop	{r3}
 800bfe0:	469e      	mov	lr, r3
 800bfe2:	4770      	bx	lr

0800bfe4 <_fini>:
 800bfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe6:	bf00      	nop
 800bfe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfea:	bc08      	pop	{r3}
 800bfec:	469e      	mov	lr, r3
 800bfee:	4770      	bx	lr
